name: release

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'rfds/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the deployment environment'
        required: true
        type: choice
        options:
          - production
          - staging

jobs:
  set-version-tag:
    runs-on: ubuntu-22.04
    environment: ${{ github.event.inputs.environment || 'production' }}

    outputs:
      version_tag: ${{ steps.set-version-tag.outputs.version_tag }}

    env:
      GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version tag
        id: set-version-tag
        run: |
          VERSION_TAG=$(./scripts/version_tag)
          echo "VERSION_TAG=${VERSION_TAG}" >> "${GITHUB_ENV}"
          echo "version_tag=${VERSION_TAG}" >> "${GITHUB_OUTPUT}"

      - name: Create tag
        run: |
          ./scripts/create_tag

  build-amd64:
    needs: set-version-tag
    runs-on: ubuntu-22.04
    environment: ${{ github.event.inputs.environment || 'production' }}

    strategy:
      matrix:
        target: [code-indexer, terrat-ee, terrat-oss]

    env:
      VERSION_TAG: ${{ needs.set-version-tag.outputs.version_tag }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TERRAT_UI_ANALYTICS: ${{ github.event.inputs.environment == 'production' && vars.TERRATEAM_POSTHOG_TOKEN || 'false' }}
      TERRATEAM_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
      MATRIX_TARGET: ${{ matrix.target }}

    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-tags: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set base image
        run: |
          ./scripts/base_image >> $GITHUB_ENV

      - name: Build and push ${{ matrix.target }} (amd64)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/terrat/Dockerfile
          push: true
          target: ${{ matrix.target }}
          build-args: |
            BASE_IMAGE=${{ env.BASE_IMAGE }}
          tags: ghcr.io/${{ github.repository_owner }}/${{ matrix.target }}:${{ env.VERSION_TAG }}-amd64

  build-arm64:
    needs: set-version-tag
    runs-on: ubuntu-22.04-arm64
    environment: ${{ github.event.inputs.environment || 'production' }}

    strategy:
      matrix:
        target: [code-indexer, terrat-ee, terrat-oss]

    env:
      VERSION_TAG: ${{ needs.set-version-tag.outputs.version_tag }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TERRATEAM_UI_ANALYTICS: ${{ github.event.inputs.environment == 'production' && vars.TERRATEAM_POSTHOG_TOKEN || 'false' }}
      TERRATEAM_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
      MATRIX_TARGET: ${{ matrix.target }}

    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-tags: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set base image
        run: |
          ./scripts/base_image >> $GITHUB_ENV

      - name: Build and push ${{ matrix.target }} (arm64)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/terrat/Dockerfile
          push: true
          target: ${{ matrix.target }}
          build-args: |
            BASE_IMAGE=${{ env.BASE_IMAGE }}
          tags: ghcr.io/${{ github.repository_owner }}/${{ matrix.target }}:${{ env.VERSION_TAG }}-arm64

  create-multi-arch-manifest:
    needs: [set-version-tag, build-amd64, build-arm64]
    runs-on: ubuntu-22.04

    outputs:
      is_latest_version_tag: ${{ steps.is-latest-version-tag.outputs.is_latest_version_tag }}

    env:
      VERSION_TAG: ${{ needs.set-version-tag.outputs.version_tag }}
      GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      GITHUB_REF: ${{ github.ref }}
      TERRATEAM_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set is latest version tag
        id: is-latest-version-tag
        run: |
          is_latest_version_tag="$(./scripts/is_latest_version_tag)"
          echo "IS_LATEST_VERSION_TAG=${is_latest_version_tag}" >> "${GITHUB_ENV}"
          echo "is_latest_version_tag=${is_latest_version_tag}" >> "${GITHUB_OUTPUT}"

      - name: Create and push multi-arch manifest
        run: |
          ./scripts/create_manifest code-indexer terrat-ee terrat-oss

  release-notify:
    needs: [set-version-tag, create-multi-arch-manifest]
    runs-on: ubuntu-22.04
    environment: ${{ github.event.inputs.environment || 'production' }}

    env:
      VERSION_TAG: ${{ needs.set-version-tag.outputs.version_tag }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      TERRATEAM_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
      GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      GITHUB_REPOSITORY: ${{ github.repository }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-tags: true

      - name: Create release
        run: |
          ./scripts/create_release

      - name: Notify Slack
        run: |
          ./scripts/notify_slack

  deploy:
    needs: [set-version-tag, release-notify, create-multi-arch-manifest]
    if: ${{ needs.create-multi-arch-manifest.outputs.is_latest_version_tag == 'true' }}
    uses: ./.github/workflows/deploy.yml
    with:
      environment: ${{ github.event.inputs.environment || 'production' }}
      VERSION_TAG: ${{ needs.set-version-tag.outputs.version_tag }}
    secrets: inherit
