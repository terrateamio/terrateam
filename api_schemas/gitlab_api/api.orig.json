{
  "components": {
    "schemas": {
      "API_Entities_AccessRequester": {
        "description": "API_Entities_AccessRequester model",
        "properties": {
          "avatar_path": {
            "example": "/user/avatar/28/The-Big-Lebowski-400-400.png",
            "type": "string"
          },
          "avatar_url": {
            "example": "https://gravatar.com/avatar/1",
            "type": "string"
          },
          "custom_attributes": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_CustomAttribute"
            },
            "type": "array"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "locked": {
            "type": "boolean"
          },
          "name": {
            "example": "Administrator",
            "type": "string"
          },
          "requested_at": {
            "type": "string"
          },
          "state": {
            "example": "active",
            "type": "string"
          },
          "username": {
            "example": "admin",
            "type": "string"
          },
          "web_url": {
            "example": "https://gitlab.example.com/root",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Application": {
        "description": "API_Entities_Application model",
        "properties": {
          "application_id": {
            "example": "5832fc6e14300a0d962240a8144466eef4ee93ef0d218477e55f11cf12fc3737",
            "type": "string"
          },
          "application_name": {
            "example": "MyApplication",
            "type": "string"
          },
          "callback_url": {
            "example": "https://redirect.uri",
            "type": "string"
          },
          "confidential": {
            "example": true,
            "type": "boolean"
          },
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ApplicationWithSecret": {
        "description": "API_Entities_ApplicationWithSecret model",
        "properties": {
          "application_id": {
            "example": "5832fc6e14300a0d962240a8144466eef4ee93ef0d218477e55f11cf12fc3737",
            "type": "string"
          },
          "application_name": {
            "example": "MyApplication",
            "type": "string"
          },
          "callback_url": {
            "example": "https://redirect.uri",
            "type": "string"
          },
          "confidential": {
            "example": true,
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "secret": {
            "example": "ee1dd64b6adc89cf7e2c23099301ccc2c61b441064e9324d963c46902a85ec34",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Approvals": {
        "properties": {
          "user": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          }
        },
        "type": "object"
      },
      "API_Entities_Avatar": {
        "description": "API_Entities_Avatar model",
        "properties": {
          "avatar_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_AwardEmoji": {
        "description": "API_Entities_AwardEmoji model",
        "properties": {
          "awardable_id": {
            "example": 42,
            "format": "int32",
            "type": "integer"
          },
          "awardable_type": {
            "example": "Issue",
            "type": "string"
          },
          "created_at": {
            "example": "2019-01-10T13:39:08Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "lizard",
            "type": "string"
          },
          "updated_at": {
            "example": "2020-06-28T10:52:04Z",
            "format": "date-time",
            "type": "string"
          },
          "url": {
            "example": "https://example.com/emojis/example.gif",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          }
        },
        "type": "object"
      },
      "API_Entities_Badge": {
        "description": "API_Entities_Badge model",
        "properties": {
          "id": {
            "type": "string"
          },
          "image_url": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "link_url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "rendered_image_url": {
            "type": "string"
          },
          "rendered_link_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_BasicBadgeDetails": {
        "description": "API_Entities_BasicBadgeDetails model",
        "properties": {
          "image_url": {
            "type": "string"
          },
          "link_url": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "rendered_image_url": {
            "type": "string"
          },
          "rendered_link_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_BasicGroupDetails": {
        "description": "API_Entities_BasicGroupDetails model",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_BasicProjectDetails": {
        "description": "API_Entities_BasicProjectDetails model",
        "properties": {
          "avatar_url": {
            "example": "http://example.com/uploads/project/avatar/3/uploads/avatar.png",
            "type": "string"
          },
          "created_at": {
            "example": "2020-05-07T04:27:17.016Z",
            "format": "date-time",
            "type": "string"
          },
          "custom_attributes": {
            "$ref": "#/components/schemas/API_Entities_CustomAttribute"
          },
          "default_branch": {
            "example": "main",
            "type": "string"
          },
          "description": {
            "example": "desc",
            "type": "string"
          },
          "forks_count": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "http_url_to_repo": {
            "example": "https://gitlab.example.com/gitlab/gitlab.git",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "last_activity_at": {
            "example": "2013-09-30T13:46:02Z",
            "format": "date-time",
            "type": "string"
          },
          "license": {
            "$ref": "#/components/schemas/API_Entities_LicenseBasic"
          },
          "license_url": {
            "example": "https://gitlab.example.com/gitlab/gitlab/blob/master/LICENCE",
            "type": "string"
          },
          "name": {
            "example": "project1",
            "type": "string"
          },
          "name_with_namespace": {
            "example": "John Doe / project1",
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/API_Entities_NamespaceBasic"
          },
          "path": {
            "example": "project1",
            "type": "string"
          },
          "path_with_namespace": {
            "example": "namespace1/project1",
            "type": "string"
          },
          "readme_url": {
            "example": "https://gitlab.example.com/gitlab/gitlab/blob/master/README.md",
            "type": "string"
          },
          "repository_storage": {
            "example": "default",
            "type": "string"
          },
          "ssh_url_to_repo": {
            "example": "git@gitlab.example.com:gitlab/gitlab.git",
            "type": "string"
          },
          "star_count": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "tag_list": {
            "example": "tag",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "topics": {
            "example": "topic",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "web_url": {
            "example": "https://gitlab.example.com/gitlab/gitlab",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_BasicRef": {
        "description": "API_Entities_BasicRef model",
        "properties": {
          "name": {
            "example": "v1.1.0",
            "type": "string"
          },
          "type": {
            "example": "tag",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_BatchedBackgroundMigration": {
        "description": "API_Entities_BatchedBackgroundMigration model",
        "properties": {
          "column_name": {
            "example": "id",
            "type": "string"
          },
          "created_at": {
            "example": "2022-11-28T16:26:39+02:00",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": "1234",
            "type": "string"
          },
          "job_class_name": {
            "example": "CopyColumnUsingBackgroundMigrationJob",
            "type": "string"
          },
          "progress": {
            "example": 50,
            "format": "float",
            "type": "number"
          },
          "status": {
            "example": "active",
            "type": "string"
          },
          "table_name": {
            "example": "events",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Branch": {
        "additionalProperties": false,
        "description": "API_Entities_Branch model",
        "properties": {
          "can_push": {
            "example": true,
            "type": "boolean"
          },
          "commit": {
            "$ref": "#/components/schemas/API_Entities_Commit"
          },
          "default": {
            "example": true,
            "type": "boolean"
          },
          "developers_can_merge": {
            "example": true,
            "type": "boolean"
          },
          "developers_can_push": {
            "example": true,
            "type": "boolean"
          },
          "merged": {
            "example": true,
            "type": "boolean"
          },
          "name": {
            "example": "master",
            "type": "string"
          },
          "protected": {
            "example": true,
            "type": "boolean"
          },
          "web_url": {
            "example": "https://gitlab.example.com/Commit921/the-dude/-/tree/master",
            "type": "string"
          }
        },
        "required": [
          "commit",
          "default",
          "merged",
          "name"
        ],
        "type": "object"
      },
      "API_Entities_BulkImports_ExportBatchStatus": {
        "properties": {
          "batch_number": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "error": {
            "example": "Error message",
            "type": "string"
          },
          "objects_count": {
            "example": 100,
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "enum": [
              "started",
              "finished",
              "failed"
            ],
            "example": "started",
            "type": "string"
          },
          "updated_at": {
            "example": "2012-05-28T04:42:42-07:00",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_BulkImports_ExportStatus": {
        "description": "API_Entities_BulkImports_ExportStatus model",
        "properties": {
          "batched": {
            "example": true,
            "type": "boolean"
          },
          "batches": {
            "$ref": "#/components/schemas/API_Entities_BulkImports_ExportBatchStatus"
          },
          "batches_count": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "error": {
            "example": "Error message",
            "type": "string"
          },
          "relation": {
            "example": "issues",
            "type": "string"
          },
          "status": {
            "enum": [
              "started",
              "finished",
              "failed"
            ],
            "example": "started",
            "type": "string"
          },
          "total_objects_count": {
            "example": 100,
            "format": "int32",
            "type": "integer"
          },
          "updated_at": {
            "example": "2012-05-28T04:42:42-07:00",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Changelog": {
        "description": "API_Entities_Changelog model",
        "properties": {
          "notes": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_Bridge": {
        "description": "API_Entities_Ci_Bridge model",
        "properties": {
          "allow_failure": {
            "type": "boolean"
          },
          "commit": {
            "$ref": "#/components/schemas/API_Entities_Commit"
          },
          "coverage": {
            "example": 98.29,
            "format": "float",
            "type": "number"
          },
          "created_at": {
            "example": "2015-12-24T15:51:21.880Z",
            "format": "date-time",
            "type": "string"
          },
          "downstream_pipeline": {
            "$ref": "#/components/schemas/API_Entities_Ci_PipelineBasic"
          },
          "duration": {
            "description": "Time spent running",
            "example": 0.465,
            "format": "float",
            "type": "number"
          },
          "erased_at": {
            "example": "2015-12-24T18:00:29.728Z",
            "format": "date-time",
            "type": "string"
          },
          "failure_reason": {
            "example": "script_failure",
            "type": "string"
          },
          "finished_at": {
            "example": "2015-12-24T17:54:31.198Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "deploy_to_production",
            "type": "string"
          },
          "pipeline": {
            "$ref": "#/components/schemas/API_Entities_Ci_PipelineBasic"
          },
          "project": {
            "properties": {
              "ci_job_token_scope_enabled": {
                "example": false,
                "type": "string"
              }
            },
            "type": "object"
          },
          "queued_duration": {
            "description": "Time spent enqueued",
            "example": 0.123,
            "format": "float",
            "type": "number"
          },
          "ref": {
            "example": "main",
            "type": "string"
          },
          "stage": {
            "example": "deploy",
            "type": "string"
          },
          "started_at": {
            "example": "2015-12-24T17:54:30.733Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "example": "waiting_for_resource",
            "type": "string"
          },
          "tag": {
            "type": "boolean"
          },
          "user": {
            "$ref": "#/components/schemas/API_Entities_User"
          },
          "web_url": {
            "example": "https://example.com/foo/bar/-/jobs/1",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_Catalog_Resources_Version": {
        "description": "API_Entities_Ci_Catalog_Resources_Version model",
        "properties": {
          "catalog_url": {
            "example": "https://gitlab.example.com/explore/catalog/my-namespace/my-component-project",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_Job": {
        "description": "API_Entities_Ci_Job model",
        "properties": {
          "allow_failure": {
            "type": "boolean"
          },
          "archived": {
            "example": false,
            "type": "boolean"
          },
          "artifacts": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_Ci_JobArtifact"
            },
            "type": "array"
          },
          "artifacts_expire_at": {
            "example": "2016-01-19T09:05:50.355Z",
            "format": "date-time",
            "type": "string"
          },
          "artifacts_file": {
            "$ref": "#/components/schemas/API_Entities_Ci_JobArtifactFile"
          },
          "commit": {
            "$ref": "#/components/schemas/API_Entities_Commit"
          },
          "coverage": {
            "example": 98.29,
            "format": "float",
            "type": "number"
          },
          "created_at": {
            "example": "2015-12-24T15:51:21.880Z",
            "format": "date-time",
            "type": "string"
          },
          "duration": {
            "description": "Time spent running",
            "example": 0.465,
            "format": "float",
            "type": "number"
          },
          "erased_at": {
            "example": "2015-12-24T18:00:29.728Z",
            "format": "date-time",
            "type": "string"
          },
          "failure_reason": {
            "example": "script_failure",
            "type": "string"
          },
          "finished_at": {
            "example": "2015-12-24T17:54:31.198Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "deploy_to_production",
            "type": "string"
          },
          "pipeline": {
            "$ref": "#/components/schemas/API_Entities_Ci_PipelineBasic"
          },
          "project": {
            "properties": {
              "ci_job_token_scope_enabled": {
                "example": false,
                "type": "string"
              }
            },
            "type": "object"
          },
          "queued_duration": {
            "description": "Time spent enqueued",
            "example": 0.123,
            "format": "float",
            "type": "number"
          },
          "ref": {
            "example": "main",
            "type": "string"
          },
          "runner": {
            "$ref": "#/components/schemas/API_Entities_Ci_Runner"
          },
          "runner_manager": {
            "$ref": "#/components/schemas/API_Entities_Ci_RunnerManager"
          },
          "stage": {
            "example": "deploy",
            "type": "string"
          },
          "started_at": {
            "example": "2015-12-24T17:54:30.733Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "example": "waiting_for_resource",
            "type": "string"
          },
          "tag": {
            "type": "boolean"
          },
          "tag_list": {
            "example": [
              "ubuntu18",
              "docker runner"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "user": {
            "$ref": "#/components/schemas/API_Entities_User"
          },
          "web_url": {
            "example": "https://example.com/foo/bar/-/jobs/1",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_JobArtifact": {
        "properties": {
          "file_format": {
            "enum": [
              "raw",
              "zip",
              "gzip"
            ],
            "example": "zip",
            "type": "string"
          },
          "file_type": {
            "enum": [
              "archive",
              "metadata",
              "trace",
              "junit",
              "sast",
              "dependency_scanning",
              "container_scanning",
              "dast",
              "codequality",
              "license_scanning",
              "performance",
              "metrics",
              "metrics_referee",
              "network_referee",
              "lsif",
              "dotenv",
              "cobertura",
              "terraform",
              "accessibility",
              "cluster_applications",
              "secret_detection",
              "requirements",
              "coverage_fuzzing",
              "browser_performance",
              "load_performance",
              "api_fuzzing",
              "cluster_image_scanning",
              "cyclonedx",
              "requirements_v2",
              "annotations",
              "repository_xray",
              "jacoco"
            ],
            "example": "archive",
            "type": "string"
          },
          "filename": {
            "example": "artifacts.zip",
            "type": "string"
          },
          "size": {
            "example": 1000,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_JobArtifactFile": {
        "properties": {
          "filename": {
            "example": "artifacts.zip",
            "type": "string"
          },
          "size": {
            "example": 1000,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_JobBasic": {
        "description": "API_Entities_Ci_JobBasic model",
        "properties": {
          "allow_failure": {
            "type": "boolean"
          },
          "commit": {
            "$ref": "#/components/schemas/API_Entities_Commit"
          },
          "coverage": {
            "example": 98.29,
            "format": "float",
            "type": "number"
          },
          "created_at": {
            "example": "2015-12-24T15:51:21.880Z",
            "format": "date-time",
            "type": "string"
          },
          "duration": {
            "description": "Time spent running",
            "example": 0.465,
            "format": "float",
            "type": "number"
          },
          "erased_at": {
            "example": "2015-12-24T18:00:29.728Z",
            "format": "date-time",
            "type": "string"
          },
          "failure_reason": {
            "example": "script_failure",
            "type": "string"
          },
          "finished_at": {
            "example": "2015-12-24T17:54:31.198Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "deploy_to_production",
            "type": "string"
          },
          "pipeline": {
            "$ref": "#/components/schemas/API_Entities_Ci_PipelineBasic"
          },
          "project": {
            "properties": {
              "ci_job_token_scope_enabled": {
                "example": false,
                "type": "string"
              }
            },
            "type": "object"
          },
          "queued_duration": {
            "description": "Time spent enqueued",
            "example": 0.123,
            "format": "float",
            "type": "number"
          },
          "ref": {
            "example": "main",
            "type": "string"
          },
          "stage": {
            "example": "deploy",
            "type": "string"
          },
          "started_at": {
            "example": "2015-12-24T17:54:30.733Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "example": "waiting_for_resource",
            "type": "string"
          },
          "tag": {
            "type": "boolean"
          },
          "user": {
            "$ref": "#/components/schemas/API_Entities_User"
          },
          "web_url": {
            "example": "https://example.com/foo/bar/-/jobs/1",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_JobBasicWithProject": {
        "description": "API_Entities_Ci_JobBasicWithProject model",
        "properties": {
          "allow_failure": {
            "type": "boolean"
          },
          "commit": {
            "$ref": "#/components/schemas/API_Entities_Commit"
          },
          "coverage": {
            "example": 98.29,
            "format": "float",
            "type": "number"
          },
          "created_at": {
            "example": "2015-12-24T15:51:21.880Z",
            "format": "date-time",
            "type": "string"
          },
          "duration": {
            "description": "Time spent running",
            "example": 0.465,
            "format": "float",
            "type": "number"
          },
          "erased_at": {
            "example": "2015-12-24T18:00:29.728Z",
            "format": "date-time",
            "type": "string"
          },
          "failure_reason": {
            "example": "script_failure",
            "type": "string"
          },
          "finished_at": {
            "example": "2015-12-24T17:54:31.198Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "deploy_to_production",
            "type": "string"
          },
          "pipeline": {
            "$ref": "#/components/schemas/API_Entities_Ci_PipelineBasic"
          },
          "project": {
            "$ref": "#/components/schemas/API_Entities_ProjectIdentity"
          },
          "queued_duration": {
            "description": "Time spent enqueued",
            "example": 0.123,
            "format": "float",
            "type": "number"
          },
          "ref": {
            "example": "main",
            "type": "string"
          },
          "stage": {
            "example": "deploy",
            "type": "string"
          },
          "started_at": {
            "example": "2015-12-24T17:54:30.733Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "example": "waiting_for_resource",
            "type": "string"
          },
          "tag": {
            "type": "boolean"
          },
          "user": {
            "$ref": "#/components/schemas/API_Entities_User"
          },
          "web_url": {
            "example": "https://example.com/foo/bar/-/jobs/1",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_Lint_Result": {
        "description": "API_Entities_Ci_Lint_Result model",
        "properties": {
          "errors": {
            "example": "variables config should be a hash of key value pairs",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "includes": {
            "example": "{ \"blob\": \"https://gitlab.com/root/example-project/-/blob/...",
            "items": {
              "$ref": "#/components/schemas/API_Entities_Ci_Lint_Result_Include"
            },
            "type": "array"
          },
          "jobs": {
            "example": "{ \"name\": \"test: .... }",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "merged_yaml": {
            "example": "---\\n:another_test:\\n  :stage: test\\n\n          :script: echo 2\\n:test:\\n  :stage: test\\n  :script: echo 1\\n",
            "type": "string"
          },
          "valid": {
            "type": "boolean"
          },
          "warnings": {
            "example": "jobs:job may allow multiple pipelines ...",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_Lint_Result_Include": {
        "properties": {
          "blob": {
            "example": "https://gitlab.com/gitlab-org/gitlab/-/blob/e52d6d0246d7375291850e61f0abc101fbda9dc2/.gitlab/ci/build-images.gitlab-ci.yml",
            "type": "string"
          },
          "context_project": {
            "example": "gitlab-org/gitlab",
            "type": "string"
          },
          "context_sha": {
            "example": "e52d6d0246d7375291850e61f0abc101fbda9dc2",
            "type": "string"
          },
          "extra": {
            "example": "{ \"job_name\": \"test\", \"project\": \"gitlab-org/gitlab\", \"ref\": \"master\" }",
            "type": "object"
          },
          "location": {
            "example": ".gitlab/ci/build-images.gitlab-ci.yml",
            "type": "string"
          },
          "raw": {
            "example": "https://gitlab.com/gitlab-org/gitlab/-/raw/e52d6d0246d7375291850e61f0abc101fbda9dc2/.gitlab/ci/build-images.gitlab-ci.yml",
            "type": "string"
          },
          "type": {
            "example": "local",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_Pipeline": {
        "additionalProperties": false,
        "description": "API_Entities_Ci_Pipeline model",
        "properties": {
          "before_sha": {
            "example": "a91957a858320c0e17f3a0eca7cfacbff50ea29a",
            "type": "string"
          },
          "committed_at": {
            "example": "2015-12-24T15:51:21.880Z",
            "format": "date-time",
            "type": "string"
          },
          "coverage": {
            "example": 98.29,
            "format": "float",
            "type": "number"
          },
          "created_at": {
            "example": "2015-12-24T15:51:21.880Z",
            "format": "date-time",
            "type": "string"
          },
          "detailed_status": {
            "$ref": "#/components/schemas/DetailedStatusEntity"
          },
          "duration": {
            "description": "Time spent running in seconds",
            "example": 127,
            "format": "int32",
            "type": "integer"
          },
          "finished_at": {
            "example": "2015-12-24T17:54:31.198Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "iid": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "project_id": {
            "example": 3,
            "format": "int32",
            "type": "integer"
          },
          "queued_duration": {
            "description": "Time spent enqueued in seconds",
            "example": 63,
            "format": "int32",
            "type": "integer"
          },
          "ref": {
            "example": "feature-branch",
            "type": "string"
          },
          "sha": {
            "example": "0ec9e58fdfca6cdd6652c083c9edb53abc0bad52",
            "type": "string"
          },
          "source": {
            "example": "push",
            "type": "string"
          },
          "started_at": {
            "example": "2015-12-24T17:54:30.733Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "example": "success",
            "type": "string"
          },
          "tag": {
            "example": false,
            "type": "boolean"
          },
          "updated_at": {
            "example": "2015-12-24T17:54:31.198Z",
            "format": "date-time",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "web_url": {
            "example": "https://gitlab.example.com/gitlab-org/gitlab-foss/-/pipelines/61",
            "type": "string"
          },
          "yaml_errors": {
            "example": "widgets:build: needs 'widgets:test'",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_PipelineBasic": {
        "description": "API_Entities_Ci_PipelineBasic model",
        "properties": {
          "created_at": {
            "example": "2022-10-21T16:49:48.000+02:00",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "iid": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "project_id": {
            "example": 3,
            "format": "int32",
            "type": "integer"
          },
          "ref": {
            "example": "feature-branch",
            "type": "string"
          },
          "sha": {
            "example": "0ec9e58fdfca6cdd6652c083c9edb53abc0bad52",
            "type": "string"
          },
          "source": {
            "example": "push",
            "type": "string"
          },
          "status": {
            "example": "success",
            "type": "string"
          },
          "updated_at": {
            "example": "2022-10-21T16:49:48.000+02:00",
            "format": "date-time",
            "type": "string"
          },
          "web_url": {
            "example": "https://gitlab.example.com/gitlab-org/gitlab-foss/-/pipelines/61",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_PipelineSchedule": {
        "description": "API_Entities_Ci_PipelineSchedule model",
        "properties": {
          "active": {
            "example": true,
            "type": "boolean"
          },
          "created_at": {
            "example": "2017-05-19T13:31:08.849Z",
            "format": "date-time",
            "type": "string"
          },
          "cron": {
            "example": "* * * * *",
            "type": "string"
          },
          "cron_timezone": {
            "example": "Asia/Tokyo",
            "type": "string"
          },
          "description": {
            "example": "Test schedule pipeline",
            "type": "string"
          },
          "id": {
            "example": 13,
            "format": "int32",
            "type": "integer"
          },
          "next_run_at": {
            "example": "2017-05-19T13:41:00.000Z",
            "format": "date-time",
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "ref": {
            "example": "develop",
            "type": "string"
          },
          "updated_at": {
            "example": "2017-05-19T13:40:17.727Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_PipelineScheduleDetails": {
        "description": "API_Entities_Ci_PipelineScheduleDetails model",
        "properties": {
          "active": {
            "example": true,
            "type": "boolean"
          },
          "created_at": {
            "example": "2017-05-19T13:31:08.849Z",
            "format": "date-time",
            "type": "string"
          },
          "cron": {
            "example": "* * * * *",
            "type": "string"
          },
          "cron_timezone": {
            "example": "Asia/Tokyo",
            "type": "string"
          },
          "description": {
            "example": "Test schedule pipeline",
            "type": "string"
          },
          "id": {
            "example": 13,
            "format": "int32",
            "type": "integer"
          },
          "last_pipeline": {
            "$ref": "#/components/schemas/API_Entities_Ci_PipelineBasic"
          },
          "next_run_at": {
            "example": "2017-05-19T13:41:00.000Z",
            "format": "date-time",
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "ref": {
            "example": "develop",
            "type": "string"
          },
          "updated_at": {
            "example": "2017-05-19T13:40:17.727Z",
            "format": "date-time",
            "type": "string"
          },
          "variables": {
            "$ref": "#/components/schemas/API_Entities_Ci_Variable"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_PipelineWithMetadata": {
        "description": "API_Entities_Ci_PipelineWithMetadata model",
        "properties": {
          "before_sha": {
            "example": "a91957a858320c0e17f3a0eca7cfacbff50ea29a",
            "type": "string"
          },
          "committed_at": {
            "example": "2015-12-24T15:51:21.880Z",
            "format": "date-time",
            "type": "string"
          },
          "coverage": {
            "example": 98.29,
            "format": "float",
            "type": "number"
          },
          "created_at": {
            "example": "2015-12-24T15:51:21.880Z",
            "format": "date-time",
            "type": "string"
          },
          "detailed_status": {
            "$ref": "#/components/schemas/DetailedStatusEntity"
          },
          "duration": {
            "description": "Time spent running in seconds",
            "example": 127,
            "format": "int32",
            "type": "integer"
          },
          "finished_at": {
            "example": "2015-12-24T17:54:31.198Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "iid": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "Build pipeline",
            "type": "string"
          },
          "project_id": {
            "example": 3,
            "format": "int32",
            "type": "integer"
          },
          "queued_duration": {
            "description": "Time spent enqueued in seconds",
            "example": 63,
            "format": "int32",
            "type": "integer"
          },
          "ref": {
            "example": "feature-branch",
            "type": "string"
          },
          "sha": {
            "example": "0ec9e58fdfca6cdd6652c083c9edb53abc0bad52",
            "type": "string"
          },
          "source": {
            "example": "push",
            "type": "string"
          },
          "started_at": {
            "example": "2015-12-24T17:54:30.733Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "example": "success",
            "type": "string"
          },
          "tag": {
            "example": false,
            "type": "boolean"
          },
          "updated_at": {
            "example": "2015-12-24T17:54:31.198Z",
            "format": "date-time",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "web_url": {
            "example": "https://gitlab.example.com/gitlab-org/gitlab-foss/-/pipelines/61",
            "type": "string"
          },
          "yaml_errors": {
            "example": "widgets:build: needs 'widgets:test'",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_ResetTokenResult": {
        "description": "API_Entities_Ci_ResetTokenResult model",
        "properties": {
          "token": {
            "type": "string"
          },
          "token_expires_at": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_ResourceGroup": {
        "description": "API_Entities_Ci_ResourceGroup model",
        "properties": {
          "created_at": {
            "example": "2021-09-01T08:04:59.650Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "key": {
            "example": "production",
            "type": "string"
          },
          "process_mode": {
            "example": "unordered",
            "type": "string"
          },
          "updated_at": {
            "example": "2021-09-01T08:04:59.650Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_Runner": {
        "description": "API_Entities_Ci_Runner model",
        "properties": {
          "active": {
            "example": true,
            "type": "boolean"
          },
          "description": {
            "example": "test-1-20150125",
            "type": "string"
          },
          "id": {
            "example": 8,
            "format": "int32",
            "type": "integer"
          },
          "ip_address": {
            "example": "127.0.0.1",
            "type": "string"
          },
          "is_shared": {
            "example": true,
            "type": "boolean"
          },
          "name": {
            "example": "test",
            "type": "string"
          },
          "online": {
            "example": true,
            "type": "boolean"
          },
          "paused": {
            "example": false,
            "type": "boolean"
          },
          "runner_type": {
            "enum": [
              "instance_type",
              "group_type",
              "project_type"
            ],
            "example": "instance_type",
            "type": "string"
          },
          "status": {
            "example": "online",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_RunnerDetails": {
        "description": "API_Entities_Ci_RunnerDetails model",
        "properties": {
          "access_level": {
            "type": "string"
          },
          "active": {
            "example": true,
            "type": "boolean"
          },
          "architecture": {
            "type": "string"
          },
          "contacted_at": {
            "type": "string"
          },
          "description": {
            "example": "test-1-20150125",
            "type": "string"
          },
          "groups": {
            "$ref": "#/components/schemas/API_Entities_BasicGroupDetails"
          },
          "id": {
            "example": 8,
            "format": "int32",
            "type": "integer"
          },
          "ip_address": {
            "example": "127.0.0.1",
            "type": "string"
          },
          "is_shared": {
            "example": true,
            "type": "boolean"
          },
          "locked": {
            "type": "string"
          },
          "maintenance_note": {
            "type": "string"
          },
          "maximum_timeout": {
            "type": "string"
          },
          "name": {
            "example": "test",
            "type": "string"
          },
          "online": {
            "example": true,
            "type": "boolean"
          },
          "paused": {
            "example": false,
            "type": "boolean"
          },
          "platform": {
            "type": "string"
          },
          "projects": {
            "$ref": "#/components/schemas/API_Entities_BasicProjectDetails"
          },
          "revision": {
            "type": "string"
          },
          "run_untagged": {
            "type": "string"
          },
          "runner_type": {
            "enum": [
              "instance_type",
              "group_type",
              "project_type"
            ],
            "example": "instance_type",
            "type": "string"
          },
          "status": {
            "example": "online",
            "type": "string"
          },
          "tag_list": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_RunnerManager": {
        "description": "API_Entities_Ci_RunnerManager model",
        "properties": {
          "architecture": {
            "example": "amd64",
            "type": "string"
          },
          "contacted_at": {
            "example": "2023-10-24T01:27:06.549Z",
            "type": "string"
          },
          "created_at": {
            "example": "2023-10-24T01:27:06.549Z",
            "type": "string"
          },
          "id": {
            "example": 8,
            "format": "int32",
            "type": "integer"
          },
          "ip_address": {
            "example": "127.0.0.1",
            "type": "string"
          },
          "platform": {
            "example": "linux",
            "type": "string"
          },
          "revision": {
            "example": "91a27b2a",
            "type": "string"
          },
          "status": {
            "example": "online",
            "type": "string"
          },
          "system_id": {
            "example": "runner-1",
            "type": "string"
          },
          "version": {
            "example": "16.11.0",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_RunnerRegistrationDetails": {
        "description": "API_Entities_Ci_RunnerRegistrationDetails model",
        "properties": {
          "id": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "token_expires_at": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_SecureFile": {
        "description": "API_Entities_Ci_SecureFile model",
        "properties": {
          "checksum": {
            "example": "16630b189ab34b2e3504f4758e1054d2e478deda510b2b08cc0ef38d12e80aac",
            "type": "string"
          },
          "checksum_algorithm": {
            "example": "sha256",
            "type": "string"
          },
          "created_at": {
            "example": "2022-02-22T22:22:22.222Z",
            "format": "date-time",
            "type": "string"
          },
          "expires_at": {
            "example": "2023-09-21T14:55:59.000Z",
            "format": "date-time",
            "type": "string"
          },
          "file_extension": {
            "example": "jks",
            "type": "string"
          },
          "id": {
            "example": 123,
            "format": "int32",
            "type": "integer"
          },
          "metadata": {
            "example": {
              "id": "75949910542696343243264405377658443914"
            },
            "type": "object"
          },
          "name": {
            "example": "upload-keystore.jks",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Ci_Variable": {
        "description": "API_Entities_Ci_Variable model",
        "properties": {
          "description": {
            "example": "This variable is being used for ...",
            "type": "string"
          },
          "environment_scope": {
            "example": "*",
            "type": "string"
          },
          "hidden": {
            "type": "boolean"
          },
          "key": {
            "example": "TEST_VARIABLE_1",
            "type": "string"
          },
          "masked": {
            "type": "boolean"
          },
          "protected": {
            "type": "boolean"
          },
          "raw": {
            "type": "boolean"
          },
          "value": {
            "example": "TEST_1",
            "type": "string"
          },
          "variable_type": {
            "example": "env_var",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Cluster": {
        "description": "API_Entities_Cluster model",
        "properties": {
          "cluster_type": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "enabled": {
            "type": "string"
          },
          "environment_scope": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "managed": {
            "type": "string"
          },
          "management_project": {
            "$ref": "#/components/schemas/API_Entities_ProjectIdentity"
          },
          "name": {
            "type": "string"
          },
          "namespace_per_environment": {
            "type": "string"
          },
          "platform_kubernetes": {
            "$ref": "#/components/schemas/API_Entities_Platform_Kubernetes"
          },
          "platform_type": {
            "type": "string"
          },
          "provider_gcp": {
            "$ref": "#/components/schemas/API_Entities_Provider_Gcp"
          },
          "provider_type": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          }
        },
        "type": "object"
      },
      "API_Entities_ClusterGroup": {
        "description": "API_Entities_ClusterGroup model",
        "properties": {
          "cluster_type": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "enabled": {
            "type": "string"
          },
          "environment_scope": {
            "type": "string"
          },
          "group": {
            "$ref": "#/components/schemas/API_Entities_BasicGroupDetails"
          },
          "id": {
            "type": "string"
          },
          "managed": {
            "type": "string"
          },
          "management_project": {
            "$ref": "#/components/schemas/API_Entities_ProjectIdentity"
          },
          "name": {
            "type": "string"
          },
          "namespace_per_environment": {
            "type": "string"
          },
          "platform_kubernetes": {
            "$ref": "#/components/schemas/API_Entities_Platform_Kubernetes"
          },
          "platform_type": {
            "type": "string"
          },
          "provider_gcp": {
            "$ref": "#/components/schemas/API_Entities_Provider_Gcp"
          },
          "provider_type": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          }
        },
        "type": "object"
      },
      "API_Entities_ClusterProject": {
        "description": "API_Entities_ClusterProject model",
        "properties": {
          "cluster_type": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "enabled": {
            "type": "string"
          },
          "environment_scope": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "managed": {
            "type": "string"
          },
          "management_project": {
            "$ref": "#/components/schemas/API_Entities_ProjectIdentity"
          },
          "name": {
            "type": "string"
          },
          "namespace_per_environment": {
            "type": "string"
          },
          "platform_kubernetes": {
            "$ref": "#/components/schemas/API_Entities_Platform_Kubernetes"
          },
          "platform_type": {
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/API_Entities_BasicProjectDetails"
          },
          "provider_gcp": {
            "$ref": "#/components/schemas/API_Entities_Provider_Gcp"
          },
          "provider_type": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          }
        },
        "type": "object"
      },
      "API_Entities_Clusters_Agent": {
        "description": "API_Entities_Clusters_Agent model",
        "properties": {
          "config_project": {
            "$ref": "#/components/schemas/API_Entities_ProjectIdentity"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_user_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_receptive": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Clusters_AgentToken": {
        "description": "API_Entities_Clusters_AgentToken model",
        "properties": {
          "agent_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_user_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_used_at": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Clusters_AgentTokenBasic": {
        "description": "API_Entities_Clusters_AgentTokenBasic model",
        "properties": {
          "agent_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_user_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Clusters_AgentTokenWithToken": {
        "description": "API_Entities_Clusters_AgentTokenWithToken model",
        "properties": {
          "agent_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_user_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_used_at": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Commit": {
        "additionalProperties": false,
        "description": "API_Entities_Commit model",
        "properties": {
          "author_email": {
            "example": "john@example.com",
            "type": "string"
          },
          "author_name": {
            "example": "John Smith",
            "type": "string"
          },
          "authored_date": {
            "example": "2012-05-28T04:42:42-07:00",
            "format": "date-time",
            "type": "string"
          },
          "committed_date": {
            "example": "2012-05-28T04:42:42-07:00",
            "format": "date-time",
            "type": "string"
          },
          "committer_email": {
            "example": "jack@example.com",
            "type": "string"
          },
          "committer_name": {
            "example": "Jack Smith",
            "type": "string"
          },
          "created_at": {
            "example": "2017-07-26T11:08:53.000+02:00",
            "format": "date-time",
            "type": "string"
          },
          "extended_trailers": {
            "example": "{ \"Signed-off-by\": [\"John Doe <johndoe@gitlab.com>\", \"Jane Doe <janedoe@gitlab.com>\"] }",
            "type": "object"
          },
          "id": {
            "example": "2695effb5807a22ff3d138d593fd856244e155e7",
            "type": "string"
          },
          "message": {
            "example": "Initial commit",
            "type": "string"
          },
          "parent_ids": {
            "example": "2a4b78934375d7f53875269ffd4f45fd83a84ebe",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "short_id": {
            "example": "2695effb",
            "type": "string"
          },
          "title": {
            "example": "Initial commit",
            "type": "string"
          },
          "trailers": {
            "example": "{ \"Merged-By\": \"Jane Doe janedoe@gitlab.com\" }",
            "type": "object"
          },
          "web_url": {
            "example": "https://gitlab.example.com/janedoe/gitlab-foss/-/commit/ed899a2f4b50b4370feeea94676502b42383c746",
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "id"
        ],
        "type": "object"
      },
      "API_Entities_CommitDetail": {
        "description": "API_Entities_CommitDetail model",
        "properties": {
          "author_email": {
            "example": "john@example.com",
            "type": "string"
          },
          "author_name": {
            "example": "John Smith",
            "type": "string"
          },
          "authored_date": {
            "example": "2012-05-28T04:42:42-07:00",
            "format": "date-time",
            "type": "string"
          },
          "committed_date": {
            "example": "2012-05-28T04:42:42-07:00",
            "format": "date-time",
            "type": "string"
          },
          "committer_email": {
            "example": "jack@example.com",
            "type": "string"
          },
          "committer_name": {
            "example": "Jack Smith",
            "type": "string"
          },
          "created_at": {
            "example": "2017-07-26T11:08:53.000+02:00",
            "format": "date-time",
            "type": "string"
          },
          "extended_trailers": {
            "example": "{ \"Signed-off-by\": [\"John Doe <johndoe@gitlab.com>\", \"Jane Doe <janedoe@gitlab.com>\"] }",
            "type": "object"
          },
          "id": {
            "example": "2695effb5807a22ff3d138d593fd856244e155e7",
            "type": "string"
          },
          "last_pipeline": {
            "$ref": "#/components/schemas/API_Entities_Ci_PipelineBasic"
          },
          "message": {
            "example": "Initial commit",
            "type": "string"
          },
          "parent_ids": {
            "example": "2a4b78934375d7f53875269ffd4f45fd83a84ebe",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "project_id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "short_id": {
            "example": "2695effb",
            "type": "string"
          },
          "stats": {
            "$ref": "#/components/schemas/API_Entities_CommitStats"
          },
          "status": {
            "example": "success",
            "type": "string"
          },
          "title": {
            "example": "Initial commit",
            "type": "string"
          },
          "trailers": {
            "example": "{ \"Merged-By\": \"Jane Doe janedoe@gitlab.com\" }",
            "type": "object"
          },
          "web_url": {
            "example": "https://gitlab.example.com/janedoe/gitlab-foss/-/commit/ed899a2f4b50b4370feeea94676502b42383c746",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_CommitNote": {
        "description": "API_Entities_CommitNote model",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "created_at": {
            "example": "2016-01-19T09:44:55.600Z",
            "format": "date-time",
            "type": "string"
          },
          "line": {
            "example": 11,
            "format": "int32",
            "type": "integer"
          },
          "line_type": {
            "example": "new",
            "type": "string"
          },
          "note": {
            "example": "this doc is really nice",
            "type": "string"
          },
          "path": {
            "example": "README.md",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_CommitSequence": {
        "description": "API_Entities_CommitSequence model",
        "properties": {
          "count": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_CommitSignature": {
        "description": "API_Entities_CommitSignature model",
        "properties": {
          "commit_source": {
            "example": "gitaly",
            "type": "string"
          },
          "signature": {
            "type": "string"
          },
          "signature_type": {
            "example": "PGP",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_CommitStats": {
        "properties": {
          "additions": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "deletions": {
            "example": 0,
            "format": "int32",
            "type": "integer"
          },
          "total": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_CommitStatus": {
        "additionalProperties": false,
        "description": "API_Entities_CommitStatus model",
        "properties": {
          "allow_failure": {
            "example": false,
            "type": "boolean"
          },
          "author": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "coverage": {
            "example": 98.29,
            "format": "float",
            "type": "number"
          },
          "created_at": {
            "example": "2016-01-19T09:05:50.355Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "finished_at": {
            "example": "2016-01-21T08:40:25.832Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 93,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "default",
            "type": "string"
          },
          "pipeline_id": {
            "example": 101,
            "format": "int32",
            "type": "integer"
          },
          "ref": {
            "example": "develop",
            "type": "string"
          },
          "sha": {
            "example": "18f3e63d05582537db6d183d9d557be09e1f90c8",
            "type": "string"
          },
          "started_at": {
            "example": "2016-01-20T08:40:25.832Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "example": "success",
            "type": "string"
          },
          "target_url": {
            "example": "https://gitlab.example.com/janedoe/gitlab-foss/builds/91",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "status"
        ],
        "type": "object"
      },
      "API_Entities_Compare": {
        "description": "API_Entities_Compare model",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/API_Entities_Commit"
          },
          "commits": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_Commit"
            },
            "type": "array"
          },
          "compare_same_ref": {
            "type": "boolean"
          },
          "compare_timeout": {
            "type": "boolean"
          },
          "diffs": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_Diff"
            },
            "type": "array"
          },
          "web_url": {
            "example": "https://gitlab.example.com/gitlab/gitlab-foss/-/compare/main...feature",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ConanPackage_ConanPackageManifest": {
        "description": "API_Entities_ConanPackage_ConanPackageManifest model",
        "properties": {
          "package_urls": {
            "example": "{ \"conan_package.tgz\": \"https://gitlab.example.com/api/v4/packages/conan/v1/files/my-package/1.0/my-group+my-project/stable/packages/103f6067a947f366ef91fc1b7da351c588d1827f/0/conan_package.tgz\"",
            "type": "object"
          }
        },
        "type": "object"
      },
      "API_Entities_ConanPackage_ConanPackageSnapshot": {
        "description": "API_Entities_ConanPackage_ConanPackageSnapshot model",
        "properties": {
          "package_snapshot": {
            "example": "{ \"conan_package.tgz\": \"749b29bdf72587081ca03ec033ee59dc\" }",
            "type": "object"
          }
        },
        "type": "object"
      },
      "API_Entities_ConanPackage_ConanRecipeManifest": {
        "description": "API_Entities_ConanPackage_ConanRecipeManifest model",
        "properties": {
          "recipe_urls": {
            "example": "{ \"conan_sources.tgz\": \"https://gitlab.example.com/api/v4/packages/conan/v1/files/my-package/1.0/my-group+my-project/stable/0/export/conan_sources.tgz\" }",
            "type": "object"
          }
        },
        "type": "object"
      },
      "API_Entities_ConanPackage_ConanRecipeSnapshot": {
        "description": "API_Entities_ConanPackage_ConanRecipeSnapshot model",
        "properties": {
          "recipe_snapshot": {
            "example": "{ \"conan_sources.tgz\": \"eadf19b33f4c3c7e113faabf26e76277\" }",
            "type": "object"
          }
        },
        "type": "object"
      },
      "API_Entities_ConanPackage_ConanUploadUrls": {
        "description": "API_Entities_ConanPackage_ConanUploadUrls model",
        "properties": {
          "upload_urls": {
            "example": "{ \"conan_package.tgz\": \"https://gitlab.example.com/api/v4/packages/conan/v1/files/my-package/1.0/my-group+my-project/stable/0/package/103f6067a947f366ef91fc1b7da351c588d1827f/0/conan_package.tgz\" }",
            "type": "object"
          }
        },
        "type": "object"
      },
      "API_Entities_ContainerExpirationPolicy": {
        "properties": {
          "cadence": {
            "type": "string"
          },
          "enabled": {
            "type": "string"
          },
          "keep_n": {
            "type": "string"
          },
          "name_regex": {
            "type": "string"
          },
          "name_regex_keep": {
            "type": "string"
          },
          "next_run_at": {
            "type": "string"
          },
          "older_than": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ContainerRegistry_Repository": {
        "description": "API_Entities_ContainerRegistry_Repository model",
        "properties": {
          "cleanup_policy_started_at": {
            "example": "2020-08-17T03:12:35.489Z",
            "format": "date-time",
            "type": "string"
          },
          "created_at": {
            "example": "2019-01-10T13:39:08.229Z",
            "format": "date-time",
            "type": "string"
          },
          "delete_api_path": {
            "example": "delete/api/path",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "location": {
            "example": "gitlab.example.com/group/project/releases",
            "type": "string"
          },
          "name": {
            "example": "releases",
            "type": "string"
          },
          "path": {
            "example": "group/project/releases",
            "type": "string"
          },
          "project_id": {
            "example": 9,
            "format": "int32",
            "type": "integer"
          },
          "size": {
            "example": 12345,
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "example": "delete_scheduled",
            "type": "string"
          },
          "tags": {
            "$ref": "#/components/schemas/API_Entities_ContainerRegistry_Tag"
          },
          "tags_count": {
            "example": 3,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_ContainerRegistry_Tag": {
        "description": "API_Entities_ContainerRegistry_Tag model",
        "properties": {
          "location": {
            "example": "registry.dev/namespace1/project1/test_image_1:latest",
            "type": "string"
          },
          "name": {
            "example": "latest",
            "type": "string"
          },
          "path": {
            "example": "namespace1/project1/test_image_1:latest",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ContainerRegistry_TagDetails": {
        "description": "API_Entities_ContainerRegistry_TagDetails model",
        "properties": {
          "created_at": {
            "example": "2022-01-10T13:39:08.229Z",
            "format": "date-time",
            "type": "string"
          },
          "digest": {
            "example": "shadigest",
            "type": "string"
          },
          "location": {
            "example": "registry.dev/namespace1/project1/test_image_1:latest",
            "type": "string"
          },
          "name": {
            "example": "latest",
            "type": "string"
          },
          "path": {
            "example": "namespace1/project1/test_image_1:latest",
            "type": "string"
          },
          "revision": {
            "example": "tagrevision",
            "type": "string"
          },
          "short_revision": {
            "example": "shortrevison",
            "type": "string"
          },
          "total_size": {
            "example": 3,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_Contributor": {
        "description": "API_Entities_Contributor model",
        "properties": {
          "additions": {
            "example": 3,
            "format": "int32",
            "type": "integer"
          },
          "commits": {
            "example": 117,
            "format": "int32",
            "type": "integer"
          },
          "deletions": {
            "example": 5,
            "format": "int32",
            "type": "integer"
          },
          "email": {
            "example": "johndoe@example.com",
            "type": "string"
          },
          "name": {
            "example": "John Doe",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_CustomAttribute": {
        "description": "API_Entities_CustomAttribute model",
        "properties": {
          "key": {
            "example": "foo",
            "type": "string"
          },
          "value": {
            "example": "bar",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_DeployKey": {
        "description": "API_Entities_DeployKey model",
        "properties": {
          "created_at": {
            "example": "2015-09-03T07:24:44.627Z",
            "format": "date-time",
            "type": "string"
          },
          "expires_at": {
            "example": "2020-09-03T07:24:44.627Z",
            "format": "date-time",
            "type": "string"
          },
          "fingerprint": {
            "example": "4a:9d:64:15:ed:3a:e6:07:6e:89:36:b3:3b:03:05:d9",
            "type": "string"
          },
          "fingerprint_sha256": {
            "example": "SHA256:Jrs3LD1Ji30xNLtTVf9NDCj7kkBgPBb2pjvTZ3HfIgU",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "key": {
            "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDNJAkI3Wdf0r13c8a5pEExB2YowPWCSVzfZV22pNBc1CuEbyYLHpUyaD0GwpGvFdx2aP7lMEk35k6Rz3ccBF6jRaVJyhsn5VNnW92PMpBJ/P1UebhXwsFHdQf5rTt082cSxWuk61kGWRQtk4ozt/J2DF/dIUVaLvc+z4HomT41fQ==",
            "type": "string"
          },
          "projects_with_readonly_access": {
            "$ref": "#/components/schemas/API_Entities_ProjectIdentity"
          },
          "projects_with_write_access": {
            "$ref": "#/components/schemas/API_Entities_ProjectIdentity"
          },
          "title": {
            "example": "Sample key 25",
            "type": "string"
          },
          "usage_type": {
            "example": "auth",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_DeployKeysProject": {
        "description": "API_Entities_DeployKeysProject model",
        "properties": {
          "can_push": {
            "type": "boolean"
          },
          "created_at": {
            "example": "2015-09-03T07:24:44.627Z",
            "format": "date-time",
            "type": "string"
          },
          "expires_at": {
            "example": "2020-09-03T07:24:44.627Z",
            "format": "date-time",
            "type": "string"
          },
          "fingerprint": {
            "example": "4a:9d:64:15:ed:3a:e6:07:6e:89:36:b3:3b:03:05:d9",
            "type": "string"
          },
          "fingerprint_sha256": {
            "example": "SHA256:Jrs3LD1Ji30xNLtTVf9NDCj7kkBgPBb2pjvTZ3HfIgU",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "key": {
            "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDNJAkI3Wdf0r13c8a5pEExB2YowPWCSVzfZV22pNBc1CuEbyYLHpUyaD0GwpGvFdx2aP7lMEk35k6Rz3ccBF6jRaVJyhsn5VNnW92PMpBJ/P1UebhXwsFHdQf5rTt082cSxWuk61kGWRQtk4ozt/J2DF/dIUVaLvc+z4HomT41fQ==",
            "type": "string"
          },
          "projects_with_readonly_access": {
            "$ref": "#/components/schemas/API_Entities_ProjectIdentity"
          },
          "projects_with_write_access": {
            "$ref": "#/components/schemas/API_Entities_ProjectIdentity"
          },
          "title": {
            "example": "Sample key 25",
            "type": "string"
          },
          "usage_type": {
            "example": "auth",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_DeployToken": {
        "description": "API_Entities_DeployToken model",
        "properties": {
          "expired": {
            "type": "boolean"
          },
          "expires_at": {
            "example": "2020-02-14T00:00:00.000Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "MyToken",
            "type": "string"
          },
          "revoked": {
            "type": "boolean"
          },
          "scopes": {
            "example": [
              "read_repository"
            ],
            "type": "array"
          },
          "username": {
            "example": "gitlab+deploy-token-1",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_DeployTokenWithToken": {
        "description": "API_Entities_DeployTokenWithToken model",
        "properties": {
          "expired": {
            "type": "boolean"
          },
          "expires_at": {
            "example": "2020-02-14T00:00:00.000Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "MyToken",
            "type": "string"
          },
          "revoked": {
            "type": "boolean"
          },
          "scopes": {
            "example": [
              "read_repository"
            ],
            "type": "array"
          },
          "token": {
            "example": "jMRvtPNxrn3crTAGukpZ",
            "type": "string"
          },
          "username": {
            "example": "gitlab+deploy-token-1",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Deployment": {
        "description": "API_Entities_Deployment model",
        "properties": {
          "created_at": {
            "example": "2016-08-11T11:32:35.444Z",
            "format": "date-time",
            "type": "string"
          },
          "deployable": {
            "$ref": "#/components/schemas/API_Entities_Ci_Job"
          },
          "environment": {
            "$ref": "#/components/schemas/API_Entities_EnvironmentBasic"
          },
          "id": {
            "example": 41,
            "format": "int32",
            "type": "integer"
          },
          "iid": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "ref": {
            "example": "main",
            "type": "string"
          },
          "sha": {
            "example": "99d03678b90d914dbb1b109132516d71a4a03ea8",
            "type": "string"
          },
          "status": {
            "example": "created",
            "type": "string"
          },
          "updated_at": {
            "example": "2016-08-11T11:32:35.444Z",
            "format": "date-time",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          }
        },
        "type": "object"
      },
      "API_Entities_DeploymentExtended": {
        "description": "API_Entities_DeploymentExtended model",
        "properties": {
          "approval_summary": {
            "$ref": "#/components/schemas/API_Entities_Deployments_ApprovalSummary"
          },
          "approvals": {
            "$ref": "#/components/schemas/API_Entities_Deployments_Approval"
          },
          "created_at": {
            "example": "2016-08-11T11:32:35.444Z",
            "format": "date-time",
            "type": "string"
          },
          "deployable": {
            "$ref": "#/components/schemas/API_Entities_Ci_Job"
          },
          "environment": {
            "$ref": "#/components/schemas/API_Entities_EnvironmentBasic"
          },
          "id": {
            "example": 41,
            "format": "int32",
            "type": "integer"
          },
          "iid": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "pending_approval_count": {
            "example": 0,
            "format": "int32",
            "type": "integer"
          },
          "ref": {
            "example": "main",
            "type": "string"
          },
          "sha": {
            "example": "99d03678b90d914dbb1b109132516d71a4a03ea8",
            "type": "string"
          },
          "status": {
            "example": "created",
            "type": "string"
          },
          "updated_at": {
            "example": "2016-08-11T11:32:35.444Z",
            "format": "date-time",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          }
        },
        "type": "object"
      },
      "API_Entities_Deployments_Approval": {
        "description": "API_Entities_Deployments_Approval model",
        "properties": {
          "comment": {
            "example": "LGTM",
            "type": "string"
          },
          "created_at": {
            "example": "2022-02-24T20:22:30.097Z",
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "example": "approved",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          }
        },
        "type": "object"
      },
      "API_Entities_Deployments_ApprovalSummary": {
        "properties": {
          "rules": {
            "$ref": "#/components/schemas/API_Entities_ProtectedEnvironments_ApprovalRuleForSummary"
          }
        },
        "type": "object"
      },
      "API_Entities_Dictionary_Table": {
        "description": "API_Entities_Dictionary_Table model",
        "properties": {
          "feature_categories": {
            "example": "database",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "table_name": {
            "example": "users",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Diff": {
        "additionalProperties": false,
        "description": "API_Entities_Diff model",
        "properties": {
          "a_mode": {
            "example": "100755",
            "type": "string"
          },
          "b_mode": {
            "example": "100644",
            "type": "string"
          },
          "deleted_file": {
            "type": "boolean"
          },
          "diff": {
            "example": "@@ -71,6 +71,8 @@\\n...",
            "type": "string"
          },
          "generated_file": {
            "type": "boolean"
          },
          "new_file": {
            "type": "boolean"
          },
          "new_path": {
            "example": "doc/update/5.4-to-6.0.md",
            "type": "string"
          },
          "old_path": {
            "example": "doc/update/5.4-to-6.0.md",
            "type": "string"
          },
          "renamed_file": {
            "type": "boolean"
          }
        },
        "required": [
          "a_mode",
          "b_mode",
          "deleted_file",
          "diff",
          "new_file",
          "new_path",
          "old_path",
          "renamed_file"
        ],
        "type": "object"
      },
      "API_Entities_DiffRefs": {
        "additionalProperties": false,
        "properties": {
          "base_sha": {
            "type": "string"
          },
          "head_sha": {
            "type": "string"
          },
          "start_sha": {
            "type": "string"
          }
        },
        "required": [
          "base_sha",
          "head_sha"
        ],
        "type": "object"
      },
      "API_Entities_DraftNote": {
        "description": "API_Entities_DraftNote model",
        "properties": {
          "author_id": {
            "example": 4,
            "format": "int32",
            "type": "integer"
          },
          "commit_id": {
            "example": 4,
            "format": "int32",
            "type": "integer"
          },
          "discussion_id": {
            "example": 613,
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "line_code": {
            "example": "1c497fbb3a46b78edf0_2_4",
            "type": "string"
          },
          "merge_request_id": {
            "example": 52,
            "format": "int32",
            "type": "integer"
          },
          "note": {
            "example": "This is a note",
            "type": "string"
          },
          "position": {
            "example": {
              "base_sha": "aa149113",
              "head_sha": "be3020c7",
              "line_range": {
                "end": {
                  "line_code": "1c497fbb3a46b78edf04cc2a2fa33f67e3ffbe2a_2_4",
                  "new_line": 4,
                  "old_line": 2,
                  "type": null
                },
                "start": {
                  "line_code": "1c497fbb3a46b78edf04cc2a2fa33f67e3ffbe2a_2_4",
                  "new_line": 4,
                  "old_line": 2,
                  "type": null
                }
              },
              "new_line": 4,
              "new_path": "example.md",
              "old_line": 2,
              "old_path": "example.md",
              "position_type": "text",
              "start_sha": "b3a0a8c4"
            },
            "type": "object"
          },
          "resolve_discussion": {
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "API_Entities_Email": {
        "description": "API_Entities_Email model",
        "properties": {
          "confirmed_at": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Environment": {
        "description": "API_Entities_Environment model",
        "properties": {
          "auto_stop_at": {
            "example": "2019-05-25T18:55:13.252Z",
            "format": "date-time",
            "type": "string"
          },
          "auto_stop_setting": {
            "example": "always",
            "type": "string"
          },
          "cluster_agent": {
            "$ref": "#/components/schemas/API_Entities_Clusters_Agent"
          },
          "created_at": {
            "example": "2019-05-25T18:55:13.252Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "example": "description",
            "type": "string"
          },
          "external_url": {
            "example": "https://deploy.gitlab.example.com",
            "type": "string"
          },
          "flux_resource_path": {
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "kubernetes_namespace": {
            "type": "string"
          },
          "last_deployment": {
            "$ref": "#/components/schemas/API_Entities_Deployment"
          },
          "name": {
            "example": "deploy",
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/API_Entities_BasicProjectDetails"
          },
          "slug": {
            "example": "deploy",
            "type": "string"
          },
          "state": {
            "example": "available",
            "type": "string"
          },
          "tier": {
            "example": "development",
            "type": "string"
          },
          "updated_at": {
            "example": "2019-05-25T18:55:13.252Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_EnvironmentBasic": {
        "description": "API_Entities_EnvironmentBasic model",
        "properties": {
          "created_at": {
            "example": "2019-05-25T18:55:13.252Z",
            "format": "date-time",
            "type": "string"
          },
          "external_url": {
            "example": "https://deploy.gitlab.example.com",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "deploy",
            "type": "string"
          },
          "slug": {
            "example": "deploy",
            "type": "string"
          },
          "updated_at": {
            "example": "2019-05-25T18:55:13.252Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ErrorTracking_ClientKey": {
        "description": "API_Entities_ErrorTracking_ClientKey model",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "public_key": {
            "example": "glet_aa77551d849c083f76d0bc545ed053a3",
            "type": "string"
          },
          "sentry_dsn": {
            "example": "https://glet_aa77551d849c083f76d0bc545ed053a3@example.com/errortracking/api/v1/projects/5",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ErrorTracking_ProjectSetting": {
        "description": "API_Entities_ErrorTracking_ProjectSetting model",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "api_url": {
            "example": "https://sentry.io/api/0/projects/myawesomeproject/project",
            "type": "string"
          },
          "integrated": {
            "type": "boolean"
          },
          "project_name": {
            "example": "sample sentry project",
            "type": "string"
          },
          "sentry_external_url": {
            "example": "https://sentry.io/myawesomeproject/project",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Event": {
        "description": "API_Entities_Event model",
        "properties": {
          "action_name": {
            "example": "closed",
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "author_id": {
            "example": 25,
            "format": "int32",
            "type": "integer"
          },
          "author_username": {
            "example": "root",
            "type": "string"
          },
          "created_at": {
            "example": "2017-02-09T10:43:19.667Z",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "imported": {
            "example": false,
            "type": "boolean"
          },
          "imported_from": {
            "example": "none",
            "type": "string"
          },
          "note": {
            "$ref": "#/components/schemas/API_Entities_Note"
          },
          "project_id": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "push_data": {
            "$ref": "#/components/schemas/API_Entities_PushEventPayload"
          },
          "target_id": {
            "example": 160,
            "format": "int32",
            "type": "integer"
          },
          "target_iid": {
            "example": 157,
            "format": "int32",
            "type": "integer"
          },
          "target_title": {
            "example": "Public project search field",
            "type": "string"
          },
          "target_type": {
            "example": "Issue",
            "type": "string"
          },
          "wiki_page": {
            "$ref": "#/components/schemas/API_Entities_WikiPageBasic"
          }
        },
        "type": "object"
      },
      "API_Entities_FeatureFlag": {
        "description": "API_Entities_FeatureFlag model",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "created_at": {
            "example": "2019-11-04T08:13:51.423Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "example": "merge train feature flag",
            "type": "string"
          },
          "name": {
            "example": "merge_train",
            "type": "string"
          },
          "scopes": {
            "type": "string"
          },
          "strategies": {
            "$ref": "#/components/schemas/API_Entities_FeatureFlag_Strategy"
          },
          "updated_at": {
            "example": "2019-11-04T08:13:51.423Z",
            "format": "date-time",
            "type": "string"
          },
          "version": {
            "example": "new_version_flag",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_FeatureFlag_BasicUserList": {
        "properties": {
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "iid": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "user_list",
            "type": "string"
          },
          "user_xids": {
            "example": "user1,user2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_FeatureFlag_Scope": {
        "properties": {
          "environment_scope": {
            "example": "production",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_FeatureFlag_Strategy": {
        "properties": {
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "userWithId",
            "type": "string"
          },
          "parameters": {
            "example": "{\"userIds\": \"user1\"}",
            "type": "string"
          },
          "scopes": {
            "$ref": "#/components/schemas/API_Entities_FeatureFlag_Scope"
          },
          "user_list": {
            "$ref": "#/components/schemas/API_Entities_FeatureFlag_BasicUserList"
          }
        },
        "type": "object"
      },
      "API_Entities_FeatureFlag_UserList": {
        "description": "API_Entities_FeatureFlag_UserList model",
        "properties": {
          "created_at": {
            "example": "2020-02-04T08:13:10.507Z",
            "format": "date-time",
            "type": "string"
          },
          "edit_path": {
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "iid": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "user_list",
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "project_id": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "updated_at": {
            "example": "2020-02-04T08:13:10.507Z",
            "format": "date-time",
            "type": "string"
          },
          "user_xids": {
            "example": "user1,user2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_FreezePeriod": {
        "description": "API_Entities_FreezePeriod model",
        "properties": {
          "created_at": {
            "example": "2020-05-15T17:03:35.702Z",
            "format": "date-time",
            "type": "string"
          },
          "cron_timezone": {
            "example": "UTC",
            "type": "string"
          },
          "freeze_end": {
            "example": "0 8 * * 1",
            "type": "string"
          },
          "freeze_start": {
            "example": "0 23 * * 5",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "updated_at": {
            "example": "2020-05-15T17:03:35.702Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_GoModuleVersion": {
        "description": "API_Entities_GoModuleVersion model",
        "properties": {
          "Time": {
            "example": "1617822312 -0600",
            "type": "string"
          },
          "Version": {
            "example": "v1.0.0",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_GpgKey": {
        "description": "API_Entities_GpgKey model",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Group": {
        "additionalProperties": false,
        "description": "API_Entities_Group model",
        "properties": {
          "archived": {
            "type": "boolean"
          },
          "auto_devops_enabled": {
            "type": "string"
          },
          "avatar_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "custom_attributes": {
            "$ref": "#/components/schemas/API_Entities_CustomAttribute"
          },
          "default_branch": {
            "type": "string"
          },
          "default_branch_protection": {
            "type": null
          },
          "default_branch_protection_defaults": {
            "type": null
          },
          "description": {
            "type": "string"
          },
          "duo_features_enabled": {
            "type": "string"
          },
          "emails_disabled": {
            "type": "boolean"
          },
          "emails_enabled": {
            "type": "boolean"
          },
          "file_template_project_id": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "full_path": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "ldap_access": {
            "type": "boolean"
          },
          "ldap_cn": {
            "type": "string"
          },
          "ldap_group_links": {
            "$ref": "#/components/schemas/EE_API_Entities_LdapGroupLink"
          },
          "lfs_enabled": {
            "type": "boolean"
          },
          "lock_duo_features_enabled": {
            "type": "boolean"
          },
          "lock_math_rendering_limits_enabled": {
            "type": "boolean"
          },
          "marked_for_deletion_on": {
            "type": "string"
          },
          "math_rendering_limits_enabled": {
            "type": "boolean"
          },
          "max_artifacts_size": {
            "format": "int32",
            "type": "integer"
          },
          "mentions_disabled": {
            "type": null
          },
          "name": {
            "type": "string"
          },
          "organization_id": {
            "type": "integer"
          },
          "parent_id": {
            "type": null
          },
          "path": {
            "type": "string"
          },
          "project_creation_level": {
            "type": "string"
          },
          "repository_storage": {
            "type": "string"
          },
          "request_access_enabled": {
            "type": "boolean"
          },
          "require_two_factor_authentication": {
            "type": "boolean"
          },
          "root_storage_statistics": {
            "type": null
          },
          "saml_group_links": {
            "type": null
          },
          "share_with_group_lock": {
            "type": "boolean"
          },
          "shared_runners_setting": {
            "type": "string"
          },
          "statistics": {
            "properties": {
              "job_artifacts_size": {
                "type": "string"
              },
              "lfs_objects_size": {
                "type": "string"
              },
              "packages_size": {
                "type": "string"
              },
              "pipeline_artifacts_size": {
                "type": "string"
              },
              "repository_size": {
                "type": "string"
              },
              "snippets_size": {
                "type": "string"
              },
              "storage_size": {
                "type": "string"
              },
              "uploads_size": {
                "type": "string"
              },
              "wiki_size": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "subgroup_creation_level": {
            "type": "string"
          },
          "two_factor_grace_period": {
            "type": "integer"
          },
          "visibility": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          },
          "wiki_access_level": {
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "id",
          "name"
        ],
        "type": "object"
      },
      "API_Entities_GroupAccess": {
        "properties": {
          "access_level": {
            "type": "integer"
          },
          "notification_level": {
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_GroupDetail": {
        "additionalProperties": false,
        "description": "API_Entities_GroupDetail model",
        "properties": {
          "allowed_email_domains_list": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "auto_ban_user_on_excessive_projects_download": {
            "type": "string"
          },
          "auto_devops_enabled": {
            "type": null
          },
          "avatar_url": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "custom_attributes": {
            "type": null
          },
          "default_branch": {
            "type": "string"
          },
          "default_branch_protection": {
            "type": "integer"
          },
          "default_branch_protection_defaults": {
            "type": null
          },
          "description": {
            "type": "string"
          },
          "duo_features_enabled": {
            "type": "string"
          },
          "emails_disabled": {
            "type": "boolean"
          },
          "emails_enabled": {
            "type": "boolean"
          },
          "enabled_git_access_protocol": {
            "type": null
          },
          "extra_shared_runners_minutes_limit": {
            "type": null
          },
          "file_template_project_id": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "full_path": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "ip_restriction_ranges": {
            "type": "string"
          },
          "ldap_access": {
            "type": "string"
          },
          "ldap_cn": {
            "type": "string"
          },
          "ldap_group_links": {
            "type": null
          },
          "lfs_enabled": {
            "type": "boolean"
          },
          "lock_duo_features_enabled": {
            "type": "string"
          },
          "lock_math_rendering_limits_enabled": {
            "type": "boolean"
          },
          "marked_for_deletion_on": {
            "type": "string"
          },
          "math_rendering_limits_enabled": {
            "type": "boolean"
          },
          "max_artifacts_size": {
            "format": "int32",
            "type": "integer"
          },
          "membership_lock": {
            "type": "boolean"
          },
          "mentions_disabled": {
            "type": null
          },
          "name": {
            "type": "string"
          },
          "organization_id": {
            "type": "integer"
          },
          "parent_id": {
            "type": null
          },
          "path": {
            "type": "string"
          },
          "prevent_forking_outside_group": {
            "type": null
          },
          "prevent_sharing_groups_outside_hierarchy": {
            "type": "boolean"
          },
          "project_creation_level": {
            "type": "string"
          },
          "projects": {
            "items": {
              "type": null
            },
            "type": "array"
          },
          "repository_storage": {
            "type": "string"
          },
          "request_access_enabled": {
            "type": "boolean"
          },
          "require_two_factor_authentication": {
            "type": "boolean"
          },
          "root_storage_statistics": {
            "type": null
          },
          "runners_token": {
            "type": "string"
          },
          "saml_group_links": {
            "type": null
          },
          "service_access_tokens_expiration_enforced": {
            "type": "string"
          },
          "share_with_group_lock": {
            "type": "boolean"
          },
          "shared_projects": {
            "type": null
          },
          "shared_runners_minutes_limit": {
            "type": "string"
          },
          "shared_runners_setting": {
            "type": "string"
          },
          "shared_with_groups": {
            "type": null
          },
          "statistics": {
            "type": null
          },
          "subgroup_creation_level": {
            "type": "string"
          },
          "two_factor_grace_period": {
            "type": "integer"
          },
          "unique_project_download_limit": {
            "type": "string"
          },
          "unique_project_download_limit_alertlist": {
            "type": "string"
          },
          "unique_project_download_limit_allowlist": {
            "type": "string"
          },
          "unique_project_download_limit_interval_in_seconds": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          },
          "wiki_access_level": {
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "id",
          "name"
        ],
        "type": "object"
      },
      "API_Entities_Identity": {
        "properties": {
          "extern_uid": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "saml_provider_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ImpersonationToken": {
        "description": "API_Entities_ImpersonationToken model",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "example": "Token to manage api",
            "type": "string"
          },
          "expires_at": {
            "example": "2020-08-31T15:53:00.073Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "impersonation": {
            "type": "string"
          },
          "last_used_at": {
            "example": "2020-08-31T15:53:00.073Z",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "example": "John Doe",
            "type": "string"
          },
          "revoked": {
            "type": "boolean"
          },
          "scopes": {
            "example": [
              "api"
            ],
            "type": "array"
          },
          "user_id": {
            "example": 3,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_ImpersonationTokenWithToken": {
        "description": "API_Entities_ImpersonationTokenWithToken model",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "example": "Token to manage api",
            "type": "string"
          },
          "expires_at": {
            "example": "2020-08-31T15:53:00.073Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "impersonation": {
            "type": "string"
          },
          "last_used_at": {
            "example": "2020-08-31T15:53:00.073Z",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "example": "John Doe",
            "type": "string"
          },
          "revoked": {
            "type": "boolean"
          },
          "scopes": {
            "example": [
              "api"
            ],
            "type": "array"
          },
          "token": {
            "type": "string"
          },
          "user_id": {
            "example": 3,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_Integration": {
        "description": "API_Entities_Integration model",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "alert_events": {
            "type": "boolean"
          },
          "comment_on_event_enabled": {
            "type": "boolean"
          },
          "commit_events": {
            "type": "boolean"
          },
          "confidential_issues_events": {
            "type": "boolean"
          },
          "confidential_note_events": {
            "type": "boolean"
          },
          "created_at": {
            "example": "2019-11-20T11:20:25.297Z",
            "format": "date-time",
            "type": "string"
          },
          "deployment_events": {
            "type": "boolean"
          },
          "id": {
            "example": 75,
            "format": "int32",
            "type": "integer"
          },
          "incident_events": {
            "type": "boolean"
          },
          "inherited": {
            "type": "boolean"
          },
          "issues_events": {
            "type": "boolean"
          },
          "job_events": {
            "type": "boolean"
          },
          "merge_requests_events": {
            "type": "boolean"
          },
          "note_events": {
            "type": "boolean"
          },
          "pipeline_events": {
            "type": "boolean"
          },
          "properties": {
            "example": {
              "token": "secr3t"
            },
            "type": "object"
          },
          "push_events": {
            "type": "boolean"
          },
          "slug": {
            "example": "jenkins",
            "format": "int32",
            "type": "integer"
          },
          "tag_push_events": {
            "type": "boolean"
          },
          "title": {
            "example": "Jenkins CI",
            "type": "string"
          },
          "updated_at": {
            "example": "2019-11-20T12:24:37.498Z",
            "format": "date-time",
            "type": "string"
          },
          "vulnerability_events": {
            "type": "boolean"
          },
          "wiki_page_events": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "API_Entities_IntegrationBasic": {
        "description": "API_Entities_IntegrationBasic model",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "alert_events": {
            "type": "boolean"
          },
          "comment_on_event_enabled": {
            "type": "boolean"
          },
          "commit_events": {
            "type": "boolean"
          },
          "confidential_issues_events": {
            "type": "boolean"
          },
          "confidential_note_events": {
            "type": "boolean"
          },
          "created_at": {
            "example": "2019-11-20T11:20:25.297Z",
            "format": "date-time",
            "type": "string"
          },
          "deployment_events": {
            "type": "boolean"
          },
          "id": {
            "example": 75,
            "format": "int32",
            "type": "integer"
          },
          "incident_events": {
            "type": "boolean"
          },
          "inherited": {
            "type": "boolean"
          },
          "issues_events": {
            "type": "boolean"
          },
          "job_events": {
            "type": "boolean"
          },
          "merge_requests_events": {
            "type": "boolean"
          },
          "note_events": {
            "type": "boolean"
          },
          "pipeline_events": {
            "type": "boolean"
          },
          "push_events": {
            "type": "boolean"
          },
          "slug": {
            "example": "jenkins",
            "format": "int32",
            "type": "integer"
          },
          "tag_push_events": {
            "type": "boolean"
          },
          "title": {
            "example": "Jenkins CI",
            "type": "string"
          },
          "updated_at": {
            "example": "2019-11-20T12:24:37.498Z",
            "format": "date-time",
            "type": "string"
          },
          "vulnerability_events": {
            "type": "boolean"
          },
          "wiki_page_events": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "API_Entities_Invitation": {
        "description": "API_Entities_Invitation model",
        "properties": {
          "access_level": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by_name": {
            "type": "string"
          },
          "expires_at": {
            "type": "string"
          },
          "invite_email": {
            "type": "string"
          },
          "invite_token": {
            "type": "string"
          },
          "user_name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_IssuableReferences": {
        "properties": {
          "full": {
            "example": "test&6",
            "type": "string"
          },
          "relative": {
            "example": "&6",
            "type": "string"
          },
          "short": {
            "example": "&6",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_IssuableTimeStats": {
        "description": "API_Entities_IssuableTimeStats model",
        "properties": {
          "human_time_estimate": {
            "example": "3h 30m",
            "type": "string"
          },
          "human_total_time_spent": {
            "example": "1h",
            "type": "string"
          },
          "time_estimate": {
            "example": 12600,
            "format": "int32",
            "type": "integer"
          },
          "total_time_spent": {
            "example": 3600,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_IssueBasic": {
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "assignees": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "author": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "blocking_issues_count": {
            "type": "string"
          },
          "closed_at": {
            "example": "2022-11-15T08:30:55.232Z",
            "format": "date-time",
            "type": "string"
          },
          "closed_by": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "confidential": {
            "type": "boolean"
          },
          "created_at": {
            "example": "2022-08-17T12:46:35.053Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "example": "Repellendus impedit et vel velit dignissimos.",
            "type": "string"
          },
          "discussion_locked": {
            "type": "boolean"
          },
          "downvotes": {
            "type": "string"
          },
          "due_date": {
            "example": "2022-11-20",
            "format": "date",
            "type": "string"
          },
          "id": {
            "example": 84,
            "format": "int32",
            "type": "integer"
          },
          "iid": {
            "example": 14,
            "format": "int32",
            "type": "integer"
          },
          "issue_type": {
            "example": "issue",
            "type": "string"
          },
          "labels": {
            "example": "bug",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "merge_requests_count": {
            "type": "string"
          },
          "milestone": {
            "$ref": "#/components/schemas/API_Entities_Milestone"
          },
          "project_id": {
            "example": 4,
            "format": "int32",
            "type": "integer"
          },
          "state": {
            "example": "closed",
            "type": "string"
          },
          "task_completion_status": {
            "type": "string"
          },
          "time_stats": {
            "$ref": "#/components/schemas/API_Entities_IssuableTimeStats"
          },
          "title": {
            "example": "Impedit et ut et dolores vero provident ullam est",
            "type": "string"
          },
          "type": {
            "description": "One of [\"ISSUE\", \"INCIDENT\", \"TEST_CASE\", \"REQUIREMENT\", \"TASK\", \"TICKET\"]",
            "example": "ISSUE",
            "type": "string"
          },
          "updated_at": {
            "example": "2022-11-14T17:22:01.470Z",
            "format": "date-time",
            "type": "string"
          },
          "upvotes": {
            "type": "string"
          },
          "user_notes_count": {
            "type": "string"
          },
          "web_url": {
            "example": "http://example.com/example/example/issues/14",
            "type": "string"
          },
          "weight": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_IssueLink": {
        "description": "API_Entities_IssueLink model",
        "properties": {
          "link_type": {
            "type": "string"
          },
          "source_issue": {
            "$ref": "#/components/schemas/API_Entities_IssueBasic"
          },
          "target_issue": {
            "$ref": "#/components/schemas/API_Entities_IssueBasic"
          }
        },
        "type": "object"
      },
      "API_Entities_Iteration": {
        "properties": {
          "created_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "due_date": {
            "type": "string"
          },
          "group_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "iid": {
            "type": "string"
          },
          "sequence": {
            "type": "string"
          },
          "start_date": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_License": {
        "description": "API_Entities_License model",
        "properties": {
          "conditions": {
            "example": "include-copyright",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "content": {
            "example": "GNU GENERAL PUBLIC LICENSE",
            "type": "string"
          },
          "description": {
            "example": "A simple license",
            "type": "string"
          },
          "html_url": {
            "example": "http://choosealicense.com/licenses/gpl-3.0",
            "type": "string"
          },
          "key": {
            "example": "gpl-3.0",
            "type": "string"
          },
          "limitations": {
            "example": "liability",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "example": "GNU General Public License v3.0",
            "type": "string"
          },
          "nickname": {
            "example": "GNU GPLv3",
            "type": "string"
          },
          "permissions": {
            "example": "commercial-use",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "popular": {
            "type": "boolean"
          },
          "source_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_LicenseBasic": {
        "properties": {
          "html_url": {
            "example": "http://choosealicense.com/licenses/gpl-3.0",
            "type": "string"
          },
          "key": {
            "example": "gpl-3.0",
            "type": "string"
          },
          "name": {
            "example": "GNU General Public License v3.0",
            "type": "string"
          },
          "nickname": {
            "example": "GNU GPLv3",
            "type": "string"
          },
          "source_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_MRNote": {
        "description": "API_Entities_MRNote model",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "note": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_MarkdownUploadAdmin": {
        "description": "API_Entities_MarkdownUploadAdmin model",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "uploaded_by": {
            "$ref": "#/components/schemas/API_Entities_UserSafe"
          }
        },
        "type": "object"
      },
      "API_Entities_Member": {
        "additionalProperties": false,
        "description": "API_Entities_Member model",
        "properties": {
          "access_level": {
            "type": "integer"
          },
          "avatar_path": {
            "example": "/user/avatar/28/The-Big-Lebowski-400-400.png",
            "type": "string"
          },
          "avatar_url": {
            "example": "https://gravatar.com/avatar/1",
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "custom_attributes": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_CustomAttribute"
            },
            "type": "array"
          },
          "email": {
            "type": "string"
          },
          "expires_at": {
            "type": "string"
          },
          "group_saml_identity": {
            "$ref": "#/components/schemas/API_Entities_Identity"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "is_using_seat": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "member_role": {
            "$ref": "#/components/schemas/EE_API_Entities_MemberRole"
          },
          "membership_state": {
            "type": "string"
          },
          "name": {
            "example": "Administrator",
            "type": "string"
          },
          "override": {
            "type": "string"
          },
          "state": {
            "example": "active",
            "type": "string"
          },
          "username": {
            "example": "admin",
            "type": "string"
          },
          "web_url": {
            "example": "https://gitlab.example.com/root",
            "type": "string"
          }
        },
        "required": [
          "access_level"
        ],
        "type": "object"
      },
      "API_Entities_Membership": {
        "description": "API_Entities_Membership model",
        "properties": {
          "access_level": {
            "type": "string"
          },
          "source_id": {
            "type": "string"
          },
          "source_name": {
            "type": "string"
          },
          "source_type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_MergeRequest": {
        "additionalProperties": false,
        "description": "API_Entities_MergeRequest model",
        "properties": {
          "allow_collaboration": {
            "type": "string"
          },
          "allow_maintainer_to_push": {
            "type": "string"
          },
          "approvals_before_merge": {
            "type": "integer"
          },
          "assignee": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "assignees": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_UserBasic"
            },
            "type": "array"
          },
          "author": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "blocking_discussions_resolved": {
            "type": "boolean"
          },
          "changes_count": {
            "type": "string"
          },
          "closed_at": {
            "type": "string"
          },
          "closed_by": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "created_at": {
            "example": "2022-08-17T12:46:35.053Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "example": "Repellendus impedit et vel velit dignissimos.",
            "type": "string"
          },
          "description_html": {
            "type": "string"
          },
          "detailed_merge_status": {
            "type": "string"
          },
          "diff_refs": {
            "$ref": "#/components/schemas/API_Entities_DiffRefs"
          },
          "discussion_locked": {
            "type": "string"
          },
          "diverged_commits_count": {
            "type": "string"
          },
          "downvotes": {
            "type": "integer"
          },
          "draft": {
            "type": "boolean"
          },
          "first_contribution": {
            "type": "boolean"
          },
          "first_deployed_to_production_at": {
            "type": "string"
          },
          "force_remove_source_branch": {
            "type": "boolean"
          },
          "has_conflicts": {
            "type": "boolean"
          },
          "head_pipeline": {
            "$ref": "#/components/schemas/API_Entities_Ci_Pipeline"
          },
          "id": {
            "example": 84,
            "format": "int32",
            "type": "integer"
          },
          "iid": {
            "example": 14,
            "format": "int32",
            "type": "integer"
          },
          "imported": {
            "type": "boolean"
          },
          "imported_from": {
            "example": "bitbucket",
            "type": "string"
          },
          "labels": {
            "items": {
              "type": null
            },
            "type": "array"
          },
          "latest_build_finished_at": {
            "type": "string"
          },
          "latest_build_started_at": {
            "type": "string"
          },
          "merge_after": {
            "type": "string"
          },
          "merge_commit_sha": {
            "type": "string"
          },
          "merge_error": {
            "type": "string"
          },
          "merge_status": {
            "type": "string"
          },
          "merge_user": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "merge_when_pipeline_succeeds": {
            "type": "boolean"
          },
          "merged_at": {
            "type": "string"
          },
          "merged_by": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "milestone": {
            "$ref": "#/components/schemas/API_Entities_Milestone"
          },
          "pipeline": {
            "$ref": "#/components/schemas/API_Entities_Ci_PipelineBasic"
          },
          "prepared_at": {
            "type": "string"
          },
          "project_id": {
            "example": 4,
            "format": "int32",
            "type": "integer"
          },
          "rebase_in_progress": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "references": {
            "$ref": "#/components/schemas/API_Entities_IssuableReferences"
          },
          "reviewers": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_UserBasic"
            },
            "type": "array"
          },
          "sha": {
            "type": "string"
          },
          "should_remove_source_branch": {
            "type": "boolean"
          },
          "source_branch": {
            "type": "string"
          },
          "source_project_id": {
            "type": "integer"
          },
          "squash": {
            "type": "boolean"
          },
          "squash_commit_sha": {
            "type": "string"
          },
          "squash_on_merge": {
            "type": "boolean"
          },
          "state": {
            "example": "closed",
            "type": "string"
          },
          "subscribed": {
            "type": "boolean"
          },
          "target_branch": {
            "type": "string"
          },
          "target_project_id": {
            "type": "integer"
          },
          "task_completion_status": {
            "type": null
          },
          "time_stats": {
            "$ref": "#/components/schemas/API_Entities_IssuableTimeStats"
          },
          "title": {
            "example": "Impedit et ut et dolores vero provident ullam est",
            "type": "string"
          },
          "title_html": {
            "type": "string"
          },
          "updated_at": {
            "example": "2022-11-14T17:22:01.470Z",
            "format": "date-time",
            "type": "string"
          },
          "upvotes": {
            "type": "integer"
          },
          "user": {
            "properties": {
              "can_merge": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "user_notes_count": {
            "type": "integer"
          },
          "web_url": {
            "type": "string"
          },
          "work_in_progress": {
            "type": "boolean"
          }
        },
        "required": [
          "author",
          "created_at",
          "id",
          "iid",
          "project_id",
          "source_branch",
          "state",
          "target_branch",
          "title",
          "user"
        ],
        "type": "object"
      },
      "API_Entities_MergeRequestApprovals": {
        "description": "API_Entities_MergeRequestApprovals model",
        "properties": {
          "approved": {
            "type": "boolean"
          },
          "approved_by": {
            "$ref": "#/components/schemas/API_Entities_Approvals"
          },
          "user_can_approve": {
            "type": "boolean"
          },
          "user_has_approved": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "API_Entities_MergeRequestBasic": {
        "description": "API_Entities_MergeRequestBasic model",
        "properties": {
          "allow_collaboration": {
            "type": "string"
          },
          "allow_maintainer_to_push": {
            "type": "string"
          },
          "approvals_before_merge": {
            "type": "string"
          },
          "assignee": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "assignees": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "author": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "blocking_discussions_resolved": {
            "type": "string"
          },
          "closed_at": {
            "type": "string"
          },
          "closed_by": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "created_at": {
            "example": "2022-08-17T12:46:35.053Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "example": "Repellendus impedit et vel velit dignissimos.",
            "type": "string"
          },
          "description_html": {
            "type": "string"
          },
          "detailed_merge_status": {
            "type": "string"
          },
          "discussion_locked": {
            "type": "string"
          },
          "downvotes": {
            "type": "string"
          },
          "draft": {
            "type": "string"
          },
          "force_remove_source_branch": {
            "type": "string"
          },
          "has_conflicts": {
            "type": "string"
          },
          "id": {
            "example": 84,
            "format": "int32",
            "type": "integer"
          },
          "iid": {
            "example": 14,
            "format": "int32",
            "type": "integer"
          },
          "imported": {
            "type": "string"
          },
          "imported_from": {
            "example": "bitbucket",
            "type": "string"
          },
          "labels": {
            "type": "string"
          },
          "merge_after": {
            "type": "string"
          },
          "merge_commit_sha": {
            "type": "string"
          },
          "merge_status": {
            "type": "string"
          },
          "merge_user": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "merge_when_pipeline_succeeds": {
            "type": "string"
          },
          "merged_at": {
            "type": "string"
          },
          "merged_by": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "milestone": {
            "$ref": "#/components/schemas/API_Entities_Milestone"
          },
          "prepared_at": {
            "type": "string"
          },
          "project_id": {
            "example": 4,
            "format": "int32",
            "type": "integer"
          },
          "reference": {
            "type": "string"
          },
          "references": {
            "$ref": "#/components/schemas/API_Entities_IssuableReferences"
          },
          "reviewers": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "sha": {
            "type": "string"
          },
          "should_remove_source_branch": {
            "type": "string"
          },
          "source_branch": {
            "type": "string"
          },
          "source_project_id": {
            "type": "string"
          },
          "squash": {
            "type": "string"
          },
          "squash_commit_sha": {
            "type": "string"
          },
          "squash_on_merge": {
            "type": "string"
          },
          "state": {
            "example": "closed",
            "type": "string"
          },
          "target_branch": {
            "type": "string"
          },
          "target_project_id": {
            "type": "string"
          },
          "task_completion_status": {
            "type": "string"
          },
          "time_stats": {
            "$ref": "#/components/schemas/API_Entities_IssuableTimeStats"
          },
          "title": {
            "example": "Impedit et ut et dolores vero provident ullam est",
            "type": "string"
          },
          "title_html": {
            "type": "string"
          },
          "updated_at": {
            "example": "2022-11-14T17:22:01.470Z",
            "format": "date-time",
            "type": "string"
          },
          "upvotes": {
            "type": "string"
          },
          "user_notes_count": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          },
          "work_in_progress": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_MergeRequestChanges": {
        "description": "API_Entities_MergeRequestChanges model",
        "properties": {
          "allow_collaboration": {
            "type": "string"
          },
          "allow_maintainer_to_push": {
            "type": "string"
          },
          "approvals_before_merge": {
            "type": "string"
          },
          "assignee": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "assignees": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "author": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "blocking_discussions_resolved": {
            "type": "string"
          },
          "changes": {
            "$ref": "#/components/schemas/API_Entities_Diff"
          },
          "changes_count": {
            "type": "string"
          },
          "closed_at": {
            "type": "string"
          },
          "closed_by": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "created_at": {
            "example": "2022-08-17T12:46:35.053Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "example": "Repellendus impedit et vel velit dignissimos.",
            "type": "string"
          },
          "description_html": {
            "type": "string"
          },
          "detailed_merge_status": {
            "type": "string"
          },
          "diff_refs": {
            "$ref": "#/components/schemas/API_Entities_DiffRefs"
          },
          "discussion_locked": {
            "type": "string"
          },
          "diverged_commits_count": {
            "type": "string"
          },
          "downvotes": {
            "type": "string"
          },
          "draft": {
            "type": "string"
          },
          "first_contribution": {
            "type": "string"
          },
          "first_deployed_to_production_at": {
            "type": "string"
          },
          "force_remove_source_branch": {
            "type": "string"
          },
          "has_conflicts": {
            "type": "string"
          },
          "head_pipeline": {
            "$ref": "#/components/schemas/API_Entities_Ci_Pipeline"
          },
          "id": {
            "example": 84,
            "format": "int32",
            "type": "integer"
          },
          "iid": {
            "example": 14,
            "format": "int32",
            "type": "integer"
          },
          "imported": {
            "type": "string"
          },
          "imported_from": {
            "example": "bitbucket",
            "type": "string"
          },
          "labels": {
            "type": "string"
          },
          "latest_build_finished_at": {
            "type": "string"
          },
          "latest_build_started_at": {
            "type": "string"
          },
          "merge_after": {
            "type": "string"
          },
          "merge_commit_sha": {
            "type": "string"
          },
          "merge_error": {
            "type": "string"
          },
          "merge_status": {
            "type": "string"
          },
          "merge_user": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "merge_when_pipeline_succeeds": {
            "type": "string"
          },
          "merged_at": {
            "type": "string"
          },
          "merged_by": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "milestone": {
            "$ref": "#/components/schemas/API_Entities_Milestone"
          },
          "overflow": {
            "type": "string"
          },
          "pipeline": {
            "$ref": "#/components/schemas/API_Entities_Ci_PipelineBasic"
          },
          "prepared_at": {
            "type": "string"
          },
          "project_id": {
            "example": 4,
            "format": "int32",
            "type": "integer"
          },
          "rebase_in_progress": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "references": {
            "$ref": "#/components/schemas/API_Entities_IssuableReferences"
          },
          "reviewers": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "sha": {
            "type": "string"
          },
          "should_remove_source_branch": {
            "type": "string"
          },
          "source_branch": {
            "type": "string"
          },
          "source_project_id": {
            "type": "string"
          },
          "squash": {
            "type": "string"
          },
          "squash_commit_sha": {
            "type": "string"
          },
          "squash_on_merge": {
            "type": "string"
          },
          "state": {
            "example": "closed",
            "type": "string"
          },
          "subscribed": {
            "type": "string"
          },
          "target_branch": {
            "type": "string"
          },
          "target_project_id": {
            "type": "string"
          },
          "task_completion_status": {
            "type": "string"
          },
          "time_stats": {
            "$ref": "#/components/schemas/API_Entities_IssuableTimeStats"
          },
          "title": {
            "example": "Impedit et ut et dolores vero provident ullam est",
            "type": "string"
          },
          "title_html": {
            "type": "string"
          },
          "updated_at": {
            "example": "2022-11-14T17:22:01.470Z",
            "format": "date-time",
            "type": "string"
          },
          "upvotes": {
            "type": "string"
          },
          "user": {
            "properties": {
              "can_merge": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "user_notes_count": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          },
          "work_in_progress": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_MergeRequestDiff": {
        "description": "API_Entities_MergeRequestDiff model",
        "properties": {
          "base_commit_sha": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "head_commit_sha": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "merge_request_id": {
            "type": "string"
          },
          "patch_id_sha": {
            "type": "string"
          },
          "real_size": {
            "type": "string"
          },
          "start_commit_sha": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_MergeRequestDiffFull": {
        "description": "API_Entities_MergeRequestDiffFull model",
        "properties": {
          "base_commit_sha": {
            "type": "string"
          },
          "commits": {
            "$ref": "#/components/schemas/API_Entities_Commit"
          },
          "created_at": {
            "type": "string"
          },
          "diffs": {
            "$ref": "#/components/schemas/API_Entities_Diff"
          },
          "head_commit_sha": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "merge_request_id": {
            "type": "string"
          },
          "patch_id_sha": {
            "type": "string"
          },
          "real_size": {
            "type": "string"
          },
          "start_commit_sha": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_MergeRequestReviewer": {
        "description": "API_Entities_MergeRequestReviewer model",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          }
        },
        "type": "object"
      },
      "API_Entities_Metadata": {
        "description": "API_Entities_Metadata model",
        "properties": {
          "enterprise": {
            "type": "boolean"
          },
          "kas": {
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "externalK8sProxyUrl": {
                "example": "https://gitlab.example.com:8150/k8s-proxy",
                "type": "string"
              },
              "externalUrl": {
                "example": "grpc://gitlab.example.com:8150",
                "type": "string"
              },
              "version": {
                "example": "15.0.0",
                "type": "string"
              }
            },
            "type": "object"
          },
          "revision": {
            "example": "c401a659d0c",
            "type": "string"
          },
          "version": {
            "example": "15.2-pre",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_MetricImage": {
        "description": "API_Entities_MetricImage model",
        "properties": {
          "created_at": {
            "example": "2020-11-13T00:06:18.084Z",
            "format": "date-time",
            "type": "string"
          },
          "file_path": {
            "example": "/uploads/-/system/alert_metric_image/file/23/file.png",
            "type": "string"
          },
          "filename": {
            "example": "file.png",
            "type": "string"
          },
          "id": {
            "example": 23,
            "format": "int32",
            "type": "integer"
          },
          "url": {
            "example": "https://example.com/metric",
            "type": "string"
          },
          "url_text": {
            "example": "An example metric",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Milestone": {
        "properties": {
          "created_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "due_date": {
            "type": "string"
          },
          "expired": {
            "type": "string"
          },
          "group_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "iid": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "start_date": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_MilestoneWithStats": {
        "properties": {
          "created_at": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "due_date": {
            "type": "string"
          },
          "expired": {
            "type": "string"
          },
          "group_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "iid": {
            "type": "string"
          },
          "issue_stats": {
            "properties": {
              "closed": {
                "type": "string"
              },
              "total": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "project_id": {
            "type": "string"
          },
          "start_date": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_NamespaceBasic": {
        "properties": {
          "avatar_url": {
            "example": "https://example.com/avatar/12345",
            "type": "string"
          },
          "full_path": {
            "example": "group/my_project",
            "type": "string"
          },
          "id": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "kind": {
            "example": "project",
            "type": "string"
          },
          "name": {
            "example": "project",
            "type": "string"
          },
          "parent_id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "path": {
            "example": "my_project",
            "type": "string"
          },
          "web_url": {
            "example": "https://example.com/group/my_project",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Namespace_RootStorageStatistics": {
        "properties": {
          "build_artifacts_size": {
            "description": "CI artifacts size in bytes.",
            "format": "int32",
            "type": "integer"
          },
          "container_registry_size": {
            "description": "Container Registry size in bytes.",
            "format": "int32",
            "type": "integer"
          },
          "container_registry_size_is_estimated": {
            "description": "Indicates whether the deduplicated Container Registry size for the namespace is an estimated value or not.",
            "type": "boolean"
          },
          "dependency_proxy_size": {
            "description": "Dependency Proxy sizes in bytes.",
            "format": "int32",
            "type": "integer"
          },
          "lfs_objects_size": {
            "description": "LFS objects size in bytes.",
            "format": "int32",
            "type": "integer"
          },
          "packages_size": {
            "description": "Packages size in bytes.",
            "format": "int32",
            "type": "integer"
          },
          "pipeline_artifacts_size": {
            "description": "CI pipeline artifacts size in bytes.",
            "format": "int32",
            "type": "integer"
          },
          "repository_size": {
            "description": "Git repository size in bytes.",
            "format": "int32",
            "type": "integer"
          },
          "snippets_size": {
            "description": "Snippets size in bytes.",
            "format": "int32",
            "type": "integer"
          },
          "storage_size": {
            "description": "Total storage in bytes.",
            "format": "int32",
            "type": "integer"
          },
          "uploads_size": {
            "description": "Uploads size in bytes.",
            "format": "int32",
            "type": "integer"
          },
          "wiki_size": {
            "description": "Wiki size in bytes.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_Note": {
        "properties": {
          "attachment": {
            "type": "string"
          },
          "author": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "body": {
            "type": "string"
          },
          "commands_changes": {
            "type": "string"
          },
          "commit_id": {
            "type": "string"
          },
          "confidential": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "imported": {
            "type": "string"
          },
          "imported_from": {
            "example": "github",
            "type": "string"
          },
          "internal": {
            "type": "string"
          },
          "noteable_id": {
            "type": "string"
          },
          "noteable_iid": {
            "type": "string"
          },
          "noteable_type": {
            "type": "string"
          },
          "position": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "resolvable": {
            "type": "string"
          },
          "resolved": {
            "type": "string"
          },
          "resolved_at": {
            "type": "string"
          },
          "resolved_by": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "system": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_NpmPackage": {
        "description": "API_Entities_NpmPackage model",
        "properties": {
          "dist-tags": {
            "example": "{ \"latest\":\"1.0.1\" }",
            "type": "object"
          },
          "name": {
            "example": "my_package",
            "type": "string"
          },
          "versions": {
            "example": "{\n                 \"1.0.0\": {\n                   \"name\": \"my_package\",\n                   \"version\": \"1.0.0\",\n                   \"dist\": { \"shasum\": \"12345\", \"tarball\": \"https://...\" }\n                 }\n               }",
            "type": "object"
          }
        },
        "type": "object"
      },
      "API_Entities_NpmPackageTag": {
        "description": "API_Entities_NpmPackageTag model",
        "properties": {
          "dist_tags": {
            "example": "{ \"latest\":\"1.0.1\" }",
            "type": "object"
          }
        },
        "type": "object"
      },
      "API_Entities_Nuget_Dependency": {
        "properties": {
          "@id": {
            "example": "http://gitlab.com/Sandbox.App/1.0.0.json#dependency",
            "type": "string"
          },
          "@type": {
            "example": "PackageDependency",
            "type": "string"
          },
          "id": {
            "example": "Dependency",
            "type": "string"
          },
          "range": {
            "example": "2.0.0",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Nuget_DependencyGroup": {
        "properties": {
          "@id": {
            "example": "http://gitlab.com/Sandbox.App/1.0.0.json#dependencygroup",
            "type": "string"
          },
          "@type": {
            "example": "PackageDependencyGroup",
            "type": "string"
          },
          "dependencies": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_Nuget_Dependency"
            },
            "type": "array"
          },
          "targetFramework": {
            "example": "fwk test",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Nuget_PackageMetadata": {
        "description": "API_Entities_Nuget_PackageMetadata model",
        "properties": {
          "@id": {
            "example": "https://gitlab.example.com/api/v4/projects/1/packages/nuget/metadata/MyNuGetPkg/1.3.0.17.json",
            "type": "string"
          },
          "catalogEntry": {
            "$ref": "#/components/schemas/API_Entities_Nuget_PackageMetadataCatalogEntry"
          },
          "packageContent": {
            "example": "https://gitlab.example.com/api/v4/projects/1/packages/nuget/download/MyNuGetPkg/1.3.0.17/helloworld.1.3.0.17.nupkg",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Nuget_PackageMetadataCatalogEntry": {
        "properties": {
          "@id": {
            "example": "https://gitlab.example.com/api/v4/projects/1/packages/nuget/metadata/MyNuGetPkg/1.3.0.17.json",
            "type": "string"
          },
          "authors": {
            "example": "Authors",
            "type": "string"
          },
          "dependencyGroups": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_Nuget_DependencyGroup"
            },
            "type": "array"
          },
          "description": {
            "example": "Description",
            "type": "string"
          },
          "iconUrl": {
            "example": "http://sandbox.com/icon",
            "type": "string"
          },
          "id": {
            "example": "MyNuGetPkg",
            "type": "string"
          },
          "licenseUrl": {
            "example": "http://sandbox.com/license",
            "type": "string"
          },
          "packageContent": {
            "example": "https://gitlab.example.com/api/v4/projects/1/packages/nuget/download/MyNuGetPkg/1.3.0.17/helloworld.1.3.0.17.nupkg",
            "type": "string"
          },
          "projectUrl": {
            "example": "http://sandbox.com/project",
            "type": "string"
          },
          "published": {
            "example": "2023-05-08T17:23:25Z",
            "type": "string"
          },
          "summary": {
            "example": "Description",
            "type": "string"
          },
          "tags": {
            "example": "tag#1 tag#2",
            "type": "string"
          },
          "version": {
            "example": "1.3.0.17",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Nuget_PackagesMetadata": {
        "description": "API_Entities_Nuget_PackagesMetadata model",
        "properties": {
          "count": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_Nuget_PackagesMetadataItem"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "API_Entities_Nuget_PackagesMetadataItem": {
        "properties": {
          "@id": {
            "example": "https://gitlab.example.com/api/v4/projects/1/packages/nuget/metadata/MyNuGetPkg/1.3.0.17.json",
            "type": "string"
          },
          "count": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "items": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_Nuget_PackageMetadata"
            },
            "type": "array"
          },
          "lower": {
            "example": "1.3.0.17",
            "type": "string"
          },
          "upper": {
            "example": "1.3.0.17",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Nuget_PackagesVersions": {
        "description": "API_Entities_Nuget_PackagesVersions model",
        "properties": {
          "versions": {
            "example": "1.3.0.17",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "API_Entities_Nuget_SearchResult": {
        "properties": {
          "@type": {
            "example": "Package",
            "type": "string"
          },
          "authors": {
            "example": "Authors",
            "type": "string"
          },
          "description": {
            "example": "Description",
            "type": "string"
          },
          "iconUrl": {
            "example": "http://sandbox.com/icon",
            "type": "string"
          },
          "id": {
            "example": "MyNuGetPkg",
            "type": "string"
          },
          "licenseUrl": {
            "example": "http://sandbox.com/license",
            "type": "string"
          },
          "projectUrl": {
            "example": "http://sandbox.com/project",
            "type": "string"
          },
          "summary": {
            "example": "Description",
            "type": "string"
          },
          "tags": {
            "example": "tag#1 tag#2",
            "type": "string"
          },
          "title": {
            "example": "MyNuGetPkg",
            "type": "string"
          },
          "totalDownloads": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "verified": {
            "type": "boolean"
          },
          "version": {
            "example": "1.3.0.17",
            "type": "string"
          },
          "versions": {
            "$ref": "#/components/schemas/API_Entities_Nuget_SearchResultVersion"
          }
        },
        "type": "object"
      },
      "API_Entities_Nuget_SearchResultVersion": {
        "properties": {
          "@id": {
            "example": "https://gitlab.example.com/api/v4/projects/1/packages/nuget/metadata/MyNuGetPkg/1.3.0.17.json",
            "type": "string"
          },
          "downloads": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "version": {
            "example": "1.3.0.17",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Nuget_SearchResults": {
        "description": "API_Entities_Nuget_SearchResults model",
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_Nuget_SearchResult"
            },
            "type": "array"
          },
          "totalHits": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_Nuget_ServiceIndex": {
        "description": "API_Entities_Nuget_ServiceIndex model",
        "properties": {
          "resources": {
            "example": "{ \"@id\": \"https://gitlab.com/api/v4/projects/1/packages/nuget/query\", \"@type\": \"SearchQueryService\", \"comment\": \"Filter and search for packages by keyword.\"}",
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "version": {
            "example": "1.3.0.17",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Package": {
        "description": "API_Entities_Package model",
        "properties": {
          "_links": {
            "properties": {
              "delete_api_path": {
                "type": "string"
              },
              "web_path": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "conan_package_name": {
            "type": "string"
          },
          "created_at": {
            "example": "2022-09-16T12:47:31.949Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "last_downloaded_at": {
            "example": "2022-09-19T11:32:35.169Z",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "example": "@foo/bar",
            "type": "string"
          },
          "package_type": {
            "example": "npm",
            "type": "string"
          },
          "pipeline": {
            "$ref": "#/components/schemas/API_Entities_Package_Pipeline"
          },
          "pipelines": {
            "$ref": "#/components/schemas/API_Entities_Package_Pipeline"
          },
          "project_id": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "project_path": {
            "example": "gitlab/foo/bar",
            "type": "string"
          },
          "status": {
            "example": "default",
            "type": "string"
          },
          "tags": {
            "type": "string"
          },
          "version": {
            "example": "1.0.3",
            "type": "string"
          },
          "versions": {
            "$ref": "#/components/schemas/API_Entities_PackageVersion"
          }
        },
        "type": "object"
      },
      "API_Entities_PackageFile": {
        "description": "API_Entities_PackageFile model",
        "properties": {
          "created_at": {
            "example": "2018-11-07T15:25:52.199Z",
            "format": "date-time",
            "type": "string"
          },
          "file_md5": {
            "example": "58e6a45a629910c6ff99145a688971ac",
            "type": "string"
          },
          "file_name": {
            "example": "my-app-1.5-20181107.152550-1.jar",
            "type": "string"
          },
          "file_sha1": {
            "example": "ebd193463d3915d7e22219f52740056dfd26cbfe",
            "type": "string"
          },
          "file_sha256": {
            "example": "a903393463d3915d7e22219f52740056dfd26cbfeff321b",
            "type": "string"
          },
          "id": {
            "example": 225,
            "format": "int32",
            "type": "integer"
          },
          "package_id": {
            "example": 4,
            "format": "int32",
            "type": "integer"
          },
          "pipelines": {
            "$ref": "#/components/schemas/API_Entities_Package_Pipeline"
          },
          "size": {
            "example": "2421",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_PackageVersion": {
        "properties": {
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "pipeline": {
            "$ref": "#/components/schemas/API_Entities_Package_Pipeline"
          },
          "tags": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Package_Pipeline": {
        "description": "API_Entities_Package_Pipeline model",
        "properties": {
          "created_at": {
            "example": "2022-10-21T16:49:48.000+02:00",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "iid": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "project_id": {
            "example": 3,
            "format": "int32",
            "type": "integer"
          },
          "ref": {
            "example": "feature-branch",
            "type": "string"
          },
          "sha": {
            "example": "0ec9e58fdfca6cdd6652c083c9edb53abc0bad52",
            "type": "string"
          },
          "source": {
            "example": "push",
            "type": "string"
          },
          "status": {
            "example": "success",
            "type": "string"
          },
          "updated_at": {
            "example": "2022-10-21T16:49:48.000+02:00",
            "format": "date-time",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "web_url": {
            "example": "https://gitlab.example.com/gitlab-org/gitlab-foss/-/pipelines/61",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Packages_Debian_Distribution": {
        "description": "API_Entities_Packages_Debian_Distribution model",
        "properties": {
          "architectures": {
            "example": "amd64",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "codename": {
            "example": "sid",
            "type": "string"
          },
          "components": {
            "example": "main",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "example": "My description",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "label": {
            "example": "grep.be",
            "type": "string"
          },
          "origin": {
            "example": "Grep",
            "type": "string"
          },
          "suite": {
            "example": "unstable",
            "type": "string"
          },
          "valid_time_duration_seconds": {
            "example": 604800,
            "format": "int32",
            "type": "integer"
          },
          "version": {
            "example": "12",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_PagesDomain": {
        "description": "API_Entities_PagesDomain model",
        "properties": {
          "auto_ssl_enabled": {
            "type": "string"
          },
          "certificate": {
            "$ref": "#/components/schemas/API_Entities_PagesDomainCertificate"
          },
          "domain": {
            "type": "string"
          },
          "enabled_until": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "verification_code": {
            "type": "string"
          },
          "verified": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_PagesDomainCertificate": {
        "properties": {
          "certificate": {
            "type": "string"
          },
          "certificate_text": {
            "type": "string"
          },
          "expired": {
            "type": "string"
          },
          "subject": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_PersonalAccessTokenWithToken": {
        "description": "API_Entities_PersonalAccessTokenWithToken model",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "example": "Token to manage api",
            "type": "string"
          },
          "expires_at": {
            "example": "2020-08-31T15:53:00.073Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "last_used_at": {
            "example": "2020-08-31T15:53:00.073Z",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "example": "John Doe",
            "type": "string"
          },
          "revoked": {
            "type": "boolean"
          },
          "scopes": {
            "example": [
              "api"
            ],
            "type": "array"
          },
          "token": {
            "type": "string"
          },
          "user_id": {
            "example": 3,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_Platform_Kubernetes": {
        "properties": {
          "api_url": {
            "type": "string"
          },
          "authorization_type": {
            "type": "string"
          },
          "ca_cert": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Project": {
        "description": "API_Entities_Project model",
        "properties": {
          "_links": {
            "properties": {
              "cluster_agents": {
                "example": "https://gitlab.example.com/api/v4/projects/4/cluster_agents",
                "type": "string"
              },
              "events": {
                "example": "https://gitlab.example.com/api/v4/projects/4/events",
                "type": "string"
              },
              "issues": {
                "example": "https://gitlab.example.com/api/v4/projects/4/issues",
                "type": "string"
              },
              "labels": {
                "example": "https://gitlab.example.com/api/v4/projects/4/labels",
                "type": "string"
              },
              "members": {
                "example": "https://gitlab.example.com/api/v4/projects/4/members",
                "type": "string"
              },
              "merge_requests": {
                "example": "https://gitlab.example.com/api/v4/projects/4/merge_requests",
                "type": "string"
              },
              "repo_branches": {
                "example": "https://gitlab.example.com/api/v4/projects/4/repository/branches",
                "type": "string"
              },
              "self": {
                "example": "https://gitlab.example.com/api/v4/projects/4",
                "type": "string"
              }
            },
            "type": "object"
          },
          "allow_merge_on_skipped_pipeline": {
            "type": "boolean"
          },
          "allow_pipeline_trigger_approve_deployment": {
            "type": "boolean"
          },
          "analytics_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "approvals_before_merge": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "auto_cancel_pending_pipelines": {
            "example": "enabled",
            "type": "string"
          },
          "auto_devops_deploy_strategy": {
            "example": "continuous",
            "type": "string"
          },
          "auto_devops_enabled": {
            "type": "boolean"
          },
          "autoclose_referenced_issues": {
            "type": "boolean"
          },
          "avatar_url": {
            "example": "http://example.com/uploads/project/avatar/3/uploads/avatar.png",
            "type": "string"
          },
          "build_git_strategy": {
            "example": "fetch",
            "type": "string"
          },
          "build_timeout": {
            "example": 3600,
            "format": "int32",
            "type": "integer"
          },
          "builds_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "can_create_merge_request_in": {
            "type": "boolean"
          },
          "ci_allow_fork_pipelines_to_run_in_parent_project": {
            "type": "boolean"
          },
          "ci_config_path": {
            "example": "",
            "type": "string"
          },
          "ci_default_git_depth": {
            "example": 20,
            "format": "int32",
            "type": "integer"
          },
          "ci_delete_pipelines_in_seconds": {
            "example": 86400,
            "format": "int32",
            "type": "integer"
          },
          "ci_forward_deployment_enabled": {
            "type": "boolean"
          },
          "ci_forward_deployment_rollback_allowed": {
            "type": "boolean"
          },
          "ci_id_token_sub_claim_components": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ci_job_token_scope_enabled": {
            "type": "boolean"
          },
          "ci_pipeline_variables_minimum_override_role": {
            "type": "string"
          },
          "ci_push_repository_for_job_token_allowed": {
            "type": "boolean"
          },
          "ci_restrict_pipeline_cancellation_role": {
            "type": "string"
          },
          "ci_separated_caches": {
            "type": "boolean"
          },
          "compliance_frameworks": {
            "type": "string"
          },
          "container_expiration_policy": {
            "$ref": "#/components/schemas/API_Entities_ContainerExpirationPolicy"
          },
          "container_registry_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "container_registry_enabled": {
            "type": "boolean"
          },
          "container_registry_image_prefix": {
            "example": "registry.gitlab.example.com/gitlab/gitlab-client",
            "type": "string"
          },
          "created_at": {
            "example": "2020-05-07T04:27:17.016Z",
            "format": "date-time",
            "type": "string"
          },
          "creator_id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "custom_attributes": {
            "$ref": "#/components/schemas/API_Entities_CustomAttribute"
          },
          "default_branch": {
            "example": "main",
            "type": "string"
          },
          "description": {
            "example": "desc",
            "type": "string"
          },
          "description_html": {
            "type": "string"
          },
          "emails_disabled": {
            "type": "boolean"
          },
          "emails_enabled": {
            "type": "boolean"
          },
          "empty_repo": {
            "type": "boolean"
          },
          "enforce_auth_checks_on_uploads": {
            "type": "boolean"
          },
          "environments_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "external_authorization_classification_label": {
            "type": "string"
          },
          "feature_flags_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "forked_from_project": {
            "$ref": "#/components/schemas/API_Entities_BasicProjectDetails"
          },
          "forking_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "forks_count": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "group_runners_enabled": {
            "type": "boolean"
          },
          "http_url_to_repo": {
            "example": "https://gitlab.example.com/gitlab/gitlab.git",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "import_error": {
            "example": "Import error",
            "type": "string"
          },
          "import_status": {
            "example": "none",
            "type": "string"
          },
          "import_type": {
            "example": "git",
            "type": "string"
          },
          "import_url": {
            "example": "https://gitlab.com/gitlab/gitlab.git",
            "type": "string"
          },
          "infrastructure_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "issue_branch_template": {
            "example": "%(title)",
            "type": "string"
          },
          "issues_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "issues_enabled": {
            "type": "boolean"
          },
          "issues_template": {
            "type": "string"
          },
          "jobs_enabled": {
            "type": "boolean"
          },
          "keep_latest_artifact": {
            "type": "boolean"
          },
          "last_activity_at": {
            "example": "2013-09-30T13:46:02Z",
            "format": "date-time",
            "type": "string"
          },
          "lfs_enabled": {
            "type": "boolean"
          },
          "license": {
            "$ref": "#/components/schemas/API_Entities_LicenseBasic"
          },
          "license_url": {
            "example": "https://gitlab.example.com/gitlab/gitlab/blob/master/LICENCE",
            "type": "string"
          },
          "marked_for_deletion_at": {
            "type": "string"
          },
          "marked_for_deletion_on": {
            "type": "string"
          },
          "max_artifacts_size": {
            "format": "int32",
            "type": "integer"
          },
          "merge_commit_template": {
            "example": "%(title)",
            "type": "string"
          },
          "merge_method": {
            "example": "merge",
            "type": "string"
          },
          "merge_pipelines_enabled": {
            "type": "string"
          },
          "merge_requests_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "merge_requests_enabled": {
            "type": "boolean"
          },
          "merge_requests_template": {
            "type": "string"
          },
          "merge_trains_enabled": {
            "type": "string"
          },
          "merge_trains_skip_train_allowed": {
            "type": "string"
          },
          "mirror": {
            "type": "string"
          },
          "mirror_overwrites_diverged_branches": {
            "type": "string"
          },
          "mirror_trigger_builds": {
            "type": "string"
          },
          "mirror_user_id": {
            "type": "string"
          },
          "model_experiments_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "model_registry_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "monitor_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "mr_default_target_self": {
            "type": "boolean"
          },
          "name": {
            "example": "project1",
            "type": "string"
          },
          "name_with_namespace": {
            "example": "John Doe / project1",
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/API_Entities_NamespaceBasic"
          },
          "only_allow_merge_if_all_discussions_are_resolved": {
            "type": "boolean"
          },
          "only_allow_merge_if_all_status_checks_passed": {
            "type": "string"
          },
          "only_allow_merge_if_pipeline_succeeds": {
            "type": "boolean"
          },
          "only_mirror_protected_branches": {
            "type": "string"
          },
          "open_issues_count": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "owner": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "packages_enabled": {
            "type": "boolean"
          },
          "pages_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "path": {
            "example": "project1",
            "type": "string"
          },
          "path_with_namespace": {
            "example": "namespace1/project1",
            "type": "string"
          },
          "pre_receive_secret_detection_enabled": {
            "type": "boolean"
          },
          "prevent_merge_without_jira_issue": {
            "type": "string"
          },
          "printing_merge_request_link_enabled": {
            "type": "boolean"
          },
          "public_jobs": {
            "type": "boolean"
          },
          "readme_url": {
            "example": "https://gitlab.example.com/gitlab/gitlab/blob/master/README.md",
            "type": "string"
          },
          "releases_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "remove_source_branch_after_merge": {
            "type": "boolean"
          },
          "repository_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "repository_object_format": {
            "example": "sha1",
            "type": "string"
          },
          "repository_storage": {
            "example": "default",
            "type": "string"
          },
          "request_access_enabled": {
            "type": "boolean"
          },
          "requirements_access_level": {
            "type": "string"
          },
          "requirements_enabled": {
            "type": "string"
          },
          "resolve_outdated_diff_discussions": {
            "type": "boolean"
          },
          "restrict_user_defined_variables": {
            "type": "boolean"
          },
          "runner_token_expiration_interval": {
            "example": 3600,
            "format": "int32",
            "type": "integer"
          },
          "runners_token": {
            "example": "b8547b1dc37721d05889db52fa2f02",
            "type": "string"
          },
          "secret_push_protection_enabled": {
            "type": "boolean"
          },
          "security_and_compliance_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "security_and_compliance_enabled": {
            "type": "string"
          },
          "service_desk_address": {
            "example": "address@example.com",
            "type": "string"
          },
          "service_desk_enabled": {
            "type": "boolean"
          },
          "shared_runners_enabled": {
            "type": "boolean"
          },
          "shared_with_groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "snippets_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "snippets_enabled": {
            "type": "boolean"
          },
          "squash_commit_template": {
            "example": "%(source_branch)",
            "type": "string"
          },
          "squash_option": {
            "example": "default_off",
            "type": "string"
          },
          "ssh_url_to_repo": {
            "example": "git@gitlab.example.com:gitlab/gitlab.git",
            "type": "string"
          },
          "star_count": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "statistics": {
            "$ref": "#/components/schemas/API_Entities_ProjectStatistics"
          },
          "suggestion_commit_message": {
            "example": "Suggestion message",
            "type": "string"
          },
          "tag_list": {
            "example": "tag",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "topics": {
            "example": "topic",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "updated_at": {
            "example": "2020-05-07T04:27:17.016Z",
            "format": "date-time",
            "type": "string"
          },
          "visibility": {
            "example": "public",
            "type": "string"
          },
          "warn_about_potentially_unwanted_characters": {
            "type": "boolean"
          },
          "web_url": {
            "example": "https://gitlab.example.com/gitlab/gitlab",
            "type": "string"
          },
          "wiki_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "wiki_enabled": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "API_Entities_ProjectAccess": {
        "properties": {
          "access_level": {
            "type": "string"
          },
          "notification_level": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ProjectDailyFetches": {
        "properties": {
          "count": {
            "example": 3,
            "format": "int32",
            "type": "integer"
          },
          "date": {
            "example": "2022-01-01",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ProjectDailyStatistics": {
        "description": "API_Entities_ProjectDailyStatistics model",
        "properties": {
          "fetches": {
            "properties": {
              "days": {
                "items": {
                  "$ref": "#/components/schemas/API_Entities_ProjectDailyFetches"
                },
                "type": "array"
              },
              "total": {
                "example": 3,
                "format": "int32",
                "type": "integer"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "API_Entities_ProjectExportStatus": {
        "description": "API_Entities_ProjectExportStatus model",
        "properties": {
          "_links": {
            "properties": {
              "api_url": {
                "example": "https://gitlab.example.com/api/v4/projects/1/export/download",
                "type": "string"
              },
              "web_url": {
                "example": "https://gitlab.example.com/gitlab-org/gitlab-test/download_export",
                "type": "string"
              }
            },
            "type": "object"
          },
          "created_at": {
            "example": "2020-05-07T04:27:17.016Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "example": "desc",
            "type": "string"
          },
          "export_status": {
            "enum": [
              "queued",
              "started",
              "finished",
              "failed"
            ],
            "example": "finished",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "project1",
            "type": "string"
          },
          "name_with_namespace": {
            "example": "John Doe / project1",
            "type": "string"
          },
          "path": {
            "example": "project1",
            "type": "string"
          },
          "path_with_namespace": {
            "example": "namespace1/project1",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ProjectGroupLink": {
        "description": "API_Entities_ProjectGroupLink model",
        "properties": {
          "expires_at": {
            "example": "2016-09-26",
            "format": "date",
            "type": "string"
          },
          "group_access": {
            "example": 10,
            "format": "int32",
            "type": "integer"
          },
          "group_id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "member_role_id": {
            "example": 12,
            "format": "int32",
            "type": "integer"
          },
          "project_id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_ProjectHook": {
        "description": "API_Entities_ProjectHook model",
        "properties": {
          "alert_status": {
            "example": "executable",
            "type": "symbol"
          },
          "branch_filter_strategy": {
            "example": "wildcard",
            "type": "string"
          },
          "confidential_issues_events": {
            "type": "boolean"
          },
          "confidential_note_events": {
            "type": "boolean"
          },
          "created_at": {
            "example": "2012-05-28T04:42:42-07:00",
            "format": "date-time",
            "type": "string"
          },
          "custom_headers": {
            "example": {
              "X-Custom-Header": "value"
            },
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "custom_webhook_template": {
            "example": "{\"event\":\"{{object_kind}}\"}",
            "type": "string"
          },
          "deployment_events": {
            "type": "boolean"
          },
          "description": {
            "example": "Hook description",
            "type": "string"
          },
          "disabled_until": {
            "example": "2012-05-28T04:42:42-07:00",
            "format": "date-time",
            "type": "string"
          },
          "emoji_events": {
            "type": "boolean"
          },
          "enable_ssl_verification": {
            "type": "boolean"
          },
          "feature_flag_events": {
            "type": "boolean"
          },
          "id": {
            "example": 1,
            "type": "string"
          },
          "issues_events": {
            "type": "boolean"
          },
          "job_events": {
            "type": "boolean"
          },
          "merge_requests_events": {
            "type": "boolean"
          },
          "name": {
            "example": "Hook name",
            "type": "string"
          },
          "note_events": {
            "type": "boolean"
          },
          "pipeline_events": {
            "type": "boolean"
          },
          "project_id": {
            "example": 1,
            "type": "string"
          },
          "push_events": {
            "type": "boolean"
          },
          "push_events_branch_filter": {
            "example": "my-branch-*",
            "type": "string"
          },
          "releases_events": {
            "type": "boolean"
          },
          "repository_update_events": {
            "type": "boolean"
          },
          "resource_access_token_events": {
            "type": "boolean"
          },
          "tag_push_events": {
            "type": "boolean"
          },
          "url": {
            "example": "https://webhook.site",
            "type": "string"
          },
          "url_variables": {
            "example": {
              "token": "secr3t"
            },
            "items": {
              "type": "object"
            },
            "type": "array"
          },
          "vulnerability_events": {
            "type": "boolean"
          },
          "wiki_page_events": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "API_Entities_ProjectIdentity": {
        "properties": {
          "created_at": {
            "example": "2020-05-07T04:27:17.016Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "example": "desc",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "project1",
            "type": "string"
          },
          "name_with_namespace": {
            "example": "John Doe / project1",
            "type": "string"
          },
          "path": {
            "example": "project1",
            "type": "string"
          },
          "path_with_namespace": {
            "example": "namespace1/project1",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ProjectImportFailedRelation": {
        "properties": {
          "created_at": {
            "example": "2012-05-28T04:42:42-07:00",
            "format": "date-time",
            "type": "string"
          },
          "exception_class": {
            "example": "StandardError",
            "type": "string"
          },
          "exception_message": {
            "type": "string"
          },
          "id": {
            "example": 1,
            "type": "string"
          },
          "line_number": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "relation_name": {
            "example": "issues",
            "type": "string"
          },
          "source": {
            "example": "ImportRepositoryWorker",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ProjectImportStatus": {
        "description": "API_Entities_ProjectImportStatus model",
        "properties": {
          "correlation_id": {
            "example": "dfcf583058ed4508e4c7c617bd7f0edd",
            "type": "string"
          },
          "created_at": {
            "example": "2020-05-07T04:27:17.016Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "example": "desc",
            "type": "string"
          },
          "failed_relations": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_ProjectImportFailedRelation"
            },
            "type": "array"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "import_error": {
            "example": "Error message",
            "type": "string"
          },
          "import_status": {
            "example": "scheduled",
            "type": "string"
          },
          "import_type": {
            "example": "gitlab_project",
            "type": "string"
          },
          "name": {
            "example": "project1",
            "type": "string"
          },
          "name_with_namespace": {
            "example": "John Doe / project1",
            "type": "string"
          },
          "path": {
            "example": "project1",
            "type": "string"
          },
          "path_with_namespace": {
            "example": "namespace1/project1",
            "type": "string"
          },
          "stats": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "API_Entities_ProjectJobTokenScope": {
        "description": "API_Entities_ProjectJobTokenScope model",
        "properties": {
          "inbound_enabled": {
            "type": "boolean"
          },
          "outbound_enabled": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "API_Entities_ProjectRepositoryStorage": {
        "description": "API_Entities_ProjectRepositoryStorage model",
        "properties": {
          "created_at": {
            "example": "2012-10-12T17:04:47Z",
            "format": "date-time",
            "type": "string"
          },
          "disk_path": {
            "example": "@hashed/6b/86/6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b",
            "type": "string"
          },
          "project_id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "repository_storage": {
            "example": "default",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ProjectSnippet": {
        "description": "API_Entities_ProjectSnippet model",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "created_at": {
            "example": "2012-06-28T10:52:04Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "example": "Ruby test snippet",
            "type": "string"
          },
          "file_name": {
            "example": "add.rb",
            "type": "string"
          },
          "files": {
            "example": "e0d123e5f316bef78bfdf5a008837577",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "http_url_to_repo": {
            "example": "https://gitlab.example.com/snippets/65.git",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "imported": {
            "example": false,
            "type": "boolean"
          },
          "imported_from": {
            "example": "none",
            "type": "string"
          },
          "project_id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "raw_url": {
            "example": "http://example.com/example/example/snippets/1/raw",
            "type": "string"
          },
          "repository_storage": {
            "type": "string"
          },
          "ssh_url_to_repo": {
            "example": "ssh://user@gitlab.example.com/snippets/65.git",
            "type": "string"
          },
          "title": {
            "example": "test",
            "type": "string"
          },
          "updated_at": {
            "example": "2012-06-28T10:52:04Z",
            "format": "date-time",
            "type": "string"
          },
          "visibility": {
            "example": "public",
            "type": "string"
          },
          "web_url": {
            "example": "http://example.com/example/example/snippets/1",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ProjectStatistics": {
        "properties": {
          "commit_count": {
            "type": "string"
          },
          "container_registry_size": {
            "type": "string"
          },
          "job_artifacts_size": {
            "type": "string"
          },
          "lfs_objects_size": {
            "type": "string"
          },
          "packages_size": {
            "type": "string"
          },
          "pipeline_artifacts_size": {
            "type": "string"
          },
          "repository_size": {
            "type": "string"
          },
          "snippets_size": {
            "type": "string"
          },
          "storage_size": {
            "type": "string"
          },
          "uploads_size": {
            "type": "string"
          },
          "wiki_size": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ProjectUpload": {
        "description": "API_Entities_ProjectUpload model",
        "properties": {
          "alt": {
            "type": "string"
          },
          "full_path": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "markdown": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ProjectWithAccess": {
        "additionalProperties": false,
        "description": "API_Entities_ProjectWithAccess model",
        "properties": {
          "_links": {
            "properties": {
              "cluster_agents": {
                "example": "https://gitlab.example.com/api/v4/projects/4/cluster_agents",
                "type": "string"
              },
              "events": {
                "example": "https://gitlab.example.com/api/v4/projects/4/events",
                "type": "string"
              },
              "issues": {
                "example": "https://gitlab.example.com/api/v4/projects/4/issues",
                "type": "string"
              },
              "labels": {
                "example": "https://gitlab.example.com/api/v4/projects/4/labels",
                "type": "string"
              },
              "members": {
                "example": "https://gitlab.example.com/api/v4/projects/4/members",
                "type": "string"
              },
              "merge_requests": {
                "example": "https://gitlab.example.com/api/v4/projects/4/merge_requests",
                "type": "string"
              },
              "repo_branches": {
                "example": "https://gitlab.example.com/api/v4/projects/4/repository/branches",
                "type": "string"
              },
              "self": {
                "example": "https://gitlab.example.com/api/v4/projects/4",
                "type": "string"
              }
            },
            "type": "object"
          },
          "allow_merge_on_skipped_pipeline": {
            "type": "boolean"
          },
          "allow_pipeline_trigger_approve_deployment": {
            "type": "boolean"
          },
          "analytics_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "approvals_before_merge": {
            "type": "string"
          },
          "archived": {
            "type": "boolean"
          },
          "auto_cancel_pending_pipelines": {
            "example": "enabled",
            "type": "string"
          },
          "auto_devops_deploy_strategy": {
            "example": "continuous",
            "type": "string"
          },
          "auto_devops_enabled": {
            "type": "boolean"
          },
          "autoclose_referenced_issues": {
            "type": "boolean"
          },
          "avatar_url": {
            "example": "http://example.com/uploads/project/avatar/3/uploads/avatar.png",
            "type": "string"
          },
          "build_git_strategy": {
            "example": "fetch",
            "type": "string"
          },
          "build_timeout": {
            "example": 3600,
            "format": "int32",
            "type": "integer"
          },
          "builds_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "can_create_merge_request_in": {
            "type": "boolean"
          },
          "ci_allow_fork_pipelines_to_run_in_parent_project": {
            "type": "boolean"
          },
          "ci_config_path": {
            "example": "",
            "type": "string"
          },
          "ci_default_git_depth": {
            "example": 20,
            "format": "int32",
            "type": "integer"
          },
          "ci_delete_pipelines_in_seconds": {
            "example": 86400,
            "format": "int32",
            "type": "integer"
          },
          "ci_forward_deployment_enabled": {
            "type": "boolean"
          },
          "ci_forward_deployment_rollback_allowed": {
            "type": "boolean"
          },
          "ci_id_token_sub_claim_components": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ci_job_token_scope_enabled": {
            "type": "boolean"
          },
          "ci_pipeline_variables_minimum_override_role": {
            "type": "string"
          },
          "ci_push_repository_for_job_token_allowed": {
            "type": "boolean"
          },
          "ci_restrict_pipeline_cancellation_role": {
            "type": "string"
          },
          "ci_separated_caches": {
            "type": "boolean"
          },
          "compliance_frameworks": {
            "type": null
          },
          "container_expiration_policy": {
            "type": null
          },
          "container_registry_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "container_registry_enabled": {
            "type": "boolean"
          },
          "container_registry_image_prefix": {
            "example": "registry.gitlab.example.com/gitlab/gitlab-client",
            "type": "string"
          },
          "created_at": {
            "example": "2020-05-07T04:27:17.016Z",
            "format": "date-time",
            "type": "string"
          },
          "creator_id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "custom_attributes": {
            "type": null
          },
          "default_branch": {
            "example": "main",
            "type": "string"
          },
          "description": {
            "example": "desc",
            "type": "string"
          },
          "description_html": {
            "type": "string"
          },
          "emails_disabled": {
            "type": "boolean"
          },
          "emails_enabled": {
            "type": "boolean"
          },
          "empty_repo": {
            "type": "boolean"
          },
          "enforce_auth_checks_on_uploads": {
            "type": "boolean"
          },
          "environments_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "external_authorization_classification_label": {
            "type": "string"
          },
          "feature_flags_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "forked_from_project": {
            "type": null
          },
          "forking_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "forks_count": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "group_runners_enabled": {
            "type": "boolean"
          },
          "http_url_to_repo": {
            "example": "https://gitlab.example.com/gitlab/gitlab.git",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "import_error": {
            "example": "Import error",
            "type": "string"
          },
          "import_status": {
            "example": "none",
            "type": "string"
          },
          "import_type": {
            "example": "git",
            "type": "string"
          },
          "import_url": {
            "example": "https://gitlab.com/gitlab/gitlab.git",
            "type": "string"
          },
          "infrastructure_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "issue_branch_template": {
            "example": "%(title)",
            "type": "string"
          },
          "issues_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "issues_enabled": {
            "type": "boolean"
          },
          "issues_template": {
            "type": "string"
          },
          "jobs_enabled": {
            "type": "boolean"
          },
          "keep_latest_artifact": {
            "type": "boolean"
          },
          "last_activity_at": {
            "example": "2013-09-30T13:46:02Z",
            "format": "date-time",
            "type": "string"
          },
          "lfs_enabled": {
            "type": "boolean"
          },
          "license": {
            "$ref": "#/components/schemas/API_Entities_LicenseBasic"
          },
          "license_url": {
            "example": "https://gitlab.example.com/gitlab/gitlab/blob/master/LICENCE",
            "type": "string"
          },
          "marked_for_deletion_at": {
            "type": "string"
          },
          "marked_for_deletion_on": {
            "type": "string"
          },
          "max_artifacts_size": {
            "format": "int32",
            "type": "integer"
          },
          "merge_commit_template": {
            "example": "%(title)",
            "type": "string"
          },
          "merge_method": {
            "example": "merge",
            "type": "string"
          },
          "merge_pipelines_enabled": {
            "type": "string"
          },
          "merge_requests_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "merge_requests_enabled": {
            "type": "boolean"
          },
          "merge_requests_template": {
            "type": "string"
          },
          "merge_trains_enabled": {
            "type": "string"
          },
          "merge_trains_skip_train_allowed": {
            "type": "string"
          },
          "mirror": {
            "type": "string"
          },
          "mirror_overwrites_diverged_branches": {
            "type": "string"
          },
          "mirror_trigger_builds": {
            "type": "string"
          },
          "mirror_user_id": {
            "type": "string"
          },
          "model_experiments_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "model_registry_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "monitor_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "mr_default_target_self": {
            "type": "boolean"
          },
          "name": {
            "example": "project1",
            "type": "string"
          },
          "name_with_namespace": {
            "example": "John Doe / project1",
            "type": "string"
          },
          "namespace": {
            "$ref": "#/components/schemas/API_Entities_NamespaceBasic"
          },
          "only_allow_merge_if_all_discussions_are_resolved": {
            "type": "boolean"
          },
          "only_allow_merge_if_all_status_checks_passed": {
            "type": "boolean"
          },
          "only_allow_merge_if_pipeline_succeeds": {
            "type": "boolean"
          },
          "only_mirror_protected_branches": {
            "type": "string"
          },
          "open_issues_count": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "owner": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "packages_enabled": {
            "type": "boolean"
          },
          "pages_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "path": {
            "example": "project1",
            "type": "string"
          },
          "path_with_namespace": {
            "example": "namespace1/project1",
            "type": "string"
          },
          "permissions": {
            "properties": {
              "group_access": {
                "$ref": "#/components/schemas/API_Entities_GroupAccess"
              },
              "project_access": {
                "$ref": "#/components/schemas/API_Entities_ProjectAccess"
              }
            },
            "type": "object"
          },
          "pre_receive_secret_detection_enabled": {
            "type": "boolean"
          },
          "prevent_merge_without_jira_issue": {
            "type": "string"
          },
          "printing_merge_request_link_enabled": {
            "type": "boolean"
          },
          "public_jobs": {
            "type": "boolean"
          },
          "readme_url": {
            "example": "https://gitlab.example.com/gitlab/gitlab/blob/master/README.md",
            "type": "string"
          },
          "releases_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "remove_source_branch_after_merge": {
            "type": "boolean"
          },
          "repository_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "repository_object_format": {
            "example": "sha1",
            "type": "string"
          },
          "repository_storage": {
            "example": "default",
            "type": "string"
          },
          "request_access_enabled": {
            "type": "boolean"
          },
          "requirements_access_level": {
            "type": "string"
          },
          "requirements_enabled": {
            "type": "boolean"
          },
          "resolve_outdated_diff_discussions": {
            "type": "boolean"
          },
          "restrict_user_defined_variables": {
            "type": "boolean"
          },
          "runner_token_expiration_interval": {
            "example": 3600,
            "format": "int32",
            "type": "integer"
          },
          "runners_token": {
            "example": "b8547b1dc37721d05889db52fa2f02",
            "type": "string"
          },
          "secret_push_protection_enabled": {
            "type": "boolean"
          },
          "security_and_compliance_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "security_and_compliance_enabled": {
            "type": "boolean"
          },
          "service_desk_address": {
            "example": "address@example.com",
            "type": "string"
          },
          "service_desk_enabled": {
            "type": "boolean"
          },
          "shared_runners_enabled": {
            "type": "boolean"
          },
          "shared_with_groups": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "snippets_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "snippets_enabled": {
            "type": "boolean"
          },
          "squash_commit_template": {
            "example": "%(source_branch)",
            "type": "string"
          },
          "squash_option": {
            "example": "default_off",
            "type": "string"
          },
          "ssh_url_to_repo": {
            "example": "git@gitlab.example.com:gitlab/gitlab.git",
            "type": "string"
          },
          "star_count": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "statistics": {
            "$ref": "#/components/schemas/API_Entities_ProjectStatistics"
          },
          "suggestion_commit_message": {
            "example": "Suggestion message",
            "type": "string"
          },
          "tag_list": {
            "example": "tag",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "topics": {
            "example": "topic",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "updated_at": {
            "example": "2020-05-07T04:27:17.016Z",
            "format": "date-time",
            "type": "string"
          },
          "visibility": {
            "example": "public",
            "type": "string"
          },
          "warn_about_potentially_unwanted_characters": {
            "type": "boolean"
          },
          "web_url": {
            "example": "https://gitlab.example.com/gitlab/gitlab",
            "type": "string"
          },
          "wiki_access_level": {
            "example": "enabled",
            "type": "string"
          },
          "wiki_enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "default_branch",
          "id",
          "path_with_namespace"
        ],
        "type": "object"
      },
      "API_Entities_Projects_ContainerRegistry_Protection_Rule": {
        "description": "API_Entities_Projects_ContainerRegistry_Protection_Rule model",
        "properties": {
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "minimum_access_level_for_delete": {
            "example": "maintainer",
            "type": "string"
          },
          "minimum_access_level_for_push": {
            "example": "maintainer",
            "type": "string"
          },
          "project_id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "repository_path_pattern": {
            "example": "flightjs/flight0",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Projects_Packages_Protection_Rule": {
        "description": "API_Entities_Projects_Packages_Protection_Rule model",
        "properties": {
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "minimum_access_level_for_push": {
            "example": "maintainer",
            "type": "string"
          },
          "package_name_pattern": {
            "example": "flightjs/flight",
            "type": "string"
          },
          "package_type": {
            "example": "npm",
            "type": "string"
          },
          "project_id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_Projects_RepositoryStorageMove": {
        "description": "API_Entities_Projects_RepositoryStorageMove model",
        "properties": {
          "created_at": {
            "example": "2020-05-07T04:27:17.234Z",
            "format": "date-time",
            "type": "string"
          },
          "destination_storage_name": {
            "example": "storage1",
            "type": "string"
          },
          "error_message": {
            "example": "Failed to move repository",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "project": {
            "$ref": "#/components/schemas/API_Entities_ProjectIdentity"
          },
          "source_storage_name": {
            "example": "default",
            "type": "string"
          },
          "state": {
            "example": "scheduled",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ProtectedBranch": {
        "description": "API_Entities_ProtectedBranch model",
        "properties": {
          "allow_force_push": {
            "type": "boolean"
          },
          "code_owner_approval_required": {
            "type": "boolean"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "inherited": {
            "type": "boolean"
          },
          "merge_access_levels": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_ProtectedRefAccess"
            },
            "type": "array"
          },
          "name": {
            "example": "main",
            "type": "string"
          },
          "push_access_levels": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_ProtectedRefAccess"
            },
            "type": "array"
          },
          "unprotect_access_levels": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_ProtectedRefAccess"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "API_Entities_ProtectedEnvironments_ApprovalRuleForSummary": {
        "properties": {
          "access_level": {
            "type": "string"
          },
          "access_level_description": {
            "type": "string"
          },
          "deployment_approvals": {
            "$ref": "#/components/schemas/API_Entities_Deployments_Approval"
          },
          "group_id": {
            "type": "string"
          },
          "group_inheritance_type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "required_approvals": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ProtectedRefAccess": {
        "properties": {
          "access_level": {
            "example": 40,
            "format": "int32",
            "type": "integer"
          },
          "access_level_description": {
            "example": "Maintainers",
            "type": "string"
          },
          "deploy_key_id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "group_id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "user_id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_ProtectedTag": {
        "description": "API_Entities_ProtectedTag model",
        "properties": {
          "create_access_levels": {
            "$ref": "#/components/schemas/API_Entities_ProtectedRefAccess"
          },
          "name": {
            "example": "release-1-0",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Provider_Gcp": {
        "properties": {
          "cluster_id": {
            "type": "string"
          },
          "endpoint": {
            "type": "string"
          },
          "gcp_project_id": {
            "type": "string"
          },
          "machine_type": {
            "type": "string"
          },
          "num_nodes": {
            "type": "string"
          },
          "status_name": {
            "type": "string"
          },
          "zone": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_PublicGroupDetails": {
        "description": "API_Entities_PublicGroupDetails model",
        "properties": {
          "avatar_url": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "full_path": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "web_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_PushEventPayload": {
        "properties": {
          "action": {
            "example": "pushed",
            "type": "string"
          },
          "commit_count": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "commit_from": {
            "example": "50d4420237a9de7be1304607147aec22e4a14af7",
            "type": "string"
          },
          "commit_title": {
            "example": "Add simple search to projects in public area",
            "type": "string"
          },
          "commit_to": {
            "example": "c5feabde2d8cd023215af4d2ceeb7a64839fc428",
            "type": "string"
          },
          "ref": {
            "example": "master",
            "type": "string"
          },
          "ref_count": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "ref_type": {
            "example": "branch",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_RelatedIssue": {
        "description": "API_Entities_RelatedIssue model",
        "properties": {
          "_links": {
            "properties": {
              "award_emoji": {
                "type": "string"
              },
              "closed_as_duplicate_of": {
                "type": "string"
              },
              "notes": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "self": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "assignee": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "assignees": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "author": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "blocking_issues_count": {
            "type": "string"
          },
          "closed_at": {
            "example": "2022-11-15T08:30:55.232Z",
            "format": "date-time",
            "type": "string"
          },
          "closed_by": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "confidential": {
            "type": "boolean"
          },
          "created_at": {
            "example": "2022-08-17T12:46:35.053Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "example": "Repellendus impedit et vel velit dignissimos.",
            "type": "string"
          },
          "discussion_locked": {
            "type": "boolean"
          },
          "downvotes": {
            "type": "string"
          },
          "due_date": {
            "example": "2022-11-20",
            "format": "date",
            "type": "string"
          },
          "epic": {
            "$ref": "#/components/schemas/EpicBaseEntity"
          },
          "epic_iid": {
            "type": "string"
          },
          "has_tasks": {
            "type": "string"
          },
          "health_status": {
            "type": "string"
          },
          "id": {
            "example": 84,
            "format": "int32",
            "type": "integer"
          },
          "iid": {
            "example": 14,
            "format": "int32",
            "type": "integer"
          },
          "imported": {
            "type": "string"
          },
          "imported_from": {
            "example": "github",
            "type": "string"
          },
          "issue_link_id": {
            "type": "string"
          },
          "issue_type": {
            "example": "issue",
            "type": "string"
          },
          "iteration": {
            "$ref": "#/components/schemas/API_Entities_Iteration"
          },
          "labels": {
            "example": "bug",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "link_created_at": {
            "type": "string"
          },
          "link_type": {
            "type": "string"
          },
          "link_updated_at": {
            "type": "string"
          },
          "merge_requests_count": {
            "type": "string"
          },
          "milestone": {
            "$ref": "#/components/schemas/API_Entities_Milestone"
          },
          "moved_to_id": {
            "type": "string"
          },
          "project_id": {
            "example": 4,
            "format": "int32",
            "type": "integer"
          },
          "references": {
            "$ref": "#/components/schemas/API_Entities_IssuableReferences"
          },
          "service_desk_reply_to": {
            "type": "string"
          },
          "severity": {
            "description": "One of [\"UNKNOWN\", \"LOW\", \"MEDIUM\", \"HIGH\", \"CRITICAL\"]",
            "type": "string"
          },
          "state": {
            "example": "closed",
            "type": "string"
          },
          "subscribed": {
            "type": "string"
          },
          "task_completion_status": {
            "type": "string"
          },
          "task_status": {
            "type": "string"
          },
          "time_stats": {
            "$ref": "#/components/schemas/API_Entities_IssuableTimeStats"
          },
          "title": {
            "example": "Impedit et ut et dolores vero provident ullam est",
            "type": "string"
          },
          "type": {
            "description": "One of [\"ISSUE\", \"INCIDENT\", \"TEST_CASE\", \"REQUIREMENT\", \"TASK\", \"TICKET\"]",
            "example": "ISSUE",
            "type": "string"
          },
          "updated_at": {
            "example": "2022-11-14T17:22:01.470Z",
            "format": "date-time",
            "type": "string"
          },
          "upvotes": {
            "type": "string"
          },
          "user_notes_count": {
            "type": "string"
          },
          "web_url": {
            "example": "http://example.com/example/example/issues/14",
            "type": "string"
          },
          "weight": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_RelationImportTracker": {
        "description": "API_Entities_RelationImportTracker model",
        "properties": {
          "created_at": {
            "example": "2022-01-31T15:10:45.080Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "project_path": {
            "example": "namespace1/project1",
            "type": "string"
          },
          "relation": {
            "example": "issues",
            "type": "string"
          },
          "status": {
            "example": "pending",
            "type": "string"
          },
          "updated_at": {
            "example": "2022-01-31T15:10:45.080Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Release": {
        "description": "API_Entities_Release model",
        "properties": {
          "_links": {
            "properties": {
              "closed_issues_url": {
                "type": "string"
              },
              "closed_merge_requests_url": {
                "type": "string"
              },
              "edit_url": {
                "type": "string"
              },
              "merged_merge_requests_url": {
                "type": "string"
              },
              "opened_issues_url": {
                "type": "string"
              },
              "opened_merge_requests_url": {
                "type": "string"
              },
              "self": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "assets": {
            "properties": {
              "count": {
                "example": 2,
                "format": "int32",
                "type": "integer"
              },
              "links": {
                "$ref": "#/components/schemas/API_Entities_Releases_Link"
              },
              "sources": {
                "$ref": "#/components/schemas/API_Entities_Releases_Source"
              }
            },
            "type": "object"
          },
          "author": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "commit": {
            "$ref": "#/components/schemas/API_Entities_Commit"
          },
          "commit_path": {
            "example": "/root/app/commit/588440f66559714280628a4f9799f0c4eb880a4a",
            "type": "string"
          },
          "created_at": {
            "example": "2019-01-03T01:56:19.539Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "example": "Finally released v1.0",
            "type": "string"
          },
          "description_html": {
            "type": "string"
          },
          "evidences": {
            "$ref": "#/components/schemas/API_Entities_Releases_Evidence"
          },
          "milestones": {
            "$ref": "#/components/schemas/API_Entities_MilestoneWithStats"
          },
          "name": {
            "example": "Release v1.0",
            "type": "string"
          },
          "released_at": {
            "example": "2019-01-03T01:56:19.539Z",
            "format": "date-time",
            "type": "string"
          },
          "tag_name": {
            "example": "v1.0",
            "type": "string"
          },
          "tag_path": {
            "example": "/root/app/-/tags/v1.0",
            "type": "string"
          },
          "upcoming_release": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "API_Entities_Releases_Evidence": {
        "properties": {
          "collected_at": {
            "example": "2019-01-03T01:56:19.539Z",
            "format": "date-time",
            "type": "string"
          },
          "filepath": {
            "example": "https://gitlab.example.com/root/app/-/releases/v1.0/evidence.json",
            "type": "string"
          },
          "sha": {
            "example": "760d6cdfb0879c3ffedec13af470e0f71cf52c6cde4d",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Releases_Link": {
        "description": "API_Entities_Releases_Link model",
        "properties": {
          "direct_asset_url": {
            "example": "https://gitlab.example.com/root/app/-/releases/v1.0/downloads/app-v1.0.dmg",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "link_type": {
            "example": "other",
            "type": "string"
          },
          "name": {
            "example": "app-v1.0.dmg",
            "type": "string"
          },
          "url": {
            "example": "https://gitlab.example.com/root/app/-/jobs/688/artifacts/raw/bin/app-v1.0.dmg",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Releases_Source": {
        "properties": {
          "format": {
            "example": "zip",
            "type": "string"
          },
          "url": {
            "example": "https://gitlab.example.com/root/app/-/archive/v1.0/app-v1.0.zip",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_RemoteMirror": {
        "description": "API_Entities_RemoteMirror model",
        "properties": {
          "auth_method": {
            "example": "password",
            "type": "string"
          },
          "enabled": {
            "example": true,
            "type": "boolean"
          },
          "id": {
            "example": 101486,
            "format": "int32",
            "type": "integer"
          },
          "keep_divergent_refs": {
            "type": "boolean"
          },
          "last_error": {
            "example": "The remote mirror URL is invalid.",
            "format": "int32",
            "type": "integer"
          },
          "last_successful_update_at": {
            "example": "2020-01-06T17:31:55.864Z",
            "format": "date-time",
            "type": "string"
          },
          "last_update_at": {
            "example": "2020-01-06T17:32:02.823Z",
            "format": "date-time",
            "type": "string"
          },
          "last_update_started_at": {
            "example": "2020-01-06T17:32:02.823Z",
            "format": "date-time",
            "type": "string"
          },
          "mirror_branch_regex": {
            "type": "string"
          },
          "only_protected_branches": {
            "type": "boolean"
          },
          "update_status": {
            "example": "finished",
            "type": "string"
          },
          "url": {
            "example": "https://*****:*****@example.com/gitlab/example.git",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ResourceAccessToken": {
        "description": "API_Entities_ResourceAccessToken model",
        "properties": {
          "access_level": {
            "enum": [
              10,
              20,
              30,
              40,
              50
            ],
            "example": 40,
            "format": "int32",
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "example": "Token to manage api",
            "type": "string"
          },
          "expires_at": {
            "example": "2020-08-31T15:53:00.073Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "last_used_at": {
            "example": "2020-08-31T15:53:00.073Z",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "example": "John Doe",
            "type": "string"
          },
          "resource_id": {
            "example": 1234,
            "format": "int32",
            "type": "integer"
          },
          "resource_type": {
            "enum": [
              "project",
              "group"
            ],
            "example": "project",
            "type": "string"
          },
          "revoked": {
            "type": "boolean"
          },
          "scopes": {
            "example": [
              "api"
            ],
            "type": "array"
          },
          "user_id": {
            "example": 3,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_ResourceAccessTokenWithToken": {
        "description": "API_Entities_ResourceAccessTokenWithToken model",
        "properties": {
          "access_level": {
            "enum": [
              10,
              20,
              30,
              40,
              50
            ],
            "example": 40,
            "format": "int32",
            "type": "integer"
          },
          "active": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "example": "Token to manage api",
            "type": "string"
          },
          "expires_at": {
            "example": "2020-08-31T15:53:00.073Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "last_used_at": {
            "example": "2020-08-31T15:53:00.073Z",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "example": "John Doe",
            "type": "string"
          },
          "resource_id": {
            "example": 1234,
            "format": "int32",
            "type": "integer"
          },
          "resource_type": {
            "enum": [
              "project",
              "group"
            ],
            "example": "project",
            "type": "string"
          },
          "revoked": {
            "type": "boolean"
          },
          "scopes": {
            "example": [
              "api"
            ],
            "type": "array"
          },
          "token": {
            "type": "string"
          },
          "user_id": {
            "example": 3,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_ResourceMilestoneEvent": {
        "description": "API_Entities_ResourceMilestoneEvent model",
        "properties": {
          "action": {
            "example": "add",
            "type": "string"
          },
          "created_at": {
            "example": "2018-08-20T13:38:20.077Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 142,
            "format": "int32",
            "type": "integer"
          },
          "milestone": {
            "$ref": "#/components/schemas/API_Entities_Milestone"
          },
          "resource_id": {
            "example": 253,
            "format": "int32",
            "type": "integer"
          },
          "resource_type": {
            "example": "Issue",
            "type": "string"
          },
          "state": {
            "example": "active",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          }
        },
        "type": "object"
      },
      "API_Entities_SSHKey": {
        "description": "API_Entities_SSHKey model",
        "properties": {
          "created_at": {
            "example": "2015-09-03T07:24:44.627Z",
            "format": "date-time",
            "type": "string"
          },
          "expires_at": {
            "example": "2020-09-03T07:24:44.627Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "key": {
            "example": "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAIEAiPWx6WM4lhHNedGfBpPJNPpZ7yKu+dnn1SJejgt1256k6Yjz\\\n      GGphH2TUxwKzxcKDKKezwkpfnxPkSMkuEspGRt/aZZ9wa++Oi7Qkr8prgHc4soW6NUlfDzpvZK2H5E7eQaSeP3SAwGmQKUFHCdd\\\n      NaP0L+hM7zhFNzjFvpaMgJw0=",
            "type": "string"
          },
          "title": {
            "example": "Sample key 25",
            "type": "string"
          },
          "usage_type": {
            "example": "auth",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_ScimIdentity": {
        "properties": {
          "active": {
            "type": "string"
          },
          "extern_uid": {
            "type": "string"
          },
          "group_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_Tag": {
        "description": "API_Entities_Tag model",
        "properties": {
          "commit": {
            "$ref": "#/components/schemas/API_Entities_Commit"
          },
          "created_at": {
            "example": "2023-10-12T02:16:52.000Z",
            "format": "date-time",
            "type": "string"
          },
          "message": {
            "example": "Release v1.0.0",
            "type": "string"
          },
          "name": {
            "example": "v1.0.0",
            "type": "string"
          },
          "protected": {
            "example": true,
            "type": "boolean"
          },
          "release": {
            "$ref": "#/components/schemas/API_Entities_TagRelease"
          },
          "target": {
            "example": "2695effb5807a22ff3d138d593fd856244e155e7",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_TagRelease": {
        "properties": {
          "description": {
            "example": "Amazing release. Wow",
            "type": "string"
          },
          "tag_name": {
            "example": "1.0.0",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_TagSignature": {
        "description": "API_Entities_TagSignature model",
        "properties": {
          "signature": {
            "type": "string"
          },
          "signature_type": {
            "example": "PGP",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_TemplatesList": {
        "description": "API_Entities_TemplatesList model",
        "properties": {
          "key": {
            "example": "mit",
            "type": "string"
          },
          "name": {
            "example": "MIT License",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_TreeObject": {
        "additionalProperties": false,
        "description": "API_Entities_TreeObject model",
        "properties": {
          "id": {
            "example": "a1e8f8d745cc87e3a9248358d9352bb7f9a0aeba",
            "type": "string"
          },
          "mode": {
            "example": "040000",
            "type": "string"
          },
          "name": {
            "example": "html",
            "type": "string"
          },
          "path": {
            "example": "files/html",
            "type": "string"
          },
          "type": {
            "example": "tree",
            "type": "string"
          }
        },
        "required": [
          "id",
          "mode",
          "name",
          "path",
          "type"
        ],
        "type": "object"
      },
      "API_Entities_Trigger": {
        "applicationProperties": false,
        "description": "API_Entities_Trigger model",
        "properties": {
          "created_at": {
            "example": "2015-12-24T15:51:21.880Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "example": "test",
            "type": "string"
          },
          "expires_at": {
            "example": "2015-12-24T17:54:31.198Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 10,
            "format": "int32",
            "type": "integer"
          },
          "last_used": {
            "example": "2015-12-24T17:54:31.198Z",
            "format": "date-time",
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "token": {
            "example": "6d056f63e50fe6f8c5f8f4aa10edb7",
            "type": "string"
          },
          "updated_at": {
            "example": "2015-12-24T17:54:31.198Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_User": {
        "description": "API_Entities_User model",
        "properties": {
          "avatar_path": {
            "example": "/user/avatar/28/The-Big-Lebowski-400-400.png",
            "type": "string"
          },
          "avatar_url": {
            "example": "https://gravatar.com/avatar/1",
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "bot": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "custom_attributes": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_CustomAttribute"
            },
            "type": "array"
          },
          "discord": {
            "type": "string"
          },
          "followers": {
            "type": "string"
          },
          "following": {
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "is_followed": {
            "type": "string"
          },
          "job_title": {
            "type": "string"
          },
          "linkedin": {
            "type": "string"
          },
          "local_time": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "name": {
            "example": "Administrator",
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "pronouns": {
            "type": "string"
          },
          "public_email": {
            "type": "string"
          },
          "skype": {
            "type": "string"
          },
          "state": {
            "example": "active",
            "type": "string"
          },
          "twitter": {
            "type": "string"
          },
          "username": {
            "example": "admin",
            "type": "string"
          },
          "web_url": {
            "example": "https://gitlab.example.com/root",
            "type": "string"
          },
          "website_url": {
            "type": "string"
          },
          "work_information": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_UserAgentDetail": {
        "description": "API_Entities_UserAgentDetail model",
        "properties": {
          "akismet_submitted": {
            "example": false,
            "type": "boolean"
          },
          "ip_address": {
            "example": "127.0.0.1",
            "type": "string"
          },
          "user_agent": {
            "example": "AppleWebKit/537.36",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_UserBasic": {
        "additionalProperties": false,
        "description": "API_Entities_UserBasic model",
        "properties": {
          "avatar_path": {
            "example": "/user/avatar/28/The-Big-Lebowski-400-400.png",
            "type": "string"
          },
          "avatar_url": {
            "example": "https://gravatar.com/avatar/1",
            "type": "string"
          },
          "custom_attributes": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_CustomAttribute"
            },
            "type": "array"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "locked": {
            "type": "boolean"
          },
          "name": {
            "example": "Administrator",
            "type": "string"
          },
          "state": {
            "example": "active",
            "type": "string"
          },
          "username": {
            "example": "admin",
            "type": "string"
          },
          "web_url": {
            "example": "https://gitlab.example.com/root",
            "type": "string"
          }
        },
        "required": [
          "detailed_merge_status",
          "id",
          "state",
          "username"
        ],
        "type": "object"
      },
      "API_Entities_UserCounts": {
        "description": "API_Entities_UserCounts model",
        "properties": {
          "assigned_issues": {
            "example": 10,
            "format": "int32",
            "type": "integer"
          },
          "assigned_merge_requests": {
            "example": 10,
            "format": "int32",
            "type": "integer"
          },
          "merge_requests": {
            "example": 10,
            "format": "int32",
            "type": "integer"
          },
          "review_requested_merge_requests": {
            "example": 10,
            "format": "int32",
            "type": "integer"
          },
          "todos": {
            "example": 10,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "API_Entities_UserCreditCardValidations": {
        "description": "API_Entities_UserCreditCardValidations model",
        "properties": {
          "credit_card_validated_at": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_UserPreferences": {
        "description": "API_Entities_UserPreferences model",
        "properties": {
          "id": {
            "type": "string"
          },
          "pass_user_identities_to_ci_jwt": {
            "type": "string"
          },
          "show_whitespace_in_diffs": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "view_diffs_file_by_file": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_UserPublic": {
        "additionalProperties": false,
        "description": "API_Entities_UserPublic model",
        "properties": {
          "avatar_path": {
            "example": "/user/avatar/28/The-Big-Lebowski-400-400.png",
            "type": "string"
          },
          "avatar_url": {
            "example": "https://gravatar.com/avatar/1",
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "bot": {
            "type": "boolean"
          },
          "can_create_group": {
            "example": true,
            "type": "boolean"
          },
          "can_create_project": {
            "example": true,
            "type": "boolean"
          },
          "color_scheme_id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "commit_email": {
            "type": "string"
          },
          "confirmed_at": {
            "example": "2015-09-03T07:24:01.670Z",
            "format": "date-time",
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "current_sign_in_at": {
            "example": "2015-09-03T07:24:01.670Z",
            "format": "date-time",
            "type": "string"
          },
          "custom_attributes": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_CustomAttribute"
            },
            "type": "array"
          },
          "discord": {
            "type": "string"
          },
          "email": {
            "example": "john@example.com",
            "type": "string"
          },
          "external": {
            "type": "boolean"
          },
          "extra_shared_runners_minutes_limit": {
            "type": "string"
          },
          "followers": {
            "type": "string"
          },
          "following": {
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "identities": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_Identity"
            },
            "type": "array"
          },
          "is_followed": {
            "type": "string"
          },
          "job_title": {
            "type": "string"
          },
          "last_activity_on": {
            "example": "2015-09-03T07:24:01.670Z",
            "format": "date-time",
            "type": "string"
          },
          "last_sign_in_at": {
            "example": "2015-09-03T07:24:01.670Z",
            "format": "date-time",
            "type": "string"
          },
          "linkedin": {
            "type": "string"
          },
          "local_time": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "name": {
            "example": "Administrator",
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "private_profile": {
            "example": "null",
            "type": "boolean"
          },
          "projects_limit": {
            "example": 10,
            "format": "int32",
            "type": "integer"
          },
          "pronouns": {
            "type": "string"
          },
          "public_email": {
            "type": "string"
          },
          "scim_identities": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_ScimIdentity"
            },
            "type": "array"
          },
          "shared_runners_minutes_limit": {
            "type": "string"
          },
          "skype": {
            "type": "string"
          },
          "state": {
            "example": "active",
            "type": "string"
          },
          "theme_id": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "twitter": {
            "type": "string"
          },
          "two_factor_enabled": {
            "example": true,
            "type": "boolean"
          },
          "username": {
            "example": "admin",
            "type": "string"
          },
          "web_url": {
            "example": "https://gitlab.example.com/root",
            "type": "string"
          },
          "website_url": {
            "type": "string"
          },
          "work_information": {
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "id",
          "username"
        ],
        "type": "object"
      },
      "API_Entities_UserSafe": {
        "properties": {
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "Administrator",
            "type": "string"
          },
          "username": {
            "example": "admin",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_UserStatus": {
        "description": "API_Entities_UserStatus model",
        "properties": {
          "availability": {
            "type": "string"
          },
          "clear_status_at": {
            "type": "string"
          },
          "emoji": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "message_html": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_UserSupportPin": {
        "description": "API_Entities_UserSupportPin model",
        "properties": {
          "expires_at": {
            "description": "The expiration time of the PIN",
            "format": "date-time",
            "type": "string"
          },
          "pin": {
            "description": "The security PIN",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_UserWithAdmin": {
        "description": "API_Entities_UserWithAdmin model",
        "properties": {
          "avatar_path": {
            "example": "/user/avatar/28/The-Big-Lebowski-400-400.png",
            "type": "string"
          },
          "avatar_url": {
            "example": "https://gravatar.com/avatar/1",
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "bot": {
            "type": "string"
          },
          "can_create_group": {
            "example": true,
            "type": "boolean"
          },
          "can_create_project": {
            "example": true,
            "type": "boolean"
          },
          "color_scheme_id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "commit_email": {
            "type": "string"
          },
          "confirmed_at": {
            "example": "2015-09-03T07:24:01.670Z",
            "format": "date-time",
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "$ref": "#/components/schemas/API_Entities_UserBasic"
          },
          "current_sign_in_at": {
            "example": "2015-09-03T07:24:01.670Z",
            "format": "date-time",
            "type": "string"
          },
          "custom_attributes": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_CustomAttribute"
            },
            "type": "array"
          },
          "discord": {
            "type": "string"
          },
          "email": {
            "example": "john@example.com",
            "type": "string"
          },
          "email_reset_offered_at": {
            "type": "string"
          },
          "enterprise_group_associated_at": {
            "type": "string"
          },
          "enterprise_group_id": {
            "type": "string"
          },
          "external": {
            "type": "string"
          },
          "extra_shared_runners_minutes_limit": {
            "type": "string"
          },
          "followers": {
            "type": "string"
          },
          "following": {
            "type": "string"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "identities": {
            "$ref": "#/components/schemas/API_Entities_Identity"
          },
          "is_admin": {
            "type": "string"
          },
          "is_auditor": {
            "type": "string"
          },
          "is_followed": {
            "type": "string"
          },
          "job_title": {
            "type": "string"
          },
          "last_activity_on": {
            "example": "2015-09-03T07:24:01.670Z",
            "format": "date-time",
            "type": "string"
          },
          "last_sign_in_at": {
            "example": "2015-09-03T07:24:01.670Z",
            "format": "date-time",
            "type": "string"
          },
          "linkedin": {
            "type": "string"
          },
          "local_time": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "name": {
            "example": "Administrator",
            "type": "string"
          },
          "namespace_id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "organization": {
            "type": "string"
          },
          "private_profile": {
            "example": "null",
            "type": "boolean"
          },
          "projects_limit": {
            "example": 10,
            "format": "int32",
            "type": "integer"
          },
          "pronouns": {
            "type": "string"
          },
          "provisioned_by_group_id": {
            "type": "string"
          },
          "public_email": {
            "type": "string"
          },
          "scim_identities": {
            "$ref": "#/components/schemas/API_Entities_ScimIdentity"
          },
          "shared_runners_minutes_limit": {
            "type": "string"
          },
          "skype": {
            "type": "string"
          },
          "state": {
            "example": "active",
            "type": "string"
          },
          "theme_id": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "twitter": {
            "type": "string"
          },
          "two_factor_enabled": {
            "example": true,
            "type": "boolean"
          },
          "username": {
            "example": "admin",
            "type": "string"
          },
          "using_license_seat": {
            "type": "string"
          },
          "web_url": {
            "example": "https://gitlab.example.com/root",
            "type": "string"
          },
          "website_url": {
            "type": "string"
          },
          "work_information": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_WikiAttachment": {
        "description": "API_Entities_WikiAttachment model",
        "properties": {
          "branch": {
            "example": "main",
            "type": "string"
          },
          "file_name": {
            "example": "dk.png",
            "type": "string"
          },
          "file_path": {
            "example": "uploads/6a061c4cf9f1c28cb22c384b4b8d4e3c/dk.png",
            "type": "string"
          },
          "link": {
            "properties": {
              "markdown": {
                "example": "![dk](uploads/6a061c4cf9f1c28cb22c384b4b8d4e3c/dk.png)",
                "type": "string"
              },
              "url": {
                "example": "uploads/6a061c4cf9f1c28cb22c384b4b8d4e3c/dk.png",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "API_Entities_WikiPage": {
        "description": "API_Entities_WikiPage model",
        "properties": {
          "content": {
            "example": "Here is an instruction how to deploy this project.",
            "type": "string"
          },
          "encoding": {
            "example": "UTF-8",
            "type": "string"
          },
          "format": {
            "example": "markdown",
            "type": "string"
          },
          "front_matter": {
            "example": {
              "title": "deploy"
            },
            "type": "object"
          },
          "slug": {
            "example": "deploy",
            "type": "string"
          },
          "title": {
            "example": "deploy",
            "type": "string"
          }
        },
        "type": "object"
      },
      "API_Entities_WikiPageBasic": {
        "description": "API_Entities_WikiPageBasic model",
        "properties": {
          "format": {
            "example": "markdown",
            "type": "string"
          },
          "slug": {
            "example": "deploy",
            "type": "string"
          },
          "title": {
            "example": "deploy",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DetailedStatusEntity": {
        "properties": {
          "action": {
            "properties": {
              "button_title": {
                "example": "Cancel this job",
                "type": "string"
              },
              "confirmation_message": {
                "example": "Are you sure?",
                "type": "string"
              },
              "icon": {
                "example": "cancel",
                "type": "string"
              },
              "method": {
                "example": "post",
                "type": "string"
              },
              "path": {
                "example": "/namespace1/project1/-/jobs/2/cancel",
                "type": "string"
              },
              "title": {
                "example": "Cancel",
                "type": "string"
              }
            },
            "type": "object"
          },
          "details_path": {
            "example": "/test-group/test-project/-/pipelines/287",
            "type": "string"
          },
          "favicon": {
            "example": "/assets/ci_favicons/favicon_status_success.png",
            "type": "string"
          },
          "group": {
            "example": "success",
            "type": "string"
          },
          "has_details": {
            "example": true,
            "type": "boolean"
          },
          "icon": {
            "example": "status_success",
            "type": "string"
          },
          "illustration": {
            "example": "{\n  \"image\": \"illustrations/empty-state/empty-job-not-triggered-md.svg\",\n  \"size\": \"\",\n  \"title\": \"This job has not been triggered yet\",\n  \"content\": \"This job depends on upstream jobs that need to succeed in order for this job to be triggered\"\n}\n",
            "type": "object"
          },
          "label": {
            "example": "passed",
            "type": "string"
          },
          "text": {
            "example": "passed",
            "type": "string"
          },
          "tooltip": {
            "example": "passed",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EE_API_Entities_ApprovalRuleShort": {
        "properties": {
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "QA",
            "type": "string"
          },
          "rule_type": {
            "example": "regular",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EE_API_Entities_ApprovalState": {
        "description": "EE_API_Entities_ApprovalState model",
        "properties": {
          "approval_rules_left": {
            "items": {
              "$ref": "#/components/schemas/EE_API_Entities_ApprovalRuleShort"
            },
            "type": "array"
          },
          "approvals_left": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "approvals_required": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "approved": {
            "type": "boolean"
          },
          "approved_by": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_Approvals"
            },
            "type": "array"
          },
          "approver_groups": {
            "type": "string"
          },
          "approvers": {
            "type": "string"
          },
          "created_at": {
            "example": "2022-08-17T12:46:35.053Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "example": "Repellendus impedit et vel velit dignissimos.",
            "type": "string"
          },
          "has_approval_rules": {
            "type": "boolean"
          },
          "id": {
            "example": 84,
            "format": "int32",
            "type": "integer"
          },
          "iid": {
            "example": 14,
            "format": "int32",
            "type": "integer"
          },
          "invalid_approvers_rules": {
            "items": {
              "$ref": "#/components/schemas/EE_API_Entities_ApprovalRuleShort"
            },
            "type": "array"
          },
          "merge_request_approvers_available": {
            "type": "boolean"
          },
          "merge_status": {
            "example": "can_be_merged",
            "type": "string"
          },
          "multiple_approval_rules_available": {
            "type": "boolean"
          },
          "project_id": {
            "example": 4,
            "format": "int32",
            "type": "integer"
          },
          "require_password_to_approve": {
            "type": "boolean"
          },
          "state": {
            "example": "closed",
            "type": "string"
          },
          "suggested_approvers": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_UserBasic"
            },
            "type": "array"
          },
          "title": {
            "example": "Impedit et ut et dolores vero provident ullam est",
            "type": "string"
          },
          "updated_at": {
            "example": "2022-11-14T17:22:01.470Z",
            "format": "date-time",
            "type": "string"
          },
          "user_can_approve": {
            "type": "boolean"
          },
          "user_has_approved": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EE_API_Entities_AuditEvent": {
        "description": "EE_API_Entities_AuditEvent model",
        "properties": {
          "author_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "entity_id": {
            "type": "string"
          },
          "entity_type": {
            "type": "string"
          },
          "event_name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EE_API_Entities_BillableMembership": {
        "description": "EE_API_Entities_BillableMembership model",
        "properties": {
          "access_level": {
            "properties": {
              "custom_role": {
                "type": "string"
              },
              "integer_value": {
                "type": "string"
              },
              "string_value": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "created_at": {
            "type": "string"
          },
          "expires_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "source_full_name": {
            "type": "string"
          },
          "source_id": {
            "type": "string"
          },
          "source_members_url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EE_API_Entities_LdapGroupLink": {
        "properties": {
          "cn": {
            "example": "ldap-group-1",
            "type": "string"
          },
          "filter": {
            "example": "id >= 500",
            "type": "string"
          },
          "group_access": {
            "example": 10,
            "format": "int32",
            "type": "integer"
          },
          "member_role_id": {
            "example": 12,
            "format": "int32",
            "type": "integer"
          },
          "provider": {
            "example": "ldapmain",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EE_API_Entities_MemberRole": {
        "properties": {
          "admin_cicd_variables": {
            "type": "boolean"
          },
          "admin_compliance_framework": {
            "type": "boolean"
          },
          "admin_group_member": {
            "type": "boolean"
          },
          "admin_integrations": {
            "type": "boolean"
          },
          "admin_merge_request": {
            "type": "boolean"
          },
          "admin_protected_branch": {
            "type": "boolean"
          },
          "admin_protected_environments": {
            "type": "boolean"
          },
          "admin_push_rules": {
            "type": "boolean"
          },
          "admin_runners": {
            "type": "boolean"
          },
          "admin_security_testing": {
            "type": "boolean"
          },
          "admin_terraform_state": {
            "type": "boolean"
          },
          "admin_vulnerability": {
            "type": "boolean"
          },
          "admin_web_hook": {
            "type": "boolean"
          },
          "archive_project": {
            "type": "boolean"
          },
          "base_access_level": {
            "enum": [
              10,
              15,
              20,
              30,
              40,
              5
            ],
            "example": 40,
            "format": "int32",
            "type": "integer"
          },
          "description": {
            "example": "Guest user who can also read_code",
            "type": "text"
          },
          "group_id": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "manage_deploy_tokens": {
            "type": "boolean"
          },
          "manage_group_access_tokens": {
            "type": "boolean"
          },
          "manage_merge_request_settings": {
            "type": "boolean"
          },
          "manage_project_access_tokens": {
            "type": "boolean"
          },
          "manage_protected_tags": {
            "type": "boolean"
          },
          "manage_security_policy_link": {
            "type": "boolean"
          },
          "name": {
            "example": "Custom guest",
            "type": "text"
          },
          "read_admin_cicd": {
            "type": "boolean"
          },
          "read_admin_dashboard": {
            "type": "boolean"
          },
          "read_admin_monitoring": {
            "type": "boolean"
          },
          "read_admin_subscription": {
            "type": "boolean"
          },
          "read_admin_users": {
            "type": "boolean"
          },
          "read_code": {
            "type": "boolean"
          },
          "read_compliance_dashboard": {
            "type": "boolean"
          },
          "read_crm_contact": {
            "type": "boolean"
          },
          "read_dependency": {
            "type": "boolean"
          },
          "read_runners": {
            "type": "boolean"
          },
          "read_vulnerability": {
            "type": "boolean"
          },
          "remove_group": {
            "type": "boolean"
          },
          "remove_project": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EE_API_Entities_MergeRequestApprovalRule_SourceRule": {
        "properties": {
          "approvals_required": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EE_API_Entities_MergeRequestApprovalState": {
        "description": "EE_API_Entities_MergeRequestApprovalState model",
        "properties": {
          "approval_rules_overwritten": {
            "type": "boolean"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/EE_API_Entities_MergeRequestApprovalStateRule"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EE_API_Entities_MergeRequestApprovalStateRule": {
        "properties": {
          "approvals_required": {
            "example": 2,
            "format": "int32",
            "type": "integer"
          },
          "approved": {
            "type": "boolean"
          },
          "approved_by": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_UserBasic"
            },
            "type": "array"
          },
          "code_owner": {
            "type": "boolean"
          },
          "contains_hidden_groups": {
            "type": "boolean"
          },
          "eligible_approvers": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_UserBasic"
            },
            "type": "array"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_Group"
            },
            "type": "array"
          },
          "id": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "QA",
            "type": "string"
          },
          "overridden": {
            "type": "boolean"
          },
          "report_type": {
            "type": "string"
          },
          "rule_type": {
            "example": "regular",
            "type": "string"
          },
          "section": {
            "example": "Backend",
            "type": "string"
          },
          "source_rule": {
            "$ref": "#/components/schemas/EE_API_Entities_MergeRequestApprovalRule_SourceRule"
          },
          "users": {
            "items": {
              "$ref": "#/components/schemas/API_Entities_UserBasic"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EE_API_Entities_SamlGroupLink": {
        "properties": {
          "access_level": {
            "example": 40,
            "format": "int32",
            "type": "integer"
          },
          "member_role_id": {
            "example": 12,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "saml-group-1",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EE_API_Entities_SshCertificate": {
        "description": "EE_API_Entities_SshCertificate model",
        "properties": {
          "created_at": {
            "example": "2022-01-31T15:10:45.080Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "example": 142,
            "format": "int32",
            "type": "integer"
          },
          "key": {
            "type": "string"
          },
          "title": {
            "example": "new ssh cert",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EpicBaseEntity": {
        "properties": {
          "group_id": {
            "type": "string"
          },
          "human_readable_end_date": {
            "type": "string"
          },
          "human_readable_timestamp": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "iid": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "TestCaseEntity": {
        "properties": {
          "attachment_url": {
            "example": "http://localhost/namespace1/project1/-/jobs/1/artifacts/file/some/path.png",
            "type": "string"
          },
          "classname": {
            "example": "vulnerability_management_spec",
            "type": "string"
          },
          "execution_time": {
            "example": 180,
            "format": "int32",
            "type": "integer"
          },
          "file": {
            "example": "./spec/test_spec.rb",
            "type": "string"
          },
          "name": {
            "example": "Security Reports can create an auto-remediation MR",
            "type": "string"
          },
          "recent_failures": {
            "example": {
              "base_branch": "develop",
              "count": 3
            },
            "type": "string"
          },
          "stack_trace": {
            "example": "Failure/Error: is_expected.to eq(3)",
            "type": "string"
          },
          "status": {
            "example": "success",
            "type": "string"
          },
          "system_output": {
            "example": "Failure/Error: is_expected.to eq(3)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TestReportEntity": {
        "description": "TestReportEntity model",
        "properties": {
          "error_count": {
            "example": 0,
            "format": "int32",
            "type": "integer"
          },
          "failed_count": {
            "example": 0,
            "format": "int32",
            "type": "integer"
          },
          "skipped_count": {
            "example": 0,
            "format": "int32",
            "type": "integer"
          },
          "success_count": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "test_suites": {
            "items": {
              "$ref": "#/components/schemas/TestSuiteEntity"
            },
            "type": "array"
          },
          "total_count": {
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "total_time": {
            "example": 180,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TestReportSummaryEntity": {
        "description": "TestReportSummaryEntity model",
        "properties": {
          "test_suites": {
            "$ref": "#/components/schemas/TestSuiteSummaryEntity"
          },
          "total": {
            "example": 3363,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TestSuiteEntity": {
        "properties": {
          "error_count": {
            "example": 0,
            "format": "int32",
            "type": "integer"
          },
          "failed_count": {
            "example": 0,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "test",
            "type": "string"
          },
          "skipped_count": {
            "example": 12,
            "format": "int32",
            "type": "integer"
          },
          "success_count": {
            "example": 3351,
            "format": "int32",
            "type": "integer"
          },
          "suite_error": {
            "example": "JUnit XML parsing failed: 1:1: FATAL: Document is empty",
            "type": "string"
          },
          "test_cases": {
            "items": {
              "$ref": "#/components/schemas/TestCaseEntity"
            },
            "type": "array"
          },
          "total_count": {
            "example": 3363,
            "format": "int32",
            "type": "integer"
          },
          "total_time": {
            "example": 1904,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TestSuiteSummaryEntity": {
        "properties": {
          "build_ids": {
            "example": [
              66004
            ],
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "error_count": {
            "example": 0,
            "format": "int32",
            "type": "integer"
          },
          "failed_count": {
            "example": 0,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "example": "test",
            "type": "string"
          },
          "skipped_count": {
            "example": 12,
            "format": "int32",
            "type": "integer"
          },
          "success_count": {
            "example": 3351,
            "format": "int32",
            "type": "integer"
          },
          "suite_error": {
            "example": "JUnit XML parsing failed: 1:1: FATAL: Document is empty",
            "type": "string"
          },
          "test_cases": {
            "items": {
              "$ref": "#/components/schemas/TestCaseEntity"
            },
            "type": "array"
          },
          "total_count": {
            "example": 3363,
            "format": "int32",
            "type": "integer"
          },
          "total_time": {
            "example": 1904,
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "patchApiV4ProjectsIdErrorTrackingSettings": {
        "description": "Enable or disable the Error Tracking project settings",
        "properties": {
          "active": {
            "description": "Pass true to enable the already configured Error Tracking settings or false to disable it.",
            "type": "boolean"
          },
          "integrated": {
            "description": "Pass true to enable the integrated Error Tracking backend. Available in GitLab 14.2 and later.",
            "type": "boolean"
          }
        },
        "required": [
          "active"
        ],
        "type": "object"
      },
      "patchApiV4ProjectsIdJobTokenScope": {
        "description": "Patch CI_JOB_TOKEN access settings.",
        "properties": {
          "enabled": {
            "description": "Indicates CI/CD job tokens generated in other projects have restricted access to this project.",
            "type": "boolean"
          }
        },
        "required": [
          "enabled"
        ],
        "type": "object"
      },
      "patchApiV4ProjectsIdPackagesProtectionRulesPackageProtectionRuleId": {
        "description": "Update a package protection rule for a project",
        "properties": {
          "minimum_access_level_for_push": {
            "description": "Minimum GitLab access level able to push a package. Must be at least `maintainer`.\n              For example `maintainer`, `owner` or `admin`.",
            "enum": [
              "maintainer",
              "owner",
              "admin"
            ],
            "type": "string"
          },
          "package_name_pattern": {
            "description": "Package name protected by the rule. For example @my-scope/my-package-*.\n              Wildcard character * allowed.",
            "type": "string"
          },
          "package_type": {
            "description": "Package type protected by the rule. For example npm.",
            "enum": [
              "conan",
              "maven",
              "npm",
              "pypi"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "patchApiV4ProjectsIdPages": {
        "description": "Update pages settings",
        "properties": {
          "pages_https_only": {
            "description": "Whether to force HTTPS",
            "type": "boolean"
          },
          "pages_primary_domain": {
            "description": "Set pages primary domain",
            "type": "string"
          },
          "pages_unique_domain_enabled": {
            "description": "Whether to use unique domain",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "patchApiV4ProjectsIdProtectedBranchesName": {
        "description": "Update a protected branch",
        "properties": {
          "allow_force_push": {
            "description": "Allow force push for all users with push access.",
            "type": "boolean"
          },
          "allowed_to_merge": {
            "description": "An array of users/groups allowed to merge",
            "items": {
              "properties": {
                "_destroy": {
                  "description": "Delete the object when true",
                  "type": "boolean"
                },
                "access_level": {
                  "enum": [
                    30,
                    40,
                    60,
                    0
                  ],
                  "format": "int32",
                  "type": "integer"
                },
                "group_id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                },
                "id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                },
                "user_id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "allowed_to_push": {
            "description": "An array of users/groups allowed to push",
            "items": {
              "properties": {
                "_destroy": {
                  "description": "Delete the object when true",
                  "type": "boolean"
                },
                "access_level": {
                  "enum": [
                    30,
                    40,
                    60,
                    0
                  ],
                  "format": "int32",
                  "type": "integer"
                },
                "deploy_key_id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                },
                "group_id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                },
                "id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                },
                "user_id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "allowed_to_unprotect": {
            "description": "An array of users/groups allowed to unprotect",
            "items": {
              "properties": {
                "_destroy": {
                  "description": "Delete the object when true",
                  "type": "boolean"
                },
                "access_level": {
                  "enum": [
                    30,
                    40,
                    60
                  ],
                  "format": "int32",
                  "type": "integer"
                },
                "group_id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                },
                "id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                },
                "user_id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "code_owner_approval_required": {
            "description": "Prevent pushes to this branch if it matches an item in CODEOWNERS",
            "type": "boolean"
          },
          "unprotect_access_level": {
            "description": "Access levels allowed to unprotect (defaults: `40`, maintainer access level)",
            "enum": [
              30,
              40,
              60
            ],
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "patchApiV4ProjectsIdRegistryProtectionRepositoryRulesProtectionRuleId": {
        "description": "Update a container protection rule for a project",
        "properties": {
          "minimum_access_level_for_delete": {
            "description": "Minimum GitLab access level to allow to delete container images in the container registry.\n              For example maintainer, owner or admin. To unset the value, use an empty string `\"\"`.",
            "enum": [
              "maintainer",
              "owner",
              "admin",
              ""
            ],
            "type": "string"
          },
          "minimum_access_level_for_push": {
            "description": "Minimum GitLab access level to allow to push container images to the container registry.\n              For example maintainer, owner or admin. To unset the value, use an empty string `\"\"`.",
            "enum": [
              "maintainer",
              "owner",
              "admin",
              ""
            ],
            "type": "string"
          },
          "repository_path_pattern": {
            "description": "Container repository path pattern protected by the protection rule.\n              For example `flight/flight-*`. Wildcard character `*` allowed.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "patchApiV4UserStatus": {
        "description": "Set the status of the current user",
        "properties": {
          "availability": {
            "description": "The availability of user to set",
            "type": "string"
          },
          "clear_status_after": {
            "description": "Automatically clear emoji, message and availability fields after a certain time",
            "enum": [
              "30_minutes",
              "3_hours",
              "8_hours",
              "1_day",
              "3_days",
              "7_days",
              "30_days"
            ],
            "type": "string"
          },
          "emoji": {
            "description": "The emoji to set on the status",
            "type": "string"
          },
          "message": {
            "description": "The status message to set",
            "type": "string"
          }
        },
        "type": "object"
      },
      "postApiV4AdminCiVariables": {
        "description": "Create a new instance-level variable",
        "properties": {
          "description": {
            "description": "The description of the variable",
            "type": "string"
          },
          "key": {
            "description": "The key of the variable. Max 255 characters",
            "type": "string"
          },
          "masked": {
            "description": "Whether the variable is masked",
            "type": "boolean"
          },
          "protected": {
            "description": "Whether the variable is protected",
            "type": "boolean"
          },
          "raw": {
            "description": "Whether the variable will be expanded",
            "type": "boolean"
          },
          "value": {
            "description": "The value of a variable",
            "type": "string"
          },
          "variable_type": {
            "description": "The type of a variable. Available types are: env_var (default) and file",
            "enum": [
              "env_var",
              "file"
            ],
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "postApiV4AdminClustersAdd": {
        "description": "Add existing instance cluster",
        "properties": {
          "domain": {
            "description": "Cluster base domain",
            "type": "string"
          },
          "enabled": {
            "default": true,
            "description": "Determines if cluster is active or not, defaults to true",
            "type": "boolean"
          },
          "environment_scope": {
            "default": "*",
            "description": "The associated environment to the cluster",
            "type": "string"
          },
          "managed": {
            "default": true,
            "description": "Determines if GitLab will manage namespaces and service accounts for this cluster, defaults to true",
            "type": "boolean"
          },
          "management_project_id": {
            "description": "The ID of the management project",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Cluster name",
            "type": "string"
          },
          "namespace_per_environment": {
            "default": true,
            "description": "Deploy each environment to a separate Kubernetes namespace",
            "type": "boolean"
          },
          "platform_kubernetes_attributes": {
            "description": "Platform Kubernetes data",
            "properties": {
              "api_url": {
                "description": "URL to access the Kubernetes API",
                "type": "string"
              },
              "authorization_type": {
                "default": "rbac",
                "description": "Cluster authorization type, defaults to RBAC",
                "enum": [
                  "unknown_authorization",
                  "rbac",
                  "abac"
                ],
                "type": "string"
              },
              "ca_cert": {
                "description": "TLS certificate (needed if API is using a self-signed TLS certificate)",
                "type": "string"
              },
              "namespace": {
                "description": "Unique namespace related to Project",
                "type": "string"
              },
              "token": {
                "description": "Token to authenticate against Kubernetes",
                "type": "string"
              }
            },
            "required": [
              "api_url",
              "token"
            ],
            "type": "object"
          }
        },
        "required": [
          "name",
          "platform_kubernetes_attributes"
        ],
        "type": "object"
      },
      "postApiV4AdminMigrationsTimestampMark": {
        "description": "Mark the migration as successfully executed",
        "properties": {
          "database": {
            "default": "main",
            "description": "The name of the database",
            "enum": [
              "main",
              "ci",
              "sec",
              "embedding",
              "geo"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "postApiV4Applications": {
        "description": "Create a new application",
        "properties": {
          "confidential": {
            "default": true,
            "description": "The application is used where the client secret can be kept confidential. Native mobile apps \\\n                        and Single Page Apps are considered non-confidential. Defaults to true if not supplied",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the application.",
            "example": "MyApplication",
            "type": "string"
          },
          "redirect_uri": {
            "description": "Redirect URI of the application.",
            "example": "https://redirect.uri",
            "type": "string"
          },
          "scopes": {
            "description": "Scopes of the application. You can specify multiple scopes by separating\\\n                                 each scope using a space",
            "type": "string"
          }
        },
        "required": [
          "name",
          "redirect_uri",
          "scopes"
        ],
        "type": "object"
      },
      "postApiV4Groups": {
        "description": "Create a group. Available only for users who can create groups.",
        "properties": {
          "auto_devops_enabled": {
            "description": "Default to Auto DevOps pipeline for all projects within this group",
            "type": "boolean"
          },
          "avatar": {
            "description": "Avatar image for the group",
            "type": "file"
          },
          "default_branch": {
            "description": "The default branch of group's projects",
            "example": "main",
            "type": "string"
          },
          "default_branch_protection": {
            "description": "Determine if developers can push to default branch",
            "enum": [
              0,
              3,
              1,
              2,
              4
            ],
            "format": "int32",
            "type": "integer"
          },
          "default_branch_protection_defaults": {
            "description": "Determine if developers can push to default branch",
            "properties": {
              "allow_force_push": {
                "description": "Allow force push for all users with push access.",
                "type": "boolean"
              },
              "allowed_to_merge": {
                "description": "An array of access levels allowed to merge",
                "items": {
                  "properties": {
                    "access_level": {
                      "description": "A valid access level",
                      "enum": [
                        30,
                        40,
                        60,
                        0
                      ],
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "access_level"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "allowed_to_push": {
                "description": "An array of access levels allowed to push",
                "items": {
                  "properties": {
                    "access_level": {
                      "description": "A valid access level",
                      "enum": [
                        30,
                        40,
                        60,
                        0
                      ],
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "access_level"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "code_owner_approval_required": {
                "description": "Require approval from code owners",
                "type": "boolean"
              },
              "developer_can_initial_push": {
                "description": "Allow developers to initial push",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "description": {
            "description": "The description of the group",
            "type": "string"
          },
          "duo_availability": {
            "description": "Duo availability. One of `default_on`, `default_off` or `never_on`",
            "enum": [
              "default_on",
              "default_off",
              "never_on"
            ],
            "type": "string"
          },
          "emails_disabled": {
            "description": "_(Deprecated)_ Disable email notifications. Use: emails_enabled",
            "type": "boolean"
          },
          "emails_enabled": {
            "description": "Enable email notifications",
            "type": "boolean"
          },
          "enabled_git_access_protocol": {
            "description": "Allow only the selected protocols to be used for Git access.",
            "enum": [
              "ssh",
              "http",
              "all"
            ],
            "type": "string"
          },
          "experiment_features_enabled": {
            "description": "Enable experiment features for this group",
            "type": "boolean"
          },
          "extra_shared_runners_minutes_limit": {
            "description": "(admin-only) Extra compute minutes quota for this group",
            "format": "int32",
            "type": "integer"
          },
          "ldap_access": {
            "description": "A valid access level",
            "format": "int32",
            "type": "integer"
          },
          "ldap_cn": {
            "description": "LDAP Common Name",
            "type": "string"
          },
          "lfs_enabled": {
            "description": "Enable/disable LFS for the projects in this group",
            "type": "boolean"
          },
          "membership_lock": {
            "description": "Prevent adding new members to projects within this group",
            "type": "boolean"
          },
          "mentions_disabled": {
            "description": "Disable a group from getting mentioned",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the group",
            "type": "string"
          },
          "organization_id": {
            "description": "The organization id for the group",
            "format": "int32",
            "type": "integer"
          },
          "parent_id": {
            "description": "The parent group id for creating nested group",
            "format": "int32",
            "type": "integer"
          },
          "path": {
            "description": "The path of the group",
            "type": "string"
          },
          "project_creation_level": {
            "description": "Determine if developers can create projects in the group",
            "enum": [
              "noone",
              "owner",
              "maintainer",
              "developer",
              "administrator"
            ],
            "type": "string"
          },
          "request_access_enabled": {
            "description": "Allow users to request member access",
            "type": "boolean"
          },
          "require_two_factor_authentication": {
            "description": "Require all users in this group to setup Two-factor authentication",
            "type": "boolean"
          },
          "share_with_group_lock": {
            "description": "Prevent sharing a project with another group within this group",
            "type": "boolean"
          },
          "shared_runners_minutes_limit": {
            "description": "(admin-only) compute minutes quota for this group",
            "format": "int32",
            "type": "integer"
          },
          "shared_runners_setting": {
            "description": "Enable/disable shared runners for the group and its subgroups and projects",
            "enum": [
              "disabled_and_unoverridable",
              "disabled_and_overridable",
              "enabled"
            ],
            "type": "string"
          },
          "show_diff_preview_in_email": {
            "description": "Include the code diff preview in merge request notification emails",
            "type": "boolean"
          },
          "subgroup_creation_level": {
            "description": "Allowed to create subgroups",
            "enum": [
              "owner",
              "maintainer"
            ],
            "type": "string"
          },
          "two_factor_grace_period": {
            "description": "Time before Two-factor authentication is enforced",
            "format": "int32",
            "type": "integer"
          },
          "visibility": {
            "description": "The visibility of the group",
            "enum": [
              "private",
              "internal",
              "public"
            ],
            "type": "string"
          },
          "wiki_access_level": {
            "description": "Wiki access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "path"
        ],
        "type": "object"
      },
      "postApiV4GroupsIdAccessTokens": {
        "description": "Create a resource access token",
        "properties": {
          "access_level": {
            "default": 40,
            "description": "The access level of the token in the group",
            "enum": [
              10,
              15,
              20,
              30,
              40,
              50
            ],
            "example": 40,
            "format": "int32",
            "type": "integer"
          },
          "description": {
            "description": "Resource access token description",
            "example": "test description",
            "type": "string"
          },
          "expires_at": {
            "default": "2026-03-05T09:41:42.949Z",
            "description": "The expiration date of the token",
            "example": "\"2021-01-31",
            "format": "date",
            "type": "string"
          },
          "name": {
            "description": "Resource access token name",
            "example": "test",
            "type": "string"
          },
          "scopes": {
            "description": "The permissions of the token",
            "example": [
              "api",
              "read_repository"
            ],
            "items": {
              "enum": [
                "api",
                "read_api",
                "create_runner",
                "manage_runner",
                "k8s_proxy",
                "self_rotate",
                "read_repository",
                "write_repository",
                "read_observability",
                "write_observability",
                "ai_features"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "scopes",
          "expires_at"
        ],
        "type": "object"
      },
      "postApiV4GroupsIdAccessTokensSelfRotate": {
        "description": "Rotate a resource access token",
        "properties": {
          "expires_at": {
            "description": "The expiration date of the token",
            "example": "2021-01-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "postApiV4GroupsIdAccessTokensTokenIdRotate": {
        "description": "Rotate a resource access token",
        "properties": {
          "expires_at": {
            "description": "The expiration date of the token",
            "example": "2021-01-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "postApiV4GroupsIdBadges": {
        "description": "Adds a badge to a group.",
        "properties": {
          "image_url": {
            "description": "URL of the badge image",
            "type": "string"
          },
          "link_url": {
            "description": "URL of the badge link",
            "type": "string"
          },
          "name": {
            "description": "Name for the badge",
            "type": "string"
          }
        },
        "required": [
          "link_url",
          "image_url"
        ],
        "type": "object"
      },
      "postApiV4GroupsIdClustersUser": {
        "description": "Add existing cluster to group",
        "properties": {
          "domain": {
            "description": "Cluster base domain",
            "type": "string"
          },
          "enabled": {
            "default": true,
            "description": "Determines if cluster is active or not, defaults to true",
            "type": "boolean"
          },
          "environment_scope": {
            "default": "*",
            "description": "The associated environment to the cluster",
            "type": "string"
          },
          "managed": {
            "default": true,
            "description": "Determines if GitLab will manage namespaces and service accounts for this cluster, defaults to true",
            "type": "boolean"
          },
          "management_project_id": {
            "description": "The ID of the management project",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Cluster name",
            "type": "string"
          },
          "namespace_per_environment": {
            "default": true,
            "description": "Deploy each environment to a separate Kubernetes namespace",
            "type": "boolean"
          },
          "platform_kubernetes_attributes": {
            "description": "Platform Kubernetes data",
            "properties": {
              "api_url": {
                "description": "URL to access the Kubernetes API",
                "type": "string"
              },
              "authorization_type": {
                "default": "rbac",
                "description": "Cluster authorization type, defaults to RBAC",
                "enum": [
                  "unknown_authorization",
                  "rbac",
                  "abac"
                ],
                "type": "string"
              },
              "ca_cert": {
                "description": "TLS certificate (needed if API is using a self-signed TLS certificate)",
                "type": "string"
              },
              "namespace": {
                "description": "Unique namespace related to Group",
                "type": "string"
              },
              "token": {
                "description": "Token to authenticate against Kubernetes",
                "type": "string"
              }
            },
            "required": [
              "api_url",
              "token"
            ],
            "type": "object"
          }
        },
        "required": [
          "name",
          "platform_kubernetes_attributes"
        ],
        "type": "object"
      },
      "postApiV4GroupsIdDebianDistributions": {
        "description": "Create a Debian Distribution",
        "properties": {
          "architectures": {
            "description": "The list of Architectures",
            "example": "amd64",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "codename": {
            "description": "The Debian Codename",
            "example": "sid",
            "type": "string"
          },
          "components": {
            "description": "The list of Components",
            "example": "main",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "description": "The Debian Description",
            "example": "My description",
            "type": "string"
          },
          "label": {
            "description": "The Debian Label",
            "example": "grep.be",
            "type": "string"
          },
          "origin": {
            "description": "The Debian Origin",
            "example": "Grep",
            "type": "string"
          },
          "suite": {
            "description": "The Debian Suite",
            "example": "unstable",
            "type": "string"
          },
          "valid_time_duration_seconds": {
            "description": "The duration before the Release file should be considered expired by the client",
            "example": 604800,
            "format": "int32",
            "type": "integer"
          },
          "version": {
            "description": "The Debian Version",
            "example": "12",
            "type": "string"
          }
        },
        "required": [
          "codename"
        ],
        "type": "object"
      },
      "postApiV4GroupsIdDeployTokens": {
        "description": "Create a group deploy token",
        "properties": {
          "expires_at": {
            "description": "Expiration date for the deploy token. Does not expire if no value is provided. Expected in ISO 8601 format (`2019-03-15T08:00:00Z`)",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "New deploy token's name",
            "type": "string"
          },
          "scopes": {
            "description": "Indicates the deploy token scopes. Must be at least one of `read_repository`, `read_registry`, `write_registry`, `read_package_registry`, or `write_package_registry`",
            "items": {
              "enum": [
                "read_repository",
                "read_registry",
                "write_registry",
                "read_package_registry",
                "write_package_registry",
                "read_virtual_registry",
                "write_virtual_registry"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "username": {
            "description": "Username for deploy token. Default is `gitlab+deploy-token-{n}`",
            "type": "string"
          }
        },
        "required": [
          "name",
          "scopes"
        ],
        "type": "object"
      },
      "postApiV4GroupsIdEpicsEpicIidAwardEmoji": {
        "description": "Add a new emoji reaction",
        "properties": {
          "name": {
            "description": "Name of the emoji without colons.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "postApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmoji": {
        "description": "Add a new emoji reaction",
        "properties": {
          "name": {
            "description": "Name of the emoji without colons.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "postApiV4GroupsIdExportRelations": {
        "description": "Start relations export",
        "properties": {
          "batched": {
            "description": "Whether to export in batches",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "postApiV4GroupsIdInvitations": {
        "description": "Invite non-members by email address to a group or project.",
        "properties": {
          "access_level": {
            "description": "A valid access level (defaults: `30`, developer access level)",
            "enum": [
              10,
              15,
              20,
              30,
              40,
              50,
              5
            ],
            "format": "int32",
            "type": "integer"
          },
          "email": {
            "description": "The email address to invite, or multiple emails separated by comma",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "expires_at": {
            "description": "Date string in the format YEAR-MONTH-DAY",
            "format": "date-time",
            "type": "string"
          },
          "invite_source": {
            "default": "invitations-api",
            "description": "Source that triggered the member creation process",
            "type": "string"
          },
          "member_role_id": {
            "description": "The ID of a member role for the invited user",
            "format": "int32",
            "type": "integer"
          },
          "user_id": {
            "description": "The user ID of the new member or multiple IDs separated by commas.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "access_level"
        ],
        "type": "object"
      },
      "postApiV4GroupsIdMembers": {
        "description": "Adds a member to a group or project.",
        "properties": {
          "access_level": {
            "description": "A valid access level.",
            "format": "int32",
            "type": "integer"
          },
          "expires_at": {
            "description": "Date string in the format YEAR-MONTH-DAY",
            "format": "date-time",
            "type": "string"
          },
          "invite_source": {
            "default": "members-api",
            "description": "Source that triggered the member creation process",
            "type": "string"
          },
          "user_id": {
            "description": "The user ID of the new member or multiple IDs separated by commas.",
            "format": "int32",
            "type": "integer"
          },
          "username": {
            "description": "The username of the new member or multiple usernames separated by commas.",
            "type": "string"
          }
        },
        "required": [
          "access_level"
        ],
        "type": "object"
      },
      "postApiV4GroupsIdShare": {
        "description": "Share a group with a group",
        "properties": {
          "expires_at": {
            "description": "Share expiration date",
            "format": "date",
            "type": "string"
          },
          "group_access": {
            "description": "The group access level",
            "enum": [
              10,
              15,
              20,
              30,
              40,
              50
            ],
            "format": "int32",
            "type": "integer"
          },
          "group_id": {
            "description": "The ID of the group to share",
            "format": "int32",
            "type": "integer"
          },
          "member_role_id": {
            "description": "The ID of the Member Role to be assigned to the group",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "group_id",
          "group_access"
        ],
        "type": "object"
      },
      "postApiV4GroupsIdSshCertificates": {
        "description": "Create a ssh certificate for a group.",
        "properties": {
          "key": {
            "description": "The key of the ssh certificate",
            "type": "string"
          },
          "title": {
            "description": "The title of the ssh certificate",
            "type": "string"
          }
        },
        "required": [
          "title",
          "key"
        ],
        "type": "object"
      },
      "postApiV4GroupsIdTokensRevoke": {
        "description": "Revoke a single token",
        "properties": {
          "token": {
            "description": "The token to revoke",
            "type": "string"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "postApiV4GroupsIdTransfer": {
        "description": "Transfer a group to a new parent group or promote a subgroup to a top-level group",
        "properties": {
          "group_id": {
            "description": "The ID of the target group to which the group needs to be transferred to.If not provided, the source group will be promoted to a top-level group.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "postApiV4GroupsIdVariables": {
        "description": "Create a new variable in a group",
        "properties": {
          "description": {
            "description": "The description of the variable",
            "type": "string"
          },
          "environment_scope": {
            "description": "The environment scope of the variable",
            "type": "string"
          },
          "key": {
            "description": "The ID of a group or URL-encoded path of the group owned by the\n        authenticated user",
            "type": "string"
          },
          "masked": {
            "description": "Whether the variable is masked",
            "type": "string"
          },
          "masked_and_hidden": {
            "description": "Whether the variable is masked and hidden",
            "type": "string"
          },
          "protected": {
            "description": "Whether the variable is protected",
            "type": "string"
          },
          "raw": {
            "description": "Whether the variable will be expanded",
            "type": "string"
          },
          "value": {
            "description": "The value of a variable",
            "type": "string"
          },
          "variable_type": {
            "description": "The type of the variable. Default: env_var",
            "enum": [
              "env_var",
              "file"
            ],
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "postApiV4GroupsIdWikis": {
        "description": "Create a wiki page",
        "properties": {
          "content": {
            "description": "Content of a wiki page",
            "type": "string"
          },
          "format": {
            "default": "markdown",
            "description": "Format of a wiki page. Available formats are markdown, rdoc, asciidoc and org",
            "enum": [
              "markdown",
              "rdoc",
              "asciidoc",
              "org"
            ],
            "type": "string"
          },
          "front_matter": {
            "properties": {
              "title": {
                "description": "Front matter title of a wiki page",
                "type": "string"
              }
            },
            "type": "object"
          },
          "title": {
            "description": "Title of a wiki page",
            "type": "string"
          }
        },
        "required": [
          "title",
          "content"
        ],
        "type": "object"
      },
      "postApiV4GroupsIdWikisAttachments": {
        "description": "Upload an attachment to the wiki repository",
        "properties": {
          "branch": {
            "description": "The name of the branch",
            "type": "string"
          },
          "file": {
            "description": "The attachment file to be uploaded",
            "type": "file"
          }
        },
        "required": [
          "file"
        ],
        "type": "object"
      },
      "postApiV4ProjectsId(refRef)triggerPipeline": {
        "additionalProperties": false,
        "description": "Trigger a GitLab project pipeline",
        "properties": {
          "token": {
            "description": "The unique token of trigger or job token",
            "example": "6d056f63e50fe6f8c5f8f4aa10edb7",
            "type": "string"
          },
          "variables": {
            "description": "The list of variables to be injected into build",
            "example": {
              "VAR1": "value1",
              "VAR2": "value2"
            },
            "type": "object"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdAccessTokens": {
        "description": "Create a resource access token",
        "properties": {
          "access_level": {
            "default": 40,
            "description": "The access level of the token in the project",
            "enum": [
              10,
              15,
              20,
              30,
              40,
              50
            ],
            "example": 40,
            "format": "int32",
            "type": "integer"
          },
          "description": {
            "description": "Resource access token description",
            "example": "test description",
            "type": "string"
          },
          "expires_at": {
            "default": "2026-03-05T09:41:42.948Z",
            "description": "The expiration date of the token",
            "example": "\"2021-01-31",
            "format": "date",
            "type": "string"
          },
          "name": {
            "description": "Resource access token name",
            "example": "test",
            "type": "string"
          },
          "scopes": {
            "description": "The permissions of the token",
            "example": [
              "api",
              "read_repository"
            ],
            "items": {
              "enum": [
                "api",
                "read_api",
                "create_runner",
                "manage_runner",
                "k8s_proxy",
                "self_rotate",
                "read_repository",
                "write_repository",
                "read_observability",
                "write_observability",
                "ai_features"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "scopes",
          "expires_at"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdAccessTokensSelfRotate": {
        "description": "Rotate a resource access token",
        "properties": {
          "expires_at": {
            "description": "The expiration date of the token",
            "example": "2021-01-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "postApiV4ProjectsIdAccessTokensTokenIdRotate": {
        "description": "Rotate a resource access token",
        "properties": {
          "expires_at": {
            "description": "The expiration date of the token",
            "example": "2021-01-31",
            "format": "date",
            "type": "string"
          }
        },
        "type": "object"
      },
      "postApiV4ProjectsIdBadges": {
        "description": "Adds a badge to a project.",
        "properties": {
          "image_url": {
            "description": "URL of the badge image",
            "type": "string"
          },
          "link_url": {
            "description": "URL of the badge link",
            "type": "string"
          },
          "name": {
            "description": "Name for the badge",
            "type": "string"
          }
        },
        "required": [
          "link_url",
          "image_url"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdCatalogPublish": {
        "description": "Publish a new component project release as version to the CI/CD catalog",
        "properties": {
          "metadata": {
            "description": "The metadata for the release",
            "type": "object"
          },
          "version": {
            "description": "The version of the catalog resource / tag of the release to publish",
            "type": "string"
          }
        },
        "required": [
          "version",
          "metadata"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdCiLint": {
        "description": "Validate a CI YAML configuration with a namespace",
        "properties": {
          "content": {
            "description": "Content of .gitlab-ci.yml",
            "type": "string"
          },
          "dry_run": {
            "default": false,
            "description": "Run pipeline creation simulation, or only do static check. This is false by default",
            "type": "boolean"
          },
          "include_jobs": {
            "description": "If the list of jobs that would exist in a static check or pipeline\n        simulation should be included in the response. This is false by default",
            "type": "boolean"
          },
          "ref": {
            "description": "When dry_run is true, sets the branch or tag to use. Defaults to the project’s default branch when not set",
            "type": "string"
          }
        },
        "required": [
          "content"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdClusterAgents": {
        "description": "Register an agent with a project",
        "properties": {
          "name": {
            "description": "The name of the agent",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdClusterAgentsAgentIdTokens": {
        "description": "Create an agent token",
        "properties": {
          "description": {
            "description": "The description for the token",
            "type": "string"
          },
          "name": {
            "description": "The name for the token",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdClustersUser": {
        "description": "Add existing cluster to project",
        "properties": {
          "domain": {
            "description": "Cluster base domain",
            "type": "string"
          },
          "enabled": {
            "default": true,
            "description": "Determines if cluster is active or not, defaults to true",
            "type": "boolean"
          },
          "environment_scope": {
            "default": "*",
            "description": "The associated environment to the cluster",
            "type": "string"
          },
          "managed": {
            "default": true,
            "description": "Determines if GitLab will manage namespaces and service accounts for this cluster, defaults to true",
            "type": "boolean"
          },
          "management_project_id": {
            "description": "The ID of the management project",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Cluster name",
            "type": "string"
          },
          "namespace_per_environment": {
            "default": true,
            "description": "Deploy each environment to a separate Kubernetes namespace",
            "type": "boolean"
          },
          "platform_kubernetes_attributes": {
            "description": "Platform Kubernetes data",
            "properties": {
              "api_url": {
                "description": "URL to access the Kubernetes API",
                "type": "string"
              },
              "authorization_type": {
                "default": "rbac",
                "description": "Cluster authorization type, defaults to RBAC",
                "enum": [
                  "unknown_authorization",
                  "rbac",
                  "abac"
                ],
                "type": "string"
              },
              "ca_cert": {
                "description": "TLS certificate (needed if API is using a self-signed TLS certificate)",
                "type": "string"
              },
              "namespace": {
                "description": "Unique namespace related to Project",
                "type": "string"
              },
              "token": {
                "description": "Token to authenticate against Kubernetes",
                "type": "string"
              }
            },
            "required": [
              "api_url",
              "token"
            ],
            "type": "object"
          }
        },
        "required": [
          "name",
          "platform_kubernetes_attributes"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdDebianDistributions": {
        "description": "Create a Debian Distribution",
        "properties": {
          "architectures": {
            "description": "The list of Architectures",
            "example": "amd64",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "codename": {
            "description": "The Debian Codename",
            "example": "sid",
            "type": "string"
          },
          "components": {
            "description": "The list of Components",
            "example": "main",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "description": "The Debian Description",
            "example": "My description",
            "type": "string"
          },
          "label": {
            "description": "The Debian Label",
            "example": "grep.be",
            "type": "string"
          },
          "origin": {
            "description": "The Debian Origin",
            "example": "Grep",
            "type": "string"
          },
          "suite": {
            "description": "The Debian Suite",
            "example": "unstable",
            "type": "string"
          },
          "valid_time_duration_seconds": {
            "description": "The duration before the Release file should be considered expired by the client",
            "example": 604800,
            "format": "int32",
            "type": "integer"
          },
          "version": {
            "description": "The Debian Version",
            "example": "12",
            "type": "string"
          }
        },
        "required": [
          "codename"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdDeployKeys": {
        "description": "Add deploy key",
        "properties": {
          "can_push": {
            "description": "Can deploy key push to the project's repository",
            "type": "boolean"
          },
          "expires_at": {
            "description": "The expiration date of the SSH key in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)",
            "format": "date-time",
            "type": "string"
          },
          "key": {
            "description": "New deploy key",
            "type": "string"
          },
          "title": {
            "description": "New deploy key's title",
            "type": "string"
          }
        },
        "required": [
          "key",
          "title"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdDeployTokens": {
        "description": "Create a project deploy token",
        "properties": {
          "expires_at": {
            "description": "Expiration date for the deploy token. Does not expire if no value is provided. Expected in ISO 8601 format (`2019-03-15T08:00:00Z`).",
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "description": "New deploy token's name",
            "type": "string"
          },
          "scopes": {
            "description": "Indicates the deploy token scopes. Must be at least one of `read_repository`, `read_registry`, `write_registry`, `read_package_registry`, `write_package_registry`, `read_virtual_registry`, or `write_virtual_registry`.",
            "items": {
              "enum": [
                "read_repository",
                "read_registry",
                "write_registry",
                "read_package_registry",
                "write_package_registry",
                "read_virtual_registry",
                "write_virtual_registry"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "username": {
            "description": "Username for deploy token. Default is `gitlab+deploy-token-{n}`",
            "type": "string"
          }
        },
        "required": [
          "name",
          "scopes"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdDeployments": {
        "description": "Create a deployment",
        "properties": {
          "environment": {
            "description": "The name of the environment to create the deployment for",
            "type": "string"
          },
          "ref": {
            "description": "The name of the branch or tag that is deployed",
            "type": "string"
          },
          "sha": {
            "description": "The SHA of the commit that is deployed",
            "type": "string"
          },
          "status": {
            "description": "The status of the deployment that is created. One of `running`, `success`, `failed`, or `canceled`",
            "enum": [
              "running",
              "success",
              "failed",
              "canceled"
            ],
            "type": "string"
          },
          "tag": {
            "description": "A boolean that indicates if the deployed ref is a tag (`true`) or not (`false`)",
            "type": "boolean"
          }
        },
        "required": [
          "environment",
          "sha",
          "ref",
          "tag",
          "status"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdDeploymentsDeploymentIdApproval": {
        "description": "Approve or reject a blocked deployment",
        "properties": {
          "comment": {
            "description": "A comment to go with the approval",
            "type": "string"
          },
          "represented_as": {
            "description": "The name of the User/Group/Role to use for the approval, when the user belongs to multiple approval rules",
            "type": "string"
          },
          "status": {
            "description": "The status of the approval (either `approved` or `rejected`)",
            "enum": [
              "approved",
              "rejected"
            ],
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdEnvironments": {
        "description": "Create a new environment",
        "properties": {
          "auto_stop_setting": {
            "default": "always",
            "description": "The auto stop setting for the environment. Allowed values are `always` and `with_action`",
            "enum": [
              "always",
              "with_action"
            ],
            "type": "string"
          },
          "cluster_agent_id": {
            "description": "The ID of the Cluster Agent to associate with this environment",
            "format": "int32",
            "type": "integer"
          },
          "description": {
            "description": "The description of the environment",
            "type": "string"
          },
          "external_url": {
            "description": "Place to link to for this environment",
            "type": "string"
          },
          "flux_resource_path": {
            "description": "The Flux resource path to associate with this environment",
            "type": "string"
          },
          "kubernetes_namespace": {
            "description": "The Kubernetes namespace to associate with this environment",
            "type": "string"
          },
          "name": {
            "description": "The name of the environment",
            "type": "string"
          },
          "tier": {
            "description": "The tier of the new environment. Allowed values are `production`, `staging`, `testing`, `development`, and `other`",
            "enum": [
              "production",
              "staging",
              "testing",
              "development",
              "other"
            ],
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdEnvironmentsEnvironmentIdStop": {
        "description": "Stop an environment",
        "properties": {
          "force": {
            "default": false,
            "description": "Force environment to stop without executing `on_stop` actions",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "postApiV4ProjectsIdEnvironmentsStopStale": {
        "description": "Stop stale environments",
        "properties": {
          "before": {
            "description": "Stop all environments that were last modified or deployed to before this date.",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "before"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdExport": {
        "description": "Start export",
        "properties": {
          "description": {
            "description": "Override the project description",
            "type": "string"
          },
          "upload": {
            "properties": {
              "http_method": {
                "default": "PUT",
                "description": "HTTP method to upload the exported project",
                "enum": [
                  "PUT",
                  "POST"
                ],
                "type": "string"
              },
              "url": {
                "description": "The URL to upload the project",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "postApiV4ProjectsIdExportRelations": {
        "description": "Start relations export",
        "properties": {
          "batched": {
            "description": "Whether to export in batches",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "postApiV4ProjectsIdFeatureFlags": {
        "description": "Create a new feature flag",
        "properties": {
          "active": {
            "description": "The active state of the flag. Defaults to `true`. Supported in GitLab 13.3 and later",
            "type": "boolean"
          },
          "description": {
            "description": "The description of the feature flag",
            "type": "string"
          },
          "name": {
            "description": "The name of the feature flag",
            "type": "string"
          },
          "strategies": {
            "items": {
              "properties": {
                "name": {
                  "description": "The strategy name. Can be `default`, `gradualRolloutUserId`, `userWithId`, or `gitlabUserList`. In GitLab 13.5 and later, can be `flexibleRollout`",
                  "type": "string"
                },
                "parameters": {
                  "description": "The strategy parameters as a JSON-formatted string e.g. `{\"userIds\":\"user1\"}`",
                  "type": "string"
                },
                "scopes": {
                  "items": {
                    "properties": {
                      "environment_scope": {
                        "description": "The environment scope of the scope",
                        "type": "string"
                      }
                    },
                    "required": [
                      "environment_scope"
                    ],
                    "type": "object"
                  },
                  "type": "array"
                },
                "user_list_id": {
                  "description": "The ID of the feature flag user list. If strategy is `gitlabUserList`.",
                  "format": "int32",
                  "type": "integer"
                }
              },
              "required": [
                "name"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "version": {
            "description": "The version of the feature flag. Must be `new_version_flag`. Omit to create a Legacy feature flag.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdFeatureFlagsUserLists": {
        "description": "Create a feature flag user list",
        "properties": {
          "name": {
            "description": "The name of the list",
            "type": "string"
          },
          "user_xids": {
            "description": "A comma separated list of external user ids",
            "type": "string"
          }
        },
        "required": [
          "name",
          "user_xids"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdFork": {
        "description": "Fork new project for the current user or provided namespace.",
        "properties": {
          "branches": {
            "description": "Branches to fork",
            "type": "string"
          },
          "description": {
            "description": "The description that will be assigned to the fork",
            "example": "Description",
            "type": "string"
          },
          "mr_default_target_self": {
            "description": "Merge requests of this forked project targets itself by default",
            "type": "boolean"
          },
          "name": {
            "description": "The name that will be assigned to the fork",
            "example": "Fork",
            "type": "string"
          },
          "namespace": {
            "description": "(deprecated) The ID or name of the namespace that the project will be forked into",
            "example": "gitlab",
            "type": "string"
          },
          "namespace_id": {
            "description": "The ID of the namespace that the project will be forked into",
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "namespace_path": {
            "description": "The path of the namespace that the project will be forked into",
            "example": "new_path/gitlab",
            "type": "string"
          },
          "path": {
            "description": "The path that will be assigned to the fork",
            "example": "fork",
            "type": "string"
          },
          "visibility": {
            "description": "The visibility of the fork",
            "enum": [
              "private",
              "internal",
              "public"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "postApiV4ProjectsIdFreezePeriods": {
        "description": "Create a freeze period",
        "properties": {
          "cron_timezone": {
            "description": "The time zone for the cron fields, defaults to UTC if not provided",
            "type": "string"
          },
          "freeze_end": {
            "description": "End of the freeze period in cron format",
            "type": "string"
          },
          "freeze_start": {
            "description": "Start of the freeze period in cron format.",
            "type": "string"
          }
        },
        "required": [
          "freeze_start",
          "freeze_end"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdHooks": {
        "additionalProperties": false,
        "description": "Add project hook",
        "properties": {
          "branch_filter_strategy": {
            "description": "Filter push events by branch. Possible values are `wildcard` (default), `regex`, and `all_branches`",
            "enum": [
              "wildcard",
              "regex",
              "all_branches"
            ],
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger hook on confidential issues events",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger hook on confidential note (comment) events",
            "type": "boolean"
          },
          "custom_headers": {
            "description": "Custom headers",
            "items": {
              "properties": {
                "key": {
                  "description": "Name of the header",
                  "example": "X-Custom-Header",
                  "type": "string"
                },
                "value": {
                  "description": "Value of the header",
                  "example": "value",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "custom_webhook_template": {
            "description": "Custom template for the request payload",
            "type": "string"
          },
          "deployment_events": {
            "description": "Trigger hook on deployment events",
            "type": "boolean"
          },
          "description": {
            "description": "Description of the hook",
            "type": "string"
          },
          "emoji_events": {
            "description": "Trigger hook on emoji events",
            "type": "boolean"
          },
          "enable_ssl_verification": {
            "description": "Do SSL verification when triggering the hook",
            "type": "boolean"
          },
          "feature_flag_events": {
            "description": "Trigger hook on feature flag events",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger hook on issues events",
            "type": "boolean"
          },
          "job_events": {
            "description": "Trigger hook on job events",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger hook on merge request events",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the hook",
            "type": "string"
          },
          "note_events": {
            "description": "Trigger hook on note (comment) events",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger hook on pipeline events",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger hook on push events",
            "type": "boolean"
          },
          "push_events_branch_filter": {
            "description": "Trigger hook on specified branch only",
            "type": "string"
          },
          "releases_events": {
            "description": "Trigger hook on release events",
            "type": "boolean"
          },
          "resource_access_token_events": {
            "description": "Trigger hook on project access token expiry events",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger hook on tag push events",
            "type": "boolean"
          },
          "token": {
            "description": "Secret token to validate received payloads; this will not be returned in the response",
            "type": "string"
          },
          "url": {
            "description": "The URL to send the request to",
            "example": "http://example.com/hook",
            "type": "string"
          },
          "url_variables": {
            "description": "URL variables for interpolation",
            "items": {
              "properties": {
                "key": {
                  "description": "Name of the variable",
                  "example": "token",
                  "type": "string"
                },
                "value": {
                  "description": "Value of the variable",
                  "example": "123",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "vulnerability_events": {
            "description": "Trigger hook on vulnerability events",
            "type": "boolean"
          },
          "wiki_page_events": {
            "description": "Trigger hook on wiki events",
            "type": "boolean"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdHousekeeping": {
        "description": "Start the housekeeping task for a project",
        "properties": {
          "task": {
            "default": "eager",
            "description": "`prune` to trigger manual prune of unreachable objects or `eager` to trigger eager housekeeping.",
            "enum": [
              "eager",
              "prune"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "postApiV4ProjectsIdIntegrationsMattermostSlashCommandsTrigger": {
        "description": "Trigger a slash command for mattermost-slash-commands",
        "properties": {
          "token": {
            "description": "The Mattermost token.",
            "type": "string"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdIntegrationsSlackSlashCommandsTrigger": {
        "description": "Trigger a slash command for slack-slash-commands",
        "properties": {
          "token": {
            "description": "The Slack token.",
            "type": "string"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdInvitations": {
        "description": "Invite non-members by email address to a group or project.",
        "properties": {
          "access_level": {
            "description": "A valid access level (defaults: `30`, developer access level)",
            "enum": [
              10,
              15,
              20,
              30,
              40,
              50,
              5
            ],
            "format": "int32",
            "type": "integer"
          },
          "email": {
            "description": "The email address to invite, or multiple emails separated by comma",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "expires_at": {
            "description": "Date string in the format YEAR-MONTH-DAY",
            "format": "date-time",
            "type": "string"
          },
          "invite_source": {
            "default": "invitations-api",
            "description": "Source that triggered the member creation process",
            "type": "string"
          },
          "member_role_id": {
            "description": "The ID of a member role for the invited user",
            "format": "int32",
            "type": "integer"
          },
          "user_id": {
            "description": "The user ID of the new member or multiple IDs separated by commas.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "access_level"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdIssuesIssueIidAwardEmoji": {
        "description": "Add a new emoji reaction",
        "properties": {
          "name": {
            "description": "Name of the emoji without colons.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdIssuesIssueIidLinks": {
        "description": "Create an issue link",
        "properties": {
          "link_type": {
            "description": "The type of the relation (“relates_to”, “blocks”, “is_blocked_by”),defaults to “relates_to”)",
            "enum": [
              "relates_to",
              "blocks",
              "is_blocked_by"
            ],
            "type": "string"
          },
          "target_issue_iid": {
            "description": "The internal ID of a target project’s issue",
            "type": "string"
          },
          "target_project_id": {
            "description": "The ID or URL-encoded path of a target project",
            "type": "string"
          }
        },
        "required": [
          "target_project_id",
          "target_issue_iid"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdIssuesIssueIidNotesNoteIdAwardEmoji": {
        "description": "Add a new emoji reaction",
        "properties": {
          "name": {
            "description": "Name of the emoji without colons.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdJobTokenScopeAllowlist": {
        "description": "Add target project to allowlist.",
        "properties": {
          "target_project_id": {
            "description": "ID of target project",
            "example": 2,
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "target_project_id"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdJobTokenScopeGroupsAllowlist": {
        "description": "Add target group to allowlist.",
        "properties": {
          "target_group_id": {
            "description": "ID of target group",
            "example": 2,
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "target_group_id"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdJobsJobIdPlay": {
        "description": "Trigger an actionable job (manual, delayed, etc)",
        "properties": {
          "job_variables_attributes": {
            "description": "User defined variables that will be included when running the job",
            "items": {
              "properties": {
                "key": {
                  "description": "The name of the variable",
                  "example": "foo",
                  "type": "string"
                },
                "value": {
                  "description": "The value of the variable",
                  "example": "bar",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "postApiV4ProjectsIdMembers": {
        "description": "Adds a member to a group or project.",
        "properties": {
          "access_level": {
            "description": "A valid access level.",
            "format": "int32",
            "type": "integer"
          },
          "expires_at": {
            "description": "Date string in the format YEAR-MONTH-DAY",
            "format": "date-time",
            "type": "string"
          },
          "invite_source": {
            "default": "members-api",
            "description": "Source that triggered the member creation process",
            "type": "string"
          },
          "user_id": {
            "description": "The user ID of the new member or multiple IDs separated by commas.",
            "format": "int32",
            "type": "integer"
          },
          "username": {
            "description": "The username of the new member or multiple usernames separated by commas.",
            "type": "string"
          }
        },
        "required": [
          "access_level"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdMergeRequests": {
        "description": "Create merge request",
        "properties": {
          "add_labels": {
            "description": "Comma-separated label names to add to a merge request.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "allow_collaboration": {
            "description": "Allow commits from members who can merge to the target branch.",
            "type": "boolean"
          },
          "allow_maintainer_to_push": {
            "description": "[deprecated] See allow_collaboration",
            "type": "boolean"
          },
          "approvals_before_merge": {
            "description": "Number of approvals required before this can be merged",
            "format": "int32",
            "type": "integer"
          },
          "assignee_id": {
            "description": "Assignee user ID.",
            "format": "int32",
            "type": "integer"
          },
          "assignee_ids": {
            "description": "The IDs of the users to assign the merge request to, as a comma-separated list. Set to 0 or provide an empty value to unassign all assignees.",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "description": {
            "description": "Description of the merge request. Limited to 1,048,576 characters.",
            "type": "string"
          },
          "labels": {
            "description": "Comma-separated label names for a merge request. Set to an empty string to unassign all labels.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "merge_after": {
            "description": "Date after which the merge request can be merged.",
            "type": "string"
          },
          "milestone_id": {
            "description": "The global ID of a milestone to assign the merge reques to.",
            "format": "int32",
            "type": "integer"
          },
          "remove_labels": {
            "description": "Comma-separated label names to remove from a merge request.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "remove_source_branch": {
            "description": "Flag indicating if a merge request should remove the source branch when merging.",
            "type": "boolean"
          },
          "reviewer_ids": {
            "description": "The IDs of the users to review the merge request, as a comma-separated list. Set to 0 or provide an empty value to unassign all reviewers.",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "source_branch": {
            "description": "The source branch.",
            "type": "string"
          },
          "squash": {
            "description": "Squash commits into a single commit when merging.",
            "type": "boolean"
          },
          "target_branch": {
            "description": "The target branch.",
            "type": "string"
          },
          "target_project_id": {
            "description": "The target project of the merge request defaults to the :id of the project.",
            "format": "int32",
            "type": "integer"
          },
          "title": {
            "description": "The title of the merge request.",
            "type": "string"
          }
        },
        "required": [
          "title",
          "source_branch",
          "target_branch"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdMergeRequestsMergeRequestIidAddSpentTime": {
        "description": "Add spent time for a merge_request",
        "properties": {
          "duration": {
            "description": "The duration in human format.",
            "type": "string"
          }
        },
        "required": [
          "duration"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdMergeRequestsMergeRequestIidApprovals": {
        "description": "Deprecated in 16.0: Use the merge request approvals API instead. Change approval-related configuration",
        "properties": {
          "approvals_required": {
            "description": "The amount of approvals required. Must be higher than the project approvals",
            "example": 2,
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "approvals_required"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdMergeRequestsMergeRequestIidApprove": {
        "description": "Approve a merge request",
        "properties": {
          "approval_password": {
            "description": "Current user's password if project is set to require explicit auth on approval",
            "example": "secret",
            "type": "string"
          },
          "sha": {
            "description": "When present, must have the HEAD SHA of the source branch",
            "type": "string"
          }
        },
        "type": "object"
      },
      "postApiV4ProjectsIdMergeRequestsMergeRequestIidAwardEmoji": {
        "description": "Add a new emoji reaction",
        "properties": {
          "name": {
            "description": "Name of the emoji without colons.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdMergeRequestsMergeRequestIidContextCommits": {
        "description": "Create merge request context commits",
        "properties": {
          "commits": {
            "description": "The context commits’ SHA.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "commits"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotes": {
        "description": "Create a new draft note",
        "properties": {
          "commit_id": {
            "description": "The sha of a commit to associate the draft note to.",
            "type": "string"
          },
          "in_reply_to_discussion_id": {
            "description": "The ID of a discussion the draft note replies to.",
            "type": "string"
          },
          "note": {
            "description": "The content of a note.",
            "type": "string"
          },
          "position": {
            "properties": {
              "base_sha": {
                "description": "Base commit SHA in the source branch",
                "type": "string"
              },
              "head_sha": {
                "description": "SHA referencing HEAD of this merge request",
                "type": "string"
              },
              "height": {
                "description": "Height of the image",
                "format": "int32",
                "type": "integer"
              },
              "line_range": {
                "description": "Multi-line start and end",
                "properties": {
                  "end": {
                    "properties": {
                      "line_code": {
                        "description": "End line code for multi-line note",
                        "type": "string"
                      },
                      "new_line": {
                        "description": "End new_line line number",
                        "type": "string"
                      },
                      "old_line": {
                        "description": "End old_line line number",
                        "type": "string"
                      },
                      "type": {
                        "description": "End line type for multi-line note",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "start": {
                    "properties": {
                      "line_code": {
                        "description": "Start line code for multi-line note",
                        "type": "string"
                      },
                      "new_line": {
                        "description": "Start new_line line number",
                        "type": "string"
                      },
                      "old_line": {
                        "description": "Start old_line line number",
                        "type": "string"
                      },
                      "type": {
                        "description": "Start line type for multi-line note",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "new_line": {
                "description": "Line number after change",
                "format": "int32",
                "type": "integer"
              },
              "new_path": {
                "description": "File path after change",
                "type": "string"
              },
              "old_line": {
                "description": "Line number before change",
                "format": "int32",
                "type": "integer"
              },
              "old_path": {
                "description": "File path before change",
                "type": "string"
              },
              "position_type": {
                "description": "Type of the position reference",
                "enum": [
                  "text",
                  "image",
                  "file"
                ],
                "type": "string"
              },
              "start_sha": {
                "description": "SHA referencing commit in target branch",
                "type": "string"
              },
              "width": {
                "description": "Width of the image",
                "format": "int32",
                "type": "integer"
              },
              "x": {
                "description": "X coordinate in the image",
                "format": "int32",
                "type": "integer"
              },
              "y": {
                "description": "Y coordinate in the image",
                "format": "int32",
                "type": "integer"
              }
            },
            "required": [
              "base_sha",
              "start_sha",
              "head_sha",
              "position_type"
            ],
            "type": "object"
          },
          "resolve_discussion": {
            "description": "The associated discussion should be resolved.",
            "type": "boolean"
          }
        },
        "required": [
          "note"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdMergeRequestsMergeRequestIidNotesNoteIdAwardEmoji": {
        "description": "Add a new emoji reaction",
        "properties": {
          "name": {
            "description": "Name of the emoji without colons.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdMergeRequestsMergeRequestIidPipelines": {
        "description": "Create merge request pipeline",
        "properties": {
          "async": {
            "default": false,
            "description": "Indicates if the merge request pipeline creation should be performed asynchronously. If set to `true`, the pipeline will be created outside of the API request and the endpoint will return an empty response with a `202` status code. When the response is `202`, the creation can still fail outside of this request.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "postApiV4ProjectsIdMergeRequestsMergeRequestIidTimeEstimate": {
        "description": "Set a time estimate for a merge_request",
        "properties": {
          "duration": {
            "description": "The duration in human format.",
            "example": "3h30m",
            "type": "string"
          }
        },
        "required": [
          "duration"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdPackagesComposer": {
        "description": "Composer packages endpoint for registering packages",
        "properties": {
          "branch": {
            "description": "The name of the branch",
            "example": "release",
            "type": "string"
          },
          "tag": {
            "description": "The name of the tag",
            "example": "v1.0.0",
            "type": "string"
          }
        },
        "type": "object"
      },
      "postApiV4ProjectsIdPackagesHelmApiChannelCharts": {
        "description": "Upload a chart",
        "properties": {
          "chart": {
            "description": "The chart file to be published (generated by Multipart middleware)",
            "type": "file"
          }
        },
        "required": [
          "chart"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdPackagesProtectionRules": {
        "description": "Create a package protection rule for a project",
        "properties": {
          "minimum_access_level_for_push": {
            "description": "Minimum GitLab access level able to push a package. Must be at least `maintainer`.\n            For example `maintainer`, `owner` or `admin`.",
            "enum": [
              "maintainer",
              "owner",
              "admin"
            ],
            "type": "string"
          },
          "package_name_pattern": {
            "description": "Package name protected by the rule. For example @my-scope/my-package-*.\n            Wildcard character * allowed.",
            "type": "string"
          },
          "package_type": {
            "description": "Package type protected by the rule. For example npm.",
            "enum": [
              "conan",
              "maven",
              "npm",
              "pypi"
            ],
            "type": "string"
          }
        },
        "required": [
          "package_name_pattern",
          "package_type",
          "minimum_access_level_for_push"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdPackagesPypi": {
        "description": "The PyPi Package upload endpoint",
        "properties": {
          "author_email": {
            "example": "cschultz@example.com, snoopy@peanuts.com",
            "type": "string"
          },
          "content": {
            "description": "The package file to be published (generated by Multipart middleware)",
            "type": "file"
          },
          "description": {
            "type": "string"
          },
          "description_content_type": {
            "example": "text/markdown; charset=UTF-8; variant=GFM",
            "type": "string"
          },
          "keywords": {
            "example": "dog,puppy,voting,election",
            "type": "string"
          },
          "md5_digest": {
            "example": "900150983cd24fb0d6963f7d28e17f72",
            "type": "string"
          },
          "metadata_version": {
            "example": "2.3",
            "type": "string"
          },
          "name": {
            "example": "my.pypi.package",
            "type": "string"
          },
          "requires_python": {
            "example": ">=3.7",
            "type": "string"
          },
          "sha256_digest": {
            "example": "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad",
            "type": "string"
          },
          "summary": {
            "example": "A module for collecting votes from beagles.",
            "type": "string"
          },
          "version": {
            "example": "1.3.7",
            "type": "string"
          }
        },
        "required": [
          "content",
          "name",
          "version"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdPackagesRubygemsApiV1Gems": {
        "description": "Upload a gem",
        "properties": {
          "file": {
            "description": "The package file to be published (generated by Multipart middleware)",
            "type": "file"
          }
        },
        "required": [
          "file"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdPagesDomains": {
        "description": "Create a new pages domain",
        "properties": {
          "auto_ssl_enabled": {
            "default": false,
            "description": "Enables automatic generation of SSL certificates issued by Let's Encrypt for custom domains.",
            "type": "boolean"
          },
          "certificate": {
            "description": "The certificate",
            "type": "file"
          },
          "domain": {
            "description": "The domain",
            "type": "string"
          },
          "key": {
            "description": "The key",
            "type": "file"
          },
          "user_provided_certificate": {
            "type": "string"
          },
          "user_provided_key": {
            "type": "string"
          }
        },
        "required": [
          "domain"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdPipeline": {
        "additionalProperties": false,
        "description": "Create a new pipeline",
        "properties": {
          "ref": {
            "description": "Reference",
            "example": "develop",
            "type": "string"
          },
          "variables": {
            "description": "Array of variables available in the pipeline",
            "items": {
              "additionalProperties": false,
              "properties": {
                "key": {
                  "description": "The key of the variable",
                  "example": "UPLOAD_TO_S3",
                  "type": "string"
                },
                "value": {
                  "description": "The value of the variable",
                  "example": "true",
                  "type": "string"
                },
                "variable_type": {
                  "default": "env_var",
                  "description": "The type of variable, must be one of env_var or file. Defaults to env_var",
                  "enum": [
                    "env_var",
                    "file"
                  ],
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "ref"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdPipelineSchedules": {
        "description": "Create a new pipeline schedule",
        "properties": {
          "active": {
            "default": true,
            "description": "The activation of pipeline schedule",
            "example": true,
            "type": "boolean"
          },
          "cron": {
            "description": "The cron",
            "example": "* * * * *",
            "type": "string"
          },
          "cron_timezone": {
            "default": "UTC",
            "description": "The timezone",
            "example": "Asia/Tokyo",
            "type": "string"
          },
          "description": {
            "description": "The description of pipeline schedule",
            "example": "Test schedule pipeline",
            "type": "string"
          },
          "ref": {
            "description": "The branch/tag name will be triggered",
            "example": "develop",
            "type": "string"
          }
        },
        "required": [
          "description",
          "ref",
          "cron"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdVariables": {
        "description": "Create a new pipeline schedule variable",
        "properties": {
          "key": {
            "description": "The key of the variable",
            "example": "NEW_VARIABLE",
            "type": "string"
          },
          "value": {
            "description": "The value of the variable",
            "example": "new value",
            "type": "string"
          },
          "variable_type": {
            "default": "env_var",
            "description": "The type of variable, must be one of env_var or file. Defaults to env_var",
            "enum": [
              "env_var",
              "file"
            ],
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdProtectedBranches": {
        "description": "Protect a single branch",
        "properties": {
          "allow_force_push": {
            "default": false,
            "description": "Allow force push for all users with push access.",
            "type": "boolean"
          },
          "allowed_to_merge": {
            "description": "An array of users/groups allowed to merge",
            "items": {
              "properties": {
                "_destroy": {
                  "description": "Delete the object when true",
                  "type": "boolean"
                },
                "access_level": {
                  "enum": [
                    30,
                    40,
                    60,
                    0
                  ],
                  "format": "int32",
                  "type": "integer"
                },
                "group_id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                },
                "id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                },
                "user_id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "allowed_to_push": {
            "description": "An array of users/groups allowed to push",
            "items": {
              "properties": {
                "_destroy": {
                  "description": "Delete the object when true",
                  "type": "boolean"
                },
                "access_level": {
                  "enum": [
                    30,
                    40,
                    60,
                    0
                  ],
                  "format": "int32",
                  "type": "integer"
                },
                "deploy_key_id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                },
                "group_id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                },
                "id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                },
                "user_id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "allowed_to_unprotect": {
            "description": "An array of users/groups allowed to unprotect",
            "items": {
              "properties": {
                "_destroy": {
                  "description": "Delete the object when true",
                  "type": "boolean"
                },
                "access_level": {
                  "enum": [
                    30,
                    40,
                    60
                  ],
                  "format": "int32",
                  "type": "integer"
                },
                "group_id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                },
                "id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                },
                "user_id": {
                  "example": 1,
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "code_owner_approval_required": {
            "description": "Prevent pushes to this branch if it matches an item in CODEOWNERS",
            "type": "boolean"
          },
          "merge_access_level": {
            "description": "Access levels allowed to merge (defaults: `40`, maintainer access level)",
            "enum": [
              30,
              40,
              60,
              0
            ],
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "The name of the protected branch",
            "example": "main",
            "type": "string"
          },
          "push_access_level": {
            "description": "Access levels allowed to push (defaults: `40`, maintainer access level)",
            "enum": [
              30,
              40,
              60,
              0
            ],
            "format": "int32",
            "type": "integer"
          },
          "unprotect_access_level": {
            "description": "Access levels allowed to unprotect (defaults: `40`, maintainer access level)",
            "enum": [
              30,
              40,
              60
            ],
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdProtectedTags": {
        "description": "Protect a single tag or wildcard",
        "properties": {
          "allowed_to_create": {
            "description": "An array of users/groups allowed to create",
            "items": {
              "properties": {
                "access_level": {
                  "enum": [
                    30,
                    40,
                    60,
                    0
                  ],
                  "format": "int32",
                  "type": "integer"
                },
                "deploy_key_id": {
                  "format": "int32",
                  "type": "integer"
                },
                "group_id": {
                  "format": "int32",
                  "type": "integer"
                },
                "user_id": {
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "create_access_level": {
            "description": "Access levels allowed to create (defaults: `40`, maintainer access level)",
            "enum": [
              30,
              40,
              60,
              0
            ],
            "example": 30,
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "The name of the protected tag",
            "example": "release-1-0",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdRegistryProtectionRepositoryRules": {
        "description": "Create a container protection rule for a project",
        "properties": {
          "minimum_access_level_for_delete": {
            "description": "Minimum GitLab access level to allow to delete container images in the container registry.\n            For example maintainer, owner or admin.",
            "enum": [
              "maintainer",
              "owner",
              "admin"
            ],
            "type": "string"
          },
          "minimum_access_level_for_push": {
            "description": "Minimum GitLab access level to allow to push container images to the container registry.\n            For example maintainer, owner or admin.",
            "enum": [
              "maintainer",
              "owner",
              "admin"
            ],
            "type": "string"
          },
          "repository_path_pattern": {
            "description": "Container repository path pattern protected by the protection rule.\n            For example `flight/flight-*`. Wildcard character `*` allowed.",
            "type": "string"
          }
        },
        "required": [
          "repository_path_pattern"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdReleases": {
        "description": "Create a release",
        "properties": {
          "assets": {
            "properties": {
              "links": {
                "items": {
                  "properties": {
                    "direct_asset_path": {
                      "description": "Optional path for a direct asset link",
                      "type": "string"
                    },
                    "filepath": {
                      "description": "Deprecated: optional path for a direct asset link",
                      "type": "string"
                    },
                    "link_type": {
                      "description": "The type of the link: `other`, `runbook`, `image`, `package`. Defaults to `other`",
                      "type": "string"
                    },
                    "name": {
                      "description": "The name of the link. Link names must be unique within the release",
                      "type": "string"
                    },
                    "url": {
                      "description": "The URL of the link. Link URLs must be unique within the release",
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "url"
                  ],
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "description": {
            "description": "The description of the release. You can use Markdown",
            "type": "string"
          },
          "legacy_catalog_publish": {
            "description": "If true, the release will be published to the CI catalog. This parameter is for internal use only and will be removed in a future release. If the feature flag ci_release_cli_catalog_publish_option is disabled, this parameter will be ignored and the release will published to the CI catalog as it was before this parameter was introduced.",
            "type": "boolean"
          },
          "milestone_ids": {
            "description": "The ID of each milestone the release is associated with. GitLab Premium customers can specify group milestones. Cannot be combined with `milestones` parameter.",
            "type": "string"
          },
          "milestones": {
            "description": "The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones. Cannot be combined with `milestone_ids` parameter.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The release name",
            "type": "string"
          },
          "ref": {
            "description": "If a tag specified in `tag_name` doesn't exist, the release is created from `ref` and tagged with `tag_name`. It can be a commit SHA, another tag name, or a branch name.",
            "type": "string"
          },
          "released_at": {
            "description": "Date and time for the release. Defaults to the current time. Expected in ISO 8601 format (`2019-03-15T08:00:00Z`). Only provide this field if creating an upcoming or historical release.",
            "format": "date-time",
            "type": "string"
          },
          "tag_message": {
            "description": "Message to use if creating a new annotated tag",
            "type": "string"
          },
          "tag_name": {
            "description": "The tag where the release is created from",
            "type": "string"
          }
        },
        "required": [
          "tag_name"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdReleasesTagNameAssetsLinks": {
        "description": "Create a release link",
        "properties": {
          "direct_asset_path": {
            "description": "Optional path for a direct asset link",
            "type": "string"
          },
          "filepath": {
            "description": "Deprecated: optional path for a direct asset link",
            "type": "string"
          },
          "link_type": {
            "default": "other",
            "description": "The type of the link: `other`, `runbook`, `image`, or `package`. Defaults to `other`",
            "enum": [
              "other",
              "runbook",
              "image",
              "package"
            ],
            "type": "string"
          },
          "name": {
            "description": "The name of the link. Link names must be unique in the release",
            "type": "string"
          },
          "url": {
            "description": "The URL of the link. Link URLs must be unique in the release.",
            "type": "string"
          }
        },
        "required": [
          "name",
          "url"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdRemoteMirrors": {
        "description": "Create remote mirror for a project",
        "properties": {
          "auth_method": {
            "description": "Determines the mirror authentication method",
            "enum": [
              "ssh_public_key",
              "password"
            ],
            "type": "string"
          },
          "enabled": {
            "description": "Determines if the mirror is enabled",
            "type": "boolean"
          },
          "keep_divergent_refs": {
            "description": "Determines if divergent refs are kept on the target",
            "type": "boolean"
          },
          "mirror_branch_regex": {
            "description": "Determines if only matched branches are mirrored",
            "type": "string"
          },
          "only_protected_branches": {
            "description": "Determines if only protected branches are mirrored",
            "type": "boolean"
          },
          "url": {
            "description": "The URL for a remote mirror",
            "example": "https://*****:*****@example.com/gitlab/example.git",
            "type": "string"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdRepositoryBranches": {
        "description": "Create branch",
        "properties": {
          "branch": {
            "description": "The name of the branch",
            "type": "string"
          },
          "ref": {
            "description": "Create branch from commit sha or existing branch",
            "type": "string"
          }
        },
        "required": [
          "branch",
          "ref"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdRepositoryChangelog": {
        "description": "Generates a changelog section for a release and commits it in a changelog file",
        "properties": {
          "branch": {
            "description": "The branch to commit the changelog changes to",
            "example": "main",
            "type": "string"
          },
          "config_file": {
            "description": "The file path to the configuration file as stored in the project's Git repository. Defaults to '.gitlab/changelog_config.yml'",
            "example": ".gitlab/changelog_config.yml",
            "type": "string"
          },
          "date": {
            "description": "The date and time of the release",
            "example": "2021-09-20T11:50:22.001+00:00",
            "format": "date-time",
            "type": "string"
          },
          "file": {
            "default": "CHANGELOG.md",
            "description": "The file to commit the changelog changes to",
            "example": "CHANGELOG.md",
            "type": "string"
          },
          "from": {
            "description": "The first commit in the range of commits to use for the changelog",
            "example": "ed899a2f4b50b4370feeea94676502b42383c746",
            "type": "string"
          },
          "message": {
            "description": "The commit message to use when committing the changelog",
            "example": "Initial commit",
            "type": "string"
          },
          "to": {
            "description": "The last commit in the range of commits to use for the changelog",
            "example": "6104942438c14ec7bd21c6cd5bd995272b3faff6",
            "type": "string"
          },
          "trailer": {
            "default": "Changelog",
            "description": "The Git trailer to use for determining if commits are to be included in the changelog",
            "example": "Changelog",
            "type": "string"
          },
          "version": {
            "description": "The version of the release, using the semantic versioning format",
            "example": "1.0.0",
            "type": "string"
          }
        },
        "required": [
          "version"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdRepositoryCommits": {
        "description": "Commit multiple file changes as one commit",
        "properties": {
          "actions": {
            "description": "Actions to perform in commit",
            "items": {
              "properties": {
                "action": {
                  "description": "The action to perform, `create`, `delete`, `move`, `update`, `chmod`",
                  "enum": [
                    "create",
                    "update",
                    "move",
                    "delete",
                    "chmod"
                  ],
                  "type": "string"
                },
                "content": {
                  "description": "File content",
                  "example": "Some file content",
                  "type": "string"
                },
                "encoding": {
                  "default": "text",
                  "description": "`text` or `base64`",
                  "enum": [
                    "text",
                    "base64"
                  ],
                  "type": "string"
                },
                "execute_filemode": {
                  "description": "When `true/false` enables/disables the execute flag on the file.",
                  "type": "boolean"
                },
                "file_path": {
                  "description": "Full path to the file.",
                  "example": "lib/class.rb",
                  "type": "string"
                },
                "last_commit_id": {
                  "description": "Last known file commit id",
                  "example": "2695effb5807a22ff3d138d593fd856244e155e7",
                  "type": "string"
                },
                "previous_path": {
                  "description": "Original full path to the file being moved.",
                  "example": "lib/class.rb",
                  "type": "string"
                }
              },
              "required": [
                "action",
                "file_path",
                "previous_path",
                "content",
                "execute_filemode"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "author_email": {
            "description": "Author email for commit",
            "example": "janedoe@example.com",
            "type": "string"
          },
          "author_name": {
            "description": "Author name for commit",
            "example": "Jane Doe",
            "type": "string"
          },
          "branch": {
            "description": "Name of the branch to commit into. To create a new branch, also provide either `start_branch` or `start_sha`, and optionally `start_project`.",
            "example": "master",
            "type": "string"
          },
          "commit_message": {
            "description": "Commit message",
            "example": "initial commit",
            "type": "string"
          },
          "force": {
            "default": false,
            "description": "When `true` overwrites the target branch with a new commit based on the `start_branch` or `start_sha`",
            "type": "boolean"
          },
          "start_branch": {
            "description": "Name of the branch to start the new branch from",
            "example": "staging",
            "type": "string"
          },
          "start_project": {
            "description": "The ID or path of the project to start the new branch from",
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "start_sha": {
            "description": "SHA of the commit to start the new branch from",
            "example": "2695effb5807a22ff3d138d593fd856244e155e7",
            "type": "string"
          },
          "stats": {
            "default": true,
            "description": "Include commit stats",
            "type": "boolean"
          }
        },
        "required": [
          "branch",
          "commit_message",
          "actions"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdRepositoryCommitsShaCherryPick": {
        "description": "Cherry pick commit into a branch",
        "properties": {
          "branch": {
            "description": "The name of the branch",
            "example": "master",
            "type": "string"
          },
          "dry_run": {
            "default": false,
            "description": "Does not commit any changes",
            "type": "boolean"
          },
          "message": {
            "description": "A custom commit message to use for the picked commit",
            "example": "Initial commit",
            "type": "string"
          }
        },
        "required": [
          "branch"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdRepositoryCommitsShaComments": {
        "description": "Post comment to commit",
        "properties": {
          "line": {
            "description": "The line number",
            "example": 11,
            "format": "int32",
            "type": "integer"
          },
          "line_type": {
            "default": "new",
            "description": "The type of the line",
            "enum": [
              "new",
              "old"
            ],
            "type": "string"
          },
          "note": {
            "description": "The text of the comment",
            "example": "Nice code!",
            "type": "string"
          },
          "path": {
            "description": "The file path",
            "example": "doc/update/5.4-to-6.0.md",
            "type": "string"
          }
        },
        "required": [
          "note",
          "line",
          "line_type"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdRepositoryCommitsShaRevert": {
        "description": "Revert a commit in a branch",
        "properties": {
          "branch": {
            "description": "Target branch name",
            "example": "master",
            "type": "string"
          },
          "dry_run": {
            "default": false,
            "description": "Does not commit any changes",
            "type": "boolean"
          }
        },
        "required": [
          "branch"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdRepositoryFilesFilePath": {
        "description": "Create new file in repository",
        "properties": {
          "author_email": {
            "description": "The email of the author",
            "example": "johndoe@example.com",
            "type": "string"
          },
          "author_name": {
            "description": "The name of the author",
            "example": "John Doe",
            "type": "string"
          },
          "branch": {
            "description": "Name of the branch to commit into. To create a new branch, also provide `start_branch`.",
            "example": "main",
            "type": "string"
          },
          "commit_message": {
            "description": "Commit message",
            "example": "Initial commit",
            "type": "string"
          },
          "content": {
            "description": "File content",
            "example": "file content",
            "type": "string"
          },
          "encoding": {
            "default": "text",
            "description": "File encoding",
            "enum": [
              "base64",
              "text"
            ],
            "type": "string"
          },
          "execute_filemode": {
            "description": "Enable / Disable the executable flag on the file path",
            "type": "boolean"
          },
          "last_commit_id": {
            "description": "Last known commit id for this file",
            "example": "2695effb5807a22ff3d138d593fd856244e155e7",
            "type": "string"
          },
          "start_branch": {
            "description": "Name of the branch to start the new commit from",
            "example": "main",
            "type": "string"
          }
        },
        "required": [
          "branch",
          "commit_message",
          "content"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdRepositoryStorageMoves": {
        "description": "Schedule a project repository storage move",
        "properties": {
          "destination_storage_name": {
            "description": "The destination storage shard",
            "type": "string"
          }
        },
        "type": "object"
      },
      "postApiV4ProjectsIdRepositoryTags": {
        "description": "Create a new repository tag",
        "properties": {
          "message": {
            "description": "Specifying a message creates an annotated tag",
            "example": "Release 1.0.0",
            "type": "string"
          },
          "ref": {
            "description": "The commit sha or branch name",
            "example": "2695effb5807a22ff3d138d593fd856244e155e7",
            "type": "string"
          },
          "tag_name": {
            "description": "The name of the tag",
            "example": "v.1.0.0",
            "type": "string"
          }
        },
        "required": [
          "tag_name",
          "ref"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdRunners": {
        "description": "Assign a runner to project",
        "properties": {
          "runner_id": {
            "description": "The ID of a runner",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "runner_id"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdSecureFiles": {
        "description": "Create a secure file",
        "properties": {
          "file": {
            "description": "The secure file being uploaded",
            "type": "file"
          },
          "name": {
            "description": "The name of the file being uploaded. The filename must be unique within\n            the project",
            "type": "string"
          }
        },
        "required": [
          "name",
          "file"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdServicesMattermostSlashCommandsTrigger": {
        "description": "Trigger a slash command for mattermost-slash-commands",
        "properties": {
          "token": {
            "description": "The Mattermost token.",
            "type": "string"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdServicesSlackSlashCommandsTrigger": {
        "description": "Trigger a slash command for slack-slash-commands",
        "properties": {
          "token": {
            "description": "The Slack token.",
            "type": "string"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdShare": {
        "description": "Share the project with a group",
        "properties": {
          "expires_at": {
            "description": "Share expiration date",
            "format": "date",
            "type": "string"
          },
          "group_access": {
            "description": "The group access level",
            "enum": [
              10,
              15,
              20,
              30,
              40,
              50
            ],
            "format": "int32",
            "type": "integer"
          },
          "group_id": {
            "description": "The ID of a group",
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "member_role_id": {
            "description": "The ID of the Member Role to be assigned to the group",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "group_id",
          "group_access"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdSnippets": {
        "description": "Create a new project snippet",
        "properties": {
          "content": {
            "description": "The content of a snippet",
            "type": "string"
          },
          "description": {
            "description": "The description of a snippet",
            "type": "string"
          },
          "file_name": {
            "description": "The name of a snippet file",
            "type": "string"
          },
          "files": {
            "description": "An array of files",
            "items": {
              "properties": {
                "content": {
                  "description": "The content of a snippet file",
                  "type": "string"
                },
                "file_path": {
                  "description": "The path of a snippet file",
                  "type": "string"
                }
              },
              "required": [
                "file_path",
                "content"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "title": {
            "description": "The title of the snippet",
            "type": "string"
          },
          "visibility": {
            "description": "The visibility of the snippet",
            "enum": [
              "private",
              "internal",
              "public"
            ],
            "type": "string"
          }
        },
        "required": [
          "title",
          "visibility",
          "file_name"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdSnippetsSnippetIdAwardEmoji": {
        "description": "Add a new emoji reaction",
        "properties": {
          "name": {
            "description": "Name of the emoji without colons.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji": {
        "description": "Add a new emoji reaction",
        "properties": {
          "name": {
            "description": "Name of the emoji without colons.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdStatusesSha": {
        "additionalProperties": false,
        "description": "Post status to a commit",
        "properties": {
          "context": {
            "default": "default",
            "description": "A string label to differentiate this status from the status of other systems",
            "example": "coverage",
            "type": "string"
          },
          "coverage": {
            "description": "The total code coverage",
            "example": 100,
            "format": "float",
            "type": "number"
          },
          "description": {
            "description": "A short description of the status",
            "type": "string"
          },
          "name": {
            "default": "default",
            "description": "A string label to differentiate this status from the status of other systems",
            "example": "coverage",
            "type": "string"
          },
          "pipeline_id": {
            "description": "An existing pipeline ID, when multiple pipelines on the same commit SHA have been triggered",
            "format": "int32",
            "type": "integer"
          },
          "ref": {
            "description": "The ref",
            "example": "develop",
            "type": "string"
          },
          "state": {
            "description": "The state of the status",
            "enum": [
              "pending",
              "running",
              "success",
              "failed",
              "canceled",
              "skipped"
            ],
            "example": "pending",
            "type": "string"
          },
          "target_url": {
            "description": "The target URL to associate with this status",
            "example": "https://gitlab.example.com/janedoe/gitlab-foss/builds/91",
            "type": "string"
          }
        },
        "required": [
          "name",
          "state"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdTerraformStateNameLock": {
        "description": "Lock a Terraform state of a certain name",
        "properties": {
          "Created": {
            "description": "Terraform state lock timestamp",
            "type": "string"
          },
          "ID": {
            "description": "Terraform state lock ID",
            "type": "string"
          },
          "Info": {
            "description": "Terraform info",
            "type": "string"
          },
          "Operation": {
            "description": "Terraform operation",
            "type": "string"
          },
          "Path": {
            "description": "Terraform path",
            "type": "string"
          },
          "Version": {
            "description": "Terraform version",
            "type": "string"
          },
          "Who": {
            "description": "Terraform state lock owner",
            "type": "string"
          }
        },
        "required": [
          "ID",
          "Operation",
          "Info",
          "Who",
          "Version",
          "Created",
          "Path"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdTriggers": {
        "description": "Create a trigger token",
        "properties": {
          "description": {
            "description": "The trigger token description",
            "example": "my trigger token description",
            "type": "string"
          },
          "expires_at": {
            "description": "Timestamp of when the pipeline trigger token expires.",
            "example": "2024-07-01",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "description"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdUploads": {
        "description": "Upload a file",
        "properties": {
          "file": {
            "description": "The attachment file to be uploaded",
            "type": "file"
          }
        },
        "required": [
          "file"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdVariables": {
        "description": "Create a new variable in a project",
        "properties": {
          "description": {
            "description": "The description of the variable",
            "type": "string"
          },
          "environment_scope": {
            "description": "The environment_scope of the variable",
            "type": "string"
          },
          "key": {
            "description": "The key of a variable",
            "type": "string"
          },
          "masked": {
            "description": "Whether the variable is masked",
            "type": "boolean"
          },
          "masked_and_hidden": {
            "description": "Whether the variable is masked and hidden",
            "type": "boolean"
          },
          "protected": {
            "description": "Whether the variable is protected",
            "type": "boolean"
          },
          "raw": {
            "description": "Whether the variable will be expanded",
            "type": "boolean"
          },
          "value": {
            "description": "The value of a variable",
            "type": "string"
          },
          "variable_type": {
            "description": "The type of the variable. Default: env_var",
            "enum": [
              "env_var",
              "file"
            ],
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdWikis": {
        "description": "Create a wiki page",
        "properties": {
          "content": {
            "description": "Content of a wiki page",
            "type": "string"
          },
          "format": {
            "default": "markdown",
            "description": "Format of a wiki page. Available formats are markdown, rdoc, asciidoc and org",
            "enum": [
              "markdown",
              "rdoc",
              "asciidoc",
              "org"
            ],
            "type": "string"
          },
          "front_matter": {
            "properties": {
              "title": {
                "description": "Front matter title of a wiki page",
                "type": "string"
              }
            },
            "type": "object"
          },
          "title": {
            "description": "Title of a wiki page",
            "type": "string"
          }
        },
        "required": [
          "title",
          "content"
        ],
        "type": "object"
      },
      "postApiV4ProjectsIdWikisAttachments": {
        "description": "Upload an attachment to the wiki repository",
        "properties": {
          "branch": {
            "description": "The name of the branch",
            "type": "string"
          },
          "file": {
            "description": "The attachment file to be uploaded",
            "type": "file"
          }
        },
        "required": [
          "file"
        ],
        "type": "object"
      },
      "postApiV4ProjectsUserUserId": {
        "description": "Create new project for a specified user. Only available to admin users.",
        "properties": {
          "allow_merge_on_skipped_pipeline": {
            "description": "Allow to merge if pipeline is skipped",
            "type": "boolean"
          },
          "analytics_access_level": {
            "description": "Analytics access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "approvals_before_merge": {
            "description": "How many approvers should approve merge request by default",
            "format": "int32",
            "type": "integer"
          },
          "auto_cancel_pending_pipelines": {
            "description": "Auto-cancel pending pipelines",
            "enum": [
              "disabled",
              "enabled"
            ],
            "type": "string"
          },
          "auto_devops_deploy_strategy": {
            "description": "Auto Deploy strategy",
            "enum": [
              "continuous",
              "manual",
              "timed_incremental"
            ],
            "type": "string"
          },
          "auto_devops_enabled": {
            "description": "Flag indication if Auto DevOps is enabled",
            "type": "boolean"
          },
          "autoclose_referenced_issues": {
            "description": "Flag indication if referenced issues auto-closing is enabled",
            "type": "boolean"
          },
          "avatar": {
            "description": "Avatar image for project",
            "type": "file"
          },
          "build_git_strategy": {
            "description": "The Git strategy. Defaults to `fetch`",
            "enum": [
              "fetch",
              "clone"
            ],
            "type": "string"
          },
          "build_timeout": {
            "description": "Build timeout",
            "format": "int32",
            "type": "integer"
          },
          "builds_access_level": {
            "description": "Builds access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "ci_config_path": {
            "description": "The path to CI config file. Defaults to `.gitlab-ci.yml`",
            "type": "string"
          },
          "container_expiration_policy_attributes": {
            "properties": {
              "cadence": {
                "description": "Container expiration policy cadence for recurring job",
                "type": "string"
              },
              "enabled": {
                "description": "Flag indication if container expiration policy is enabled",
                "type": "boolean"
              },
              "keep_n": {
                "description": "Container expiration policy number of images to keep",
                "format": "int32",
                "type": "integer"
              },
              "name_regex": {
                "description": "Container expiration policy regex for image removal",
                "type": "string"
              },
              "name_regex_keep": {
                "description": "Container expiration policy regex for image retention",
                "type": "string"
              },
              "older_than": {
                "description": "Container expiration policy remove images older than value",
                "type": "string"
              }
            },
            "type": "object"
          },
          "container_registry_access_level": {
            "description": "Controls visibility of the container registry. One of `disabled`, `private` or `enabled`. `private` will make the container registry accessible only to project members (reporter role and above). `enabled` will make the container registry accessible to everyone who has access to the project. `disabled` will disable the container registry",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "container_registry_enabled": {
            "description": "Deprecated: Use :container_registry_access_level instead. Flag indication if the container registry is enabled for that project",
            "type": "boolean"
          },
          "default_branch": {
            "description": "The default branch of the project",
            "example": "main",
            "type": "string"
          },
          "description": {
            "description": "The description of the project",
            "type": "string"
          },
          "emails_disabled": {
            "description": "Deprecated: Use emails_enabled instead.",
            "type": "boolean"
          },
          "emails_enabled": {
            "description": "Enable email notifications",
            "type": "boolean"
          },
          "enforce_auth_checks_on_uploads": {
            "description": "Enforce auth check on uploads",
            "type": "boolean"
          },
          "environments_access_level": {
            "description": "Environments access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "external_authorization_classification_label": {
            "description": "The classification label for the project",
            "type": "string"
          },
          "feature_flags_access_level": {
            "description": "Feature flags access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "forking_access_level": {
            "description": "Forks access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "group_runners_enabled": {
            "description": "Flag indication if group runners are enabled for that project",
            "type": "boolean"
          },
          "group_with_project_templates_id": {
            "description": "Group ID that serves as the template source",
            "format": "int32",
            "type": "integer"
          },
          "import_url": {
            "description": "URL from which the project is imported",
            "type": "string"
          },
          "infrastructure_access_level": {
            "description": "Infrastructure access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "initialize_with_readme": {
            "description": "Initialize a project with a README.md",
            "type": "boolean"
          },
          "issue_branch_template": {
            "description": "Template used to create a branch from an issue",
            "type": "string"
          },
          "issues_access_level": {
            "description": "Issues access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "issues_enabled": {
            "description": "Flag indication if the issue tracker is enabled",
            "type": "boolean"
          },
          "jobs_enabled": {
            "description": "Flag indication if jobs are enabled",
            "type": "boolean"
          },
          "lfs_enabled": {
            "description": "Flag indication if Git LFS is enabled for that project",
            "type": "boolean"
          },
          "merge_commit_template": {
            "description": "Template used to create merge commit message",
            "type": "string"
          },
          "merge_method": {
            "description": "The merge method used when merging merge requests",
            "enum": [
              "ff",
              "rebase_merge",
              "merge"
            ],
            "type": "string"
          },
          "merge_requests_access_level": {
            "description": "Merge requests access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "merge_requests_enabled": {
            "description": "Flag indication if merge requests are enabled",
            "type": "boolean"
          },
          "mirror": {
            "description": "[Deprecated] Enables pull mirroring in a project",
            "type": "boolean"
          },
          "mirror_trigger_builds": {
            "description": "[Deprecated] Pull mirroring triggers builds",
            "type": "boolean"
          },
          "model_experiments_access_level": {
            "description": "Model experiments access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "model_registry_access_level": {
            "description": "Model registry access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "monitor_access_level": {
            "description": "Monitor access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "mr_default_target_self": {
            "description": "Merge requests of this forked project targets itself by default",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the project",
            "example": "New Project",
            "type": "string"
          },
          "namespace_id": {
            "description": "Namespace ID for the new project. Default to the user namespace.",
            "format": "int32",
            "type": "integer"
          },
          "only_allow_merge_if_all_discussions_are_resolved": {
            "description": "Only allow to merge if all threads are resolved",
            "type": "boolean"
          },
          "only_allow_merge_if_all_status_checks_passed": {
            "description": "Blocks merge requests from merging unless all status checks have passed",
            "type": "boolean"
          },
          "only_allow_merge_if_pipeline_succeeds": {
            "description": "Only allow to merge if builds succeed",
            "type": "boolean"
          },
          "packages_enabled": {
            "description": "Enable project packages feature",
            "type": "boolean"
          },
          "pages_access_level": {
            "description": "Pages access level. One of `disabled`, `private`, `enabled` or `public`",
            "enum": [
              "disabled",
              "private",
              "enabled",
              "public"
            ],
            "type": "string"
          },
          "path": {
            "description": "The path of the repository",
            "example": "new_project",
            "type": "string"
          },
          "prevent_merge_without_jira_issue": {
            "description": "Require an associated issue from Jira",
            "type": "boolean"
          },
          "printing_merge_request_link_enabled": {
            "description": "Show link to create/view merge request when pushing from the command line",
            "type": "boolean"
          },
          "public_builds": {
            "description": "Deprecated: Use public_jobs instead.",
            "type": "boolean"
          },
          "public_jobs": {
            "description": "Perform public builds",
            "type": "boolean"
          },
          "releases_access_level": {
            "description": "Releases access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "remove_source_branch_after_merge": {
            "description": "Remove the source branch by default after merge",
            "type": "boolean"
          },
          "repository_access_level": {
            "description": "Repository access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "repository_object_format": {
            "description": "The object format of the project repository",
            "enum": [
              "sha1",
              "sha256"
            ],
            "type": "string"
          },
          "repository_storage": {
            "description": "Which storage shard the repository is on. Available only to admins",
            "type": "string"
          },
          "request_access_enabled": {
            "description": "Allow users to request member access",
            "type": "boolean"
          },
          "requirements_access_level": {
            "description": "Requirements feature access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "resolve_outdated_diff_discussions": {
            "description": "Automatically resolve merge request diff threads on lines changed with a push",
            "type": "boolean"
          },
          "security_and_compliance_access_level": {
            "description": "Security and compliance access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "service_desk_enabled": {
            "description": "Disable or enable the service desk",
            "type": "boolean"
          },
          "shared_runners_enabled": {
            "description": "Flag indication if shared runners are enabled for that project",
            "type": "boolean"
          },
          "show_default_award_emojis": {
            "description": "Show default award emojis",
            "type": "boolean"
          },
          "show_diff_preview_in_email": {
            "description": "Include the code diff preview in merge request notification emails",
            "type": "boolean"
          },
          "snippets_access_level": {
            "description": "Snippets access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "snippets_enabled": {
            "description": "Flag indication if snippets are enabled",
            "type": "boolean"
          },
          "squash_commit_template": {
            "description": "Template used to create squash commit message",
            "type": "string"
          },
          "squash_option": {
            "description": "Squash default for project. One of `never`, `always`, `default_on`, or `default_off`.",
            "enum": [
              "never",
              "always",
              "default_on",
              "default_off"
            ],
            "type": "string"
          },
          "suggestion_commit_message": {
            "description": "The commit message used to apply merge request suggestions",
            "type": "string"
          },
          "tag_list": {
            "description": "Deprecated: Use :topics instead",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "template_name": {
            "description": "Name of template from which to create project",
            "type": "string"
          },
          "template_project_id": {
            "description": "Project ID of template from which to create project",
            "format": "int32",
            "type": "integer"
          },
          "topics": {
            "description": "The list of topics for a project",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "use_custom_template": {
            "description": "Use custom template",
            "type": "boolean"
          },
          "visibility": {
            "description": "The visibility of the project.",
            "enum": [
              "private",
              "internal",
              "public"
            ],
            "type": "string"
          },
          "warn_about_potentially_unwanted_characters": {
            "description": "Warn about potentially unwanted characters",
            "type": "boolean"
          },
          "wiki_access_level": {
            "description": "Wiki access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "wiki_enabled": {
            "description": "Flag indication if the wiki is enabled",
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "postApiV4Runners": {
        "description": "Register a new runner",
        "properties": {
          "access_level": {
            "description": "The access level of the runner",
            "enum": [
              "not_protected",
              "ref_protected"
            ],
            "type": "string"
          },
          "active": {
            "description": "Deprecated: Use `paused` instead. Specifies if the runner is allowed to receive new jobs",
            "type": "boolean"
          },
          "description": {
            "description": "Description of the runner",
            "type": "string"
          },
          "info": {
            "description": "Runner's metadata",
            "properties": {
              "architecture": {
                "description": "Runner's architecture",
                "type": "string"
              },
              "name": {
                "description": "Runner's name",
                "type": "string"
              },
              "platform": {
                "description": "Runner's platform",
                "type": "string"
              },
              "revision": {
                "description": "Runner's revision",
                "type": "string"
              },
              "version": {
                "description": "Runner's version",
                "type": "string"
              }
            },
            "type": "object"
          },
          "locked": {
            "description": "Specifies if the runner should be locked for the current project",
            "type": "boolean"
          },
          "maintainer_note": {
            "description": "Deprecated: see `maintenance_note`",
            "type": "string"
          },
          "maintenance_note": {
            "description": "Free-form maintenance notes for the runner (1024 characters)",
            "type": "string"
          },
          "maximum_timeout": {
            "description": "Maximum timeout that limits the amount of time (in seconds) that runners can run jobs",
            "format": "int32",
            "type": "integer"
          },
          "paused": {
            "description": "Specifies if the runner should ignore new jobs",
            "type": "boolean"
          },
          "run_untagged": {
            "description": "Specifies if the runner should handle untagged jobs",
            "type": "boolean"
          },
          "tag_list": {
            "description": "A list of runner tags",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "token": {
            "description": "Registration token",
            "type": "string"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "postApiV4RunnersResetAuthenticationToken": {
        "description": "Reset runner authentication token with current token",
        "properties": {
          "token": {
            "description": "The current authentication token of the runner",
            "type": "string"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "postApiV4RunnersVerify": {
        "description": "Validate authentication credentials",
        "properties": {
          "system_id": {
            "description": "The runner's system identifier",
            "type": "string"
          },
          "token": {
            "description": "The runner's authentication token",
            "type": "string"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "postApiV4UserEmails": {
        "description": "Add new email address to the currently authenticated user",
        "properties": {
          "email": {
            "description": "The new email",
            "type": "string"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "postApiV4UserGpgKeys": {
        "description": "Add a new GPG key to the currently authenticated user",
        "properties": {
          "key": {
            "description": "The new GPG key",
            "type": "string"
          }
        },
        "required": [
          "key"
        ],
        "type": "object"
      },
      "postApiV4UserKeys": {
        "description": "Add a new SSH key to the currently authenticated user",
        "properties": {
          "expires_at": {
            "description": "The expiration date of the SSH key in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)",
            "format": "date-time",
            "type": "string"
          },
          "key": {
            "description": "The new SSH key",
            "type": "string"
          },
          "title": {
            "description": "The title of the new SSH key",
            "type": "string"
          },
          "usage_type": {
            "default": "auth_and_signing",
            "description": "Scope of usage for the SSH key",
            "enum": [
              "auth_and_signing",
              "auth",
              "signing"
            ],
            "type": "string"
          }
        },
        "required": [
          "key",
          "title"
        ],
        "type": "object"
      },
      "postApiV4UserPersonalAccessTokens": {
        "description": "Create a personal access token with limited scopes for the currently authenticated user",
        "properties": {
          "description": {
            "description": "The description of the personal access token",
            "type": "string"
          },
          "expires_at": {
            "description": "The expiration date in the format YEAR-MONTH-DAY of the personal access token",
            "format": "date",
            "type": "string"
          },
          "name": {
            "description": "The name of the personal access token",
            "type": "string"
          },
          "scopes": {
            "description": "The array of scopes of the personal access token",
            "items": {
              "enum": [
                "k8s_proxy"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "scopes"
        ],
        "type": "object"
      },
      "postApiV4UserRunners": {
        "description": "Create a runner owned by currently authenticated user",
        "properties": {
          "access_level": {
            "description": "The access level of the runner",
            "enum": [
              "not_protected",
              "ref_protected"
            ],
            "type": "string"
          },
          "description": {
            "description": "Description of the runner",
            "type": "string"
          },
          "group_id": {
            "description": "The ID of the group that the runner is created in",
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "locked": {
            "description": "Specifies if the runner should be locked for the current project (defaults to false)",
            "type": "boolean"
          },
          "maintenance_note": {
            "description": "Free-form maintenance notes for the runner (1024 characters)",
            "type": "string"
          },
          "maximum_timeout": {
            "description": "Maximum timeout that limits the amount of time (in seconds) that runners can run jobs",
            "format": "int32",
            "type": "integer"
          },
          "paused": {
            "description": "Specifies if the runner should ignore new jobs (defaults to false)",
            "type": "boolean"
          },
          "project_id": {
            "description": "The ID of the project that the runner is created in",
            "example": 1,
            "format": "int32",
            "type": "integer"
          },
          "run_untagged": {
            "description": "Specifies if the runner should handle untagged jobs  (defaults to true)",
            "type": "boolean"
          },
          "runner_type": {
            "description": "Specifies the scope of the runner",
            "enum": [
              "instance_type",
              "group_type",
              "project_type"
            ],
            "type": "string"
          },
          "tag_list": {
            "description": "A list of runner tags",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "runner_type",
          "group_id",
          "project_id"
        ],
        "type": "object"
      },
      "postApiV4Users": {
        "description": "Create a user. Available only for admins.",
        "properties": {
          "admin": {
            "description": "Flag indicating the user is an administrator",
            "type": "boolean"
          },
          "auditor": {
            "description": "Flag indicating auditor status of the user",
            "type": "boolean"
          },
          "avatar": {
            "description": "Avatar image for user",
            "type": "file"
          },
          "bio": {
            "description": "The biography of the user",
            "type": "string"
          },
          "can_create_group": {
            "description": "Flag indicating the user can create groups",
            "type": "boolean"
          },
          "color_scheme_id": {
            "description": "The color scheme for the file viewer",
            "format": "int32",
            "type": "integer"
          },
          "commit_email": {
            "description": "The commit email, _private for private commit email",
            "type": "string"
          },
          "discord": {
            "description": "The Discord user ID",
            "type": "string"
          },
          "email": {
            "description": "The email of the user",
            "type": "string"
          },
          "extern_uid": {
            "description": "The external authentication provider UID",
            "type": "string"
          },
          "external": {
            "description": "Flag indicating the user is an external user",
            "type": "boolean"
          },
          "extra_shared_runners_minutes_limit": {
            "description": "(admin-only) Extra compute minutes quota for this user",
            "format": "int32",
            "type": "integer"
          },
          "force_random_password": {
            "description": "Flag indicating a random password will be set",
            "type": "boolean"
          },
          "group_id_for_saml": {
            "description": "ID for group where SAML has been configured",
            "format": "int32",
            "type": "integer"
          },
          "linkedin": {
            "description": "The LinkedIn username",
            "type": "string"
          },
          "location": {
            "description": "The location of the user",
            "type": "string"
          },
          "name": {
            "description": "The name of the user",
            "type": "string"
          },
          "note": {
            "description": "Admin note for this user",
            "type": "string"
          },
          "organization": {
            "description": "The organization of the user",
            "type": "string"
          },
          "password": {
            "description": "The password of the new user",
            "type": "string"
          },
          "private_profile": {
            "description": "Flag indicating the user has a private profile",
            "type": "boolean"
          },
          "projects_limit": {
            "description": "The number of projects a user can create",
            "format": "int32",
            "type": "integer"
          },
          "pronouns": {
            "description": "The pronouns of the user",
            "type": "string"
          },
          "provider": {
            "description": "The external provider",
            "type": "string"
          },
          "public_email": {
            "description": "The public email of the user",
            "type": "string"
          },
          "reset_password": {
            "description": "Flag indicating the user will be sent a password reset token",
            "type": "boolean"
          },
          "shared_runners_minutes_limit": {
            "description": "Compute minutes quota for this user",
            "format": "int32",
            "type": "integer"
          },
          "skip_confirmation": {
            "description": "Flag indicating the account is confirmed",
            "type": "boolean"
          },
          "skype": {
            "description": "The Skype username",
            "type": "string"
          },
          "theme_id": {
            "description": "The GitLab theme for the user",
            "format": "int32",
            "type": "integer"
          },
          "twitter": {
            "description": "The Twitter username",
            "type": "string"
          },
          "username": {
            "description": "The username of the user",
            "type": "string"
          },
          "view_diffs_file_by_file": {
            "description": "Flag indicating the user sees only one file diff per page",
            "type": "boolean"
          },
          "website_url": {
            "description": "The website of the user",
            "type": "string"
          }
        },
        "required": [
          "email",
          "name",
          "username"
        ],
        "type": "object"
      },
      "postApiV4UsersIdEmails": {
        "description": "Add an email address to a specified user. Available only for admins.",
        "properties": {
          "email": {
            "description": "The email of the user",
            "type": "string"
          },
          "skip_confirmation": {
            "description": "Skip confirmation of email and assume it is verified",
            "type": "boolean"
          }
        },
        "required": [
          "email"
        ],
        "type": "object"
      },
      "postApiV4UsersIdGpgKeys": {
        "description": "Add a GPG key to a specified user. Available only for admins.",
        "properties": {
          "key": {
            "description": "The new GPG key",
            "type": "string"
          }
        },
        "required": [
          "key"
        ],
        "type": "object"
      },
      "postApiV4UsersUserIdImpersonationTokens": {
        "description": "Create a impersonation token. Available only for admins.",
        "properties": {
          "description": {
            "description": "The description of the personal access token",
            "type": "string"
          },
          "expires_at": {
            "description": "The expiration date in the format YEAR-MONTH-DAY of the impersonation token",
            "format": "date",
            "type": "string"
          },
          "name": {
            "description": "The name of the impersonation token",
            "type": "string"
          },
          "scopes": {
            "description": "The array of scopes of the impersonation token",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "postApiV4UsersUserIdKeys": {
        "description": "Add an SSH key to a specified user. Available only for admins.",
        "properties": {
          "expires_at": {
            "description": "The expiration date of the SSH key in ISO 8601 format (YYYY-MM-DDTHH:MM:SSZ)",
            "format": "date-time",
            "type": "string"
          },
          "key": {
            "description": "The new SSH key",
            "type": "string"
          },
          "title": {
            "description": "The title of the new SSH key",
            "type": "string"
          },
          "usage_type": {
            "default": "auth_and_signing",
            "description": "Scope of usage for the SSH key",
            "enum": [
              "auth_and_signing",
              "auth",
              "signing"
            ],
            "type": "string"
          }
        },
        "required": [
          "key",
          "title"
        ],
        "type": "object"
      },
      "postApiV4UsersUserIdPersonalAccessTokens": {
        "description": "Create a personal access token. Available only for admins.",
        "properties": {
          "description": {
            "description": "The description of the personal access token",
            "type": "string"
          },
          "expires_at": {
            "description": "The expiration date in the format YEAR-MONTH-DAY of the personal access token",
            "format": "date",
            "type": "string"
          },
          "name": {
            "description": "The name of the personal access token",
            "type": "string"
          },
          "scopes": {
            "description": "The array of scopes of the personal access token",
            "items": {
              "enum": [
                "api",
                "read_api",
                "read_user",
                "create_runner",
                "manage_runner",
                "k8s_proxy",
                "self_rotate",
                "read_repository",
                "write_repository",
                "read_observability",
                "write_observability",
                "ai_features",
                "sudo",
                "admin_mode",
                "read_service_ping"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "scopes"
        ],
        "type": "object"
      },
      "putApiV4AdminBatchedBackgroundMigrationsIdPause": {
        "description": "Pause a batched background migration",
        "properties": {
          "database": {
            "default": "main",
            "description": "The name of the database",
            "enum": [
              "main",
              "ci",
              "sec",
              "embedding",
              "geo"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4AdminBatchedBackgroundMigrationsIdResume": {
        "description": "Resume a batched background migration",
        "properties": {
          "database": {
            "default": "main",
            "description": "The name of the database",
            "enum": [
              "main",
              "ci",
              "sec",
              "embedding",
              "geo"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4AdminCiVariablesKey": {
        "description": "Update an instance-level variable",
        "properties": {
          "description": {
            "description": "The description of the variable",
            "type": "string"
          },
          "masked": {
            "description": "Whether the variable is masked",
            "type": "boolean"
          },
          "protected": {
            "description": "Whether the variable is protected",
            "type": "boolean"
          },
          "raw": {
            "description": "Whether the variable will be expanded",
            "type": "boolean"
          },
          "value": {
            "description": "The value of a variable",
            "type": "string"
          },
          "variable_type": {
            "description": "The type of a variable. Available types are: env_var (default) and file",
            "enum": [
              "env_var",
              "file"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4AdminClustersClusterId": {
        "description": "Edit instance cluster",
        "properties": {
          "domain": {
            "description": "Cluster base domain",
            "type": "string"
          },
          "enabled": {
            "description": "Enable or disable Gitlab's connection to your Kubernetes cluster",
            "type": "boolean"
          },
          "environment_scope": {
            "description": "The associated environment to the cluster",
            "type": "string"
          },
          "managed": {
            "description": "Determines if GitLab will manage namespaces and service accounts for this cluster",
            "type": "boolean"
          },
          "management_project_id": {
            "description": "The ID of the management project",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Cluster name",
            "type": "string"
          },
          "namespace_per_environment": {
            "default": true,
            "description": "Deploy each environment to a separate Kubernetes namespace",
            "type": "boolean"
          },
          "platform_kubernetes_attributes": {
            "description": "Platform Kubernetes data",
            "properties": {
              "api_url": {
                "description": "URL to access the Kubernetes API",
                "type": "string"
              },
              "ca_cert": {
                "description": "TLS certificate (needed if API is using a self-signed TLS certificate)",
                "type": "string"
              },
              "namespace": {
                "description": "Unique namespace related to Project",
                "type": "string"
              },
              "token": {
                "description": "Token to authenticate against Kubernetes",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "putApiV4GroupsId": {
        "description": "Update a group. Available only for users who can administrate groups.",
        "properties": {
          "allowed_email_domains_list": {
            "description": "List of allowed email domains for group",
            "type": "string"
          },
          "auto_ban_user_on_excessive_projects_download": {
            "description": "Ban users from the group when they exceed maximum number of unique projects download in the specified time period",
            "type": "boolean"
          },
          "auto_devops_enabled": {
            "description": "Default to Auto DevOps pipeline for all projects within this group",
            "type": "boolean"
          },
          "avatar": {
            "description": "Avatar image for the group",
            "type": "file"
          },
          "default_branch": {
            "description": "The default branch of group's projects",
            "example": "main",
            "type": "string"
          },
          "default_branch_protection": {
            "description": "Determine if developers can push to default branch",
            "enum": [
              0,
              3,
              1,
              2,
              4
            ],
            "format": "int32",
            "type": "integer"
          },
          "default_branch_protection_defaults": {
            "description": "Determine if developers can push to default branch",
            "properties": {
              "allow_force_push": {
                "description": "Allow force push for all users with push access.",
                "type": "boolean"
              },
              "allowed_to_merge": {
                "description": "An array of access levels allowed to merge",
                "items": {
                  "properties": {
                    "access_level": {
                      "description": "A valid access level",
                      "enum": [
                        30,
                        40,
                        60,
                        0
                      ],
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "access_level"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "allowed_to_push": {
                "description": "An array of access levels allowed to push",
                "items": {
                  "properties": {
                    "access_level": {
                      "description": "A valid access level",
                      "enum": [
                        30,
                        40,
                        60,
                        0
                      ],
                      "format": "int32",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "access_level"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "code_owner_approval_required": {
                "description": "Require approval from code owners",
                "type": "boolean"
              },
              "developer_can_initial_push": {
                "description": "Allow developers to initial push",
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "description": {
            "description": "The description of the group",
            "type": "string"
          },
          "duo_availability": {
            "description": "Duo availability. One of `default_on`, `default_off` or `never_on`",
            "enum": [
              "default_on",
              "default_off",
              "never_on"
            ],
            "type": "string"
          },
          "duo_features_enabled": {
            "description": "Indicates whether GitLab Duo features are enabled for the group",
            "type": "boolean"
          },
          "emails_disabled": {
            "description": "_(Deprecated)_ Disable email notifications. Use: emails_enabled",
            "type": "boolean"
          },
          "emails_enabled": {
            "description": "Enable email notifications",
            "type": "boolean"
          },
          "enabled_git_access_protocol": {
            "description": "Allow only the selected protocols to be used for Git access.",
            "enum": [
              "ssh",
              "http",
              "all"
            ],
            "type": "string"
          },
          "experiment_features_enabled": {
            "description": "Enable experiment features for this group",
            "type": "boolean"
          },
          "extra_shared_runners_minutes_limit": {
            "description": "(admin-only) Extra compute minutes quota for this group",
            "format": "int32",
            "type": "integer"
          },
          "file_template_project_id": {
            "description": "The ID of a project to use for custom templates in this group",
            "format": "int32",
            "type": "integer"
          },
          "ip_restriction_ranges": {
            "description": "List of IP addresses which need to be restricted for group",
            "type": "string"
          },
          "ldap_access": {
            "description": "A valid access level",
            "format": "int32",
            "type": "integer"
          },
          "ldap_cn": {
            "description": "LDAP Common Name",
            "type": "string"
          },
          "lfs_enabled": {
            "description": "Enable/disable LFS for the projects in this group",
            "type": "boolean"
          },
          "lock_duo_features_enabled": {
            "description": "Indicates if the GitLab Duo features enabled setting is enforced for all subgroups",
            "type": "boolean"
          },
          "lock_math_rendering_limits_enabled": {
            "description": "Indicates if math rendering limits are locked for all descendent groups.",
            "type": "boolean"
          },
          "math_rendering_limits_enabled": {
            "description": "Indicates if math rendering limits are used for this group.",
            "type": "boolean"
          },
          "max_artifacts_size": {
            "description": "Set the maximum file size for each job's artifacts",
            "format": "int32",
            "type": "integer"
          },
          "membership_lock": {
            "description": "Prevent adding new members to projects within this group",
            "type": "boolean"
          },
          "mentions_disabled": {
            "description": "Disable a group from getting mentioned",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the group",
            "type": "string"
          },
          "path": {
            "description": "The path of the group",
            "type": "string"
          },
          "prevent_forking_outside_group": {
            "description": "Prevent forking projects inside this group to external namespaces",
            "type": "boolean"
          },
          "prevent_sharing_groups_outside_hierarchy": {
            "description": "Prevent sharing groups within this namespace with any groups outside the namespace. Only available on top-level groups.",
            "type": "boolean"
          },
          "project_creation_level": {
            "description": "Determine if developers can create projects in the group",
            "enum": [
              "noone",
              "owner",
              "maintainer",
              "developer",
              "administrator"
            ],
            "type": "string"
          },
          "request_access_enabled": {
            "description": "Allow users to request member access",
            "type": "boolean"
          },
          "require_two_factor_authentication": {
            "description": "Require all users in this group to setup Two-factor authentication",
            "type": "boolean"
          },
          "service_access_tokens_expiration_enforced": {
            "description": "To enforce token expiration for Service accounts users for group",
            "type": "boolean"
          },
          "share_with_group_lock": {
            "description": "Prevent sharing a project with another group within this group",
            "type": "boolean"
          },
          "shared_runners_minutes_limit": {
            "description": "(admin-only) compute minutes quota for this group",
            "format": "int32",
            "type": "integer"
          },
          "shared_runners_setting": {
            "description": "Enable/disable shared runners for the group and its subgroups and projects",
            "enum": [
              "disabled_and_unoverridable",
              "disabled_and_overridable",
              "enabled"
            ],
            "type": "string"
          },
          "show_diff_preview_in_email": {
            "description": "Include the code diff preview in merge request notification emails",
            "type": "boolean"
          },
          "subgroup_creation_level": {
            "description": "Allowed to create subgroups",
            "enum": [
              "owner",
              "maintainer"
            ],
            "type": "string"
          },
          "two_factor_grace_period": {
            "description": "Time before Two-factor authentication is enforced",
            "format": "int32",
            "type": "integer"
          },
          "unique_project_download_limit": {
            "description": "Maximum number of unique projects a user can download in the specified time period before they are banned.",
            "format": "int32",
            "type": "integer"
          },
          "unique_project_download_limit_alertlist": {
            "description": "List of user ids who will be emailed when Git abuse rate limit is exceeded",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "unique_project_download_limit_allowlist": {
            "description": "List of usernames excluded from the unique project download limit",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "unique_project_download_limit_interval_in_seconds": {
            "description": "Time period during which a user can download a maximum amount of projects before they are banned.",
            "format": "int32",
            "type": "integer"
          },
          "visibility": {
            "description": "The visibility of the group",
            "enum": [
              "private",
              "internal",
              "public"
            ],
            "type": "string"
          },
          "wiki_access_level": {
            "description": "Wiki access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4GroupsIdAccessRequestsUserIdApprove": {
        "description": "Approves an access request for the given user.",
        "properties": {
          "access_level": {
            "default": 30,
            "description": "A valid access level (defaults: `30`, the Developer role)",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "putApiV4GroupsIdBadgesBadgeId": {
        "description": "Updates a badge of a group.",
        "properties": {
          "image_url": {
            "description": "URL of the badge image",
            "type": "string"
          },
          "link_url": {
            "description": "URL of the badge link",
            "type": "string"
          },
          "name": {
            "description": "Name for the badge",
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4GroupsIdClustersClusterId": {
        "description": "Edit group cluster",
        "properties": {
          "domain": {
            "description": "Cluster base domain",
            "type": "string"
          },
          "enabled": {
            "description": "Determines if cluster is active or not",
            "type": "boolean"
          },
          "environment_scope": {
            "description": "The associated environment to the cluster",
            "type": "string"
          },
          "managed": {
            "description": "Determines if GitLab will manage namespaces and service accounts for this cluster",
            "type": "boolean"
          },
          "management_project_id": {
            "description": "The ID of the management project",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Cluster name",
            "type": "string"
          },
          "namespace_per_environment": {
            "default": true,
            "description": "Deploy each environment to a separate Kubernetes namespace",
            "type": "boolean"
          },
          "platform_kubernetes_attributes": {
            "description": "Platform Kubernetes data",
            "properties": {
              "api_url": {
                "description": "URL to access the Kubernetes API",
                "type": "string"
              },
              "ca_cert": {
                "description": "TLS certificate (needed if API is using a self-signed TLS certificate)",
                "type": "string"
              },
              "namespace": {
                "description": "Unique namespace related to Group",
                "type": "string"
              },
              "token": {
                "description": "Token to authenticate against Kubernetes",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "putApiV4GroupsIdCustomAttributesKey": {
        "description": "Set a custom attribute on a group",
        "properties": {
          "value": {
            "description": "The value of the custom attribute",
            "type": "string"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdDebianDistributionsCodename": {
        "description": "Update a Debian Distribution",
        "properties": {
          "architectures": {
            "description": "The list of Architectures",
            "example": "amd64",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "components": {
            "description": "The list of Components",
            "example": "main",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "description": "The Debian Description",
            "example": "My description",
            "type": "string"
          },
          "label": {
            "description": "The Debian Label",
            "example": "grep.be",
            "type": "string"
          },
          "origin": {
            "description": "The Debian Origin",
            "example": "Grep",
            "type": "string"
          },
          "suite": {
            "description": "The Debian Suite",
            "example": "unstable",
            "type": "string"
          },
          "valid_time_duration_seconds": {
            "description": "The duration before the Release file should be considered expired by the client",
            "example": 604800,
            "format": "int32",
            "type": "integer"
          },
          "version": {
            "description": "The Debian Version",
            "example": "12",
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsAppleAppStore": {
        "description": "Create/Edit Apple App Store integration",
        "properties": {
          "app_store_issuer_id": {
            "description": "Apple App Store Connect issuer ID.",
            "type": "string"
          },
          "app_store_key_id": {
            "description": "Apple App Store Connect key ID.",
            "type": "string"
          },
          "app_store_private_key": {
            "description": "Apple App Store Connect private key.",
            "type": "string"
          },
          "app_store_private_key_file_name": {
            "description": "Apple App Store Connect private key file name.",
            "type": "string"
          },
          "app_store_protected_refs": {
            "description": "Set variables on protected branches and tags only.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "app_store_issuer_id",
          "app_store_key_id",
          "app_store_private_key_file_name",
          "app_store_private_key"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsAsana": {
        "description": "Create/Edit Asana integration",
        "properties": {
          "api_key": {
            "description": "User API token. The user must have access to the task. All comments are attributed to this user.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "restrict_to_branch": {
            "description": "Comma-separated list of branches to be automatically inspected. Leave blank to include all branches.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "api_key"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsAssembla": {
        "description": "Create/Edit Assembla integration",
        "properties": {
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "subdomain": {
            "description": "The subdomain setting.",
            "type": "string"
          },
          "token": {
            "description": "The authentication token.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsBamboo": {
        "description": "Create/Edit Bamboo integration",
        "properties": {
          "bamboo_url": {
            "description": "Bamboo root URL (for example, `https://bamboo.example.com`).",
            "type": "string"
          },
          "build_key": {
            "description": "Bamboo build plan key (for example, `KEY`).",
            "type": "string"
          },
          "enable_ssl_verification": {
            "description": "Enable SSL verification. Defaults to `true` (enabled).",
            "type": "boolean"
          },
          "password": {
            "description": "Password of the user.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "User with API access to the Bamboo server.",
            "type": "string"
          }
        },
        "required": [
          "bamboo_url",
          "build_key",
          "username",
          "password"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsBugzilla": {
        "description": "Create/Edit Bugzilla integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "new_issue_url": {
            "description": "URL of the new issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url",
          "new_issue_url"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsBuildkite": {
        "description": "Create/Edit Buildkite integration",
        "properties": {
          "enable_ssl_verification": {
            "description": "DEPRECATED: This parameter has no effect because SSL verification is always enabled.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "project_url": {
            "description": "Pipeline URL (for example, `https://buildkite.com/example/pipeline`).",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "token": {
            "description": "Token you get after you create a Buildkite pipeline with a GitLab repository.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "token"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsCampfire": {
        "description": "Create/Edit Campfire integration",
        "properties": {
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "room": {
            "description": "ID portion of the Campfire room URL.",
            "type": "string"
          },
          "subdomain": {
            "description": "`.campfirenow.com` subdomain when you're signed in.",
            "type": "string"
          },
          "token": {
            "description": "API authentication token from Campfire. To get the token, sign in to Campfire and select **My info**.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsClickup": {
        "description": "Create/Edit Clickup integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsConfluence": {
        "description": "Create/Edit Confluence integration",
        "properties": {
          "confluence_url": {
            "description": "URL of the Confluence Workspace hosted on `atlassian.net`.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "confluence_url"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsCustomIssueTracker": {
        "description": "Create/Edit Custom Issue Tracker integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "new_issue_url": {
            "description": "URL of the new issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url",
          "new_issue_url"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsDatadog": {
        "description": "Create/Edit Datadog integration",
        "properties": {
          "api_key": {
            "description": "<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.datadoghq.com/account_management/api-app-keys/\">API key</a> used for authentication with Datadog.",
            "type": "string"
          },
          "api_url": {
            "description": "Full URL of your Datadog site. Only required if you do not use a standard Datadog site.",
            "type": "string"
          },
          "archive_trace_events": {
            "description": "When enabled, job logs are collected by Datadog and displayed along with pipeline execution traces.",
            "type": "boolean"
          },
          "build_events": {
            "description": "Trigger event when a build is created.",
            "type": "boolean"
          },
          "datadog_ci_visibility": {
            "description": "Enable CI Visibility",
            "type": "boolean"
          },
          "datadog_env": {
            "description": "For self-managed deployments, `env` tag for all the data sent to Datadog.",
            "type": "string"
          },
          "datadog_service": {
            "description": "Tag all pipeline data from this GitLab instance in Datadog. Can be used when managing several self-managed deployments.",
            "type": "string"
          },
          "datadog_site": {
            "description": "Datadog site to send data to. Learn more about Datadog sites in the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.datadoghq.com/getting_started/site/\">documentation</a>.",
            "type": "string"
          },
          "datadog_tags": {
            "description": "Custom tags in Datadog. Specify one tag per line in the format `key:value\\nkey2:value2`.",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "project_events": {
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "subgroup_events": {
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "api_key"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsDiffblueCover": {
        "description": "Create/Edit Diffblue Cover integration",
        "properties": {
          "diffblue_access_token_name": {
            "description": "Access token name used by Diffblue Cover in pipelines.",
            "type": "string"
          },
          "diffblue_access_token_secret": {
            "description": "Access token secret used by Diffblue Cover in pipelines.",
            "type": "string"
          },
          "diffblue_license_key": {
            "description": "Diffblue Cover license key.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "diffblue_license_key",
          "diffblue_access_token_name",
          "diffblue_access_token_secret"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsDiscord": {
        "description": "Create/Edit Discord integration",
        "properties": {
          "alert_channel": {
            "description": "The name of the channel to receive alert_events notifications",
            "type": "string"
          },
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issue_channel": {
            "description": "The name of the channel to receive confidential_issues_events notifications",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_channel": {
            "description": "The name of the channel to receive confidential_note_events notifications",
            "type": "string"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "deployment_channel": {
            "description": "The name of the channel to receive deployment_events notifications",
            "type": "string"
          },
          "deployment_events": {
            "description": "Trigger event when a deployment starts or finishes.",
            "type": "boolean"
          },
          "incident_channel": {
            "description": "The name of the channel to receive incident_events notifications",
            "type": "string"
          },
          "issue_channel": {
            "description": "The name of the channel to receive issues_events notifications",
            "type": "string"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_request_channel": {
            "description": "The name of the channel to receive merge_requests_events notifications",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_channel": {
            "description": "The name of the channel to receive note_events notifications",
            "type": "string"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_channel": {
            "description": "The name of the channel to receive pipeline_events notifications",
            "type": "string"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_channel": {
            "description": "The name of the channel to receive push_events notifications",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_channel": {
            "description": "The name of the channel to receive tag_push_events notifications",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "vulnerability_channel": {
            "description": "The name of the channel to receive vulnerability_events notifications",
            "type": "string"
          },
          "webhook": {
            "description": "Discord webhook (for example, `https://discord.com/api/webhooks/…`).",
            "type": "string"
          },
          "wiki_page_channel": {
            "description": "The name of the channel to receive wiki_page_events notifications",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsDroneCi": {
        "description": "Create/Edit Drone Ci integration",
        "properties": {
          "drone_url": {
            "description": "Drone CI URL (for example, `http://drone.example.com`).",
            "type": "string"
          },
          "enable_ssl_verification": {
            "description": "Enable SSL verification. Defaults to `true` (enabled).",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "token": {
            "description": "Drone CI token.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "drone_url",
          "token"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsEmailsOnPush": {
        "description": "Create/Edit Emails On Push integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "disable_diffs": {
            "description": "Disable code diffs",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "recipients": {
            "description": "Emails separated by whitespace.",
            "type": "string"
          },
          "send_from_committer_email": {
            "description": "Send from committer",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "recipients"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsEwm": {
        "description": "Create/Edit Ewm integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "new_issue_url": {
            "description": "URL of the new issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url",
          "new_issue_url"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsExternalWiki": {
        "description": "Create/Edit External Wiki integration",
        "properties": {
          "external_wiki_url": {
            "description": "URL of the external wiki.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "external_wiki_url"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsGitGuardian": {
        "description": "Create/Edit Git Guardian integration",
        "properties": {
          "token": {
            "description": "Personal access token to authenticate calls to the GitGuardian API.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsGithub": {
        "description": "Create/Edit Github integration",
        "properties": {
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "repository_url": {
            "description": "GitHub repository URL.",
            "type": "string"
          },
          "static_context": {
            "description": "Append the hostname of your GitLab instance to the status check name.",
            "type": "boolean"
          },
          "token": {
            "description": "GitHub API token with `repo:status` OAuth scope.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token",
          "repository_url"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsGitlabSlackApplication": {
        "description": "Create/Edit Gitlab Slack Application integration",
        "properties": {
          "alert_channel": {
            "description": "The name of the channel to receive alert_events notifications",
            "type": "string"
          },
          "alert_events": {
            "description": "Trigger event when a new, unique alert is recorded.",
            "type": "boolean"
          },
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "channel": {
            "description": "Default channel to use if no other channel is configured.",
            "type": "string"
          },
          "confidential_issue_channel": {
            "description": "The name of the channel to receive confidential_issues_events notifications",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_channel": {
            "description": "The name of the channel to receive confidential_note_events notifications",
            "type": "string"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "deployment_channel": {
            "description": "The name of the channel to receive deployment_events notifications",
            "type": "string"
          },
          "deployment_events": {
            "description": "Trigger event when a deployment starts or finishes.",
            "type": "boolean"
          },
          "incident_channel": {
            "description": "The name of the channel to receive incident_events notifications",
            "type": "string"
          },
          "incident_events": {
            "description": "Trigger event when an incident is created.",
            "type": "boolean"
          },
          "issue_channel": {
            "description": "The name of the channel to receive issues_events notifications",
            "type": "string"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "labels_to_be_notified": {
            "description": "Labels to send notifications for. Leave blank to receive notifications for all events.",
            "type": "string"
          },
          "labels_to_be_notified_behavior": {
            "description": "Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`.",
            "type": "string"
          },
          "merge_request_channel": {
            "description": "The name of the channel to receive merge_requests_events notifications",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_channel": {
            "description": "The name of the channel to receive note_events notifications",
            "type": "string"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_channel": {
            "description": "The name of the channel to receive pipeline_events notifications",
            "type": "string"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_channel": {
            "description": "The name of the channel to receive push_events notifications",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_channel": {
            "description": "The name of the channel to receive tag_push_events notifications",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "vulnerability_channel": {
            "description": "The name of the channel to receive vulnerability_events notifications",
            "type": "string"
          },
          "vulnerability_events": {
            "type": "boolean"
          },
          "wiki_page_channel": {
            "description": "The name of the channel to receive wiki_page_events notifications",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistry": {
        "description": "Create/Edit Google Cloud Platform Artifact Registry integration",
        "properties": {
          "artifact_registry_location": {
            "description": "Location of the Artifact Registry repository.",
            "type": "string"
          },
          "artifact_registry_project_id": {
            "description": "ID of the Google Cloud project.",
            "type": "string"
          },
          "artifact_registry_repositories": {
            "description": "Repository of Artifact Registry.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "artifact_registry_project_id",
          "artifact_registry_repositories",
          "artifact_registry_location"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederation": {
        "description": "Create/Edit Google Cloud Platform Workload Identity Federation integration",
        "properties": {
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "workload_identity_federation_project_id": {
            "description": "Google Cloud project ID for the Workload Identity Federation.",
            "type": "string"
          },
          "workload_identity_federation_project_number": {
            "description": "Google Cloud project number for the Workload Identity Federation.",
            "type": "string"
          },
          "workload_identity_pool_id": {
            "description": "ID of the Workload Identity Pool.",
            "type": "string"
          },
          "workload_identity_pool_provider_id": {
            "description": "ID of the Workload Identity Pool provider.",
            "type": "string"
          }
        },
        "required": [
          "workload_identity_federation_project_id",
          "workload_identity_federation_project_number",
          "workload_identity_pool_id",
          "workload_identity_pool_provider_id"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsGooglePlay": {
        "description": "Create/Edit Google Play integration",
        "properties": {
          "google_play_protected_refs": {
            "description": "Set variables on protected branches and tags only.",
            "type": "boolean"
          },
          "package_name": {
            "description": "Package name of the app in Google Play.",
            "type": "string"
          },
          "service_account_key": {
            "description": "Google Play service account key.",
            "type": "string"
          },
          "service_account_key_file_name": {
            "description": "File name of the Google Play service account key.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "package_name",
          "service_account_key_file_name",
          "service_account_key"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsHangoutsChat": {
        "description": "Create/Edit Hangouts Chat integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "webhook": {
            "description": "The Hangouts Chat webhook (for example, `https://chat.googleapis.com/v1/spaces...`).",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsHarbor": {
        "description": "Create/Edit Harbor integration",
        "properties": {
          "password": {
            "description": "The password of the user.",
            "type": "string"
          },
          "project_name": {
            "description": "The name of the project in the Harbor instance. For example, `testproject`.",
            "type": "string"
          },
          "url": {
            "description": "The base URL to the Harbor instance linked to the GitLab project. For example, `https://demo.goharbor.io`.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "The username created in the Harbor interface.",
            "type": "string"
          }
        },
        "required": [
          "url",
          "project_name",
          "username",
          "password"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsIrker": {
        "description": "Create/Edit Irker integration",
        "properties": {
          "colorize_messages": {
            "description": "Colorize messages",
            "type": "boolean"
          },
          "default_irc_uri": {
            "description": "URI to add before each recipient. The default value is `irc://irc.network.net:6697/`.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "recipients": {
            "description": "Comma-separated list of channels or email addresses.",
            "type": "string"
          },
          "server_host": {
            "description": "irker daemon hostname. The default value is `localhost`.",
            "type": "string"
          },
          "server_port": {
            "description": "irker daemon port. The default value is `6659`.",
            "format": "int32",
            "type": "integer"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "recipients"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsJenkins": {
        "description": "Create/Edit Jenkins integration",
        "properties": {
          "enable_ssl_verification": {
            "description": "Enable SSL verification. Defaults to `true` (enabled).",
            "type": "boolean"
          },
          "jenkins_url": {
            "description": "URL of the Jenkins server.",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "password": {
            "description": "Password of the Jenkins server.",
            "type": "string"
          },
          "project_name": {
            "description": "Name of the Jenkins project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "Username of the Jenkins server.",
            "type": "string"
          }
        },
        "required": [
          "jenkins_url",
          "project_name"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsJira": {
        "description": "Create/Edit Jira integration",
        "properties": {
          "api_url": {
            "description": "The base URL to the Jira instance API. Web URL value is used if not set (for example, `https://jira-api.example.com`).",
            "type": "string"
          },
          "commit_events": {
            "description": "Trigger event when a commit is created or updated.",
            "type": "boolean"
          },
          "issues_enabled": {
            "description": "Enable viewing Jira issues in GitLab.",
            "type": "string"
          },
          "jira_auth_type": {
            "description": "The authentication method to use with Jira. Use `0` for Basic Authentication, and `1` for Jira personal access token. Defaults to `0`.",
            "format": "int32",
            "type": "integer"
          },
          "jira_issue_prefix": {
            "description": "Prefix to match Jira issue keys.",
            "type": "string"
          },
          "jira_issue_regex": {
            "description": "Regular expression to match Jira issue keys.",
            "type": "string"
          },
          "jira_issue_transition_id": {
            "description": "The ID of one or more transitions for [custom issue transitions](../integration/jira/issues.md#custom-issue-transitions).Ignored when `jira_issue_transition_automatic` is enabled. Defaults to a blank string,which disables custom transitions.",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "password": {
            "description": "The Jira API token, password, or personal access token to use with Jira. When using Basic Authentication (`jira_auth_type` is `0`), use an API token for Jira Cloud, and a password for Jira Data Center or Jira Server. For a Jira personal access token (`jira_auth_type` is `1`), use the personal access token.",
            "type": "string"
          },
          "project_keys": {
            "description": "Keys of Jira projects. When `issues_enabled` is `true`, this setting specifies which Jira projects to view issues from in GitLab.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "url": {
            "description": "The URL to the Jira project which is being linked to this GitLab project (for example, `https://jira.example.com`).",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "The email or username to use with Jira. Use an email for Jira Cloud, and a username for Jira Data Center and Jira Server. Required when using Basic Authentication (`jira_auth_type` is `0`).",
            "type": "string"
          }
        },
        "required": [
          "url",
          "password"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsJiraCloudApp": {
        "description": "Create/Edit Jira Cloud App integration",
        "properties": {
          "jira_cloud_app_deployment_gating_environments": {
            "description": "Enter the environment (production,staging,testing,development) where you want to enable deployment gating. Use comma (,) to separate multiple environments.",
            "type": "string"
          },
          "jira_cloud_app_enable_deployment_gating": {
            "description": "Enable to approve or reject blocked GitLab deployments from Jira Service Management.",
            "type": "boolean"
          },
          "jira_cloud_app_service_ids": {
            "description": "Copy and paste your JSM Service ID here. Use comma (,) to separate multiple IDs.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsMatrix": {
        "description": "Create/Edit Matrix integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "hostname": {
            "description": "Custom hostname of the Matrix server. The default value is `https://matrix-client.matrix.org`.",
            "type": "string"
          },
          "incident_events": {
            "description": "Trigger event when an incident is created.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "room": {
            "description": "Unique identifier for the target room (in the format `!qPKKM111FFKKsfoCVy:matrix.org`).",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "token": {
            "description": "The Matrix access token (for example, `syt-zyx57W2v1u123ew11`).",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "vulnerability_events": {
            "type": "boolean"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "token",
          "room"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsMattermost": {
        "description": "Create/Edit Mattermost integration",
        "properties": {
          "alert_channel": {
            "description": "The name of the channel to receive alert_events notifications",
            "type": "string"
          },
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "channel": {
            "description": "Default channel to use if no other channel is configured.",
            "type": "string"
          },
          "confidential_issue_channel": {
            "description": "The name of the channel to receive confidential_issues_events notifications",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_channel": {
            "description": "The name of the channel to receive confidential_note_events notifications",
            "type": "string"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "deployment_channel": {
            "description": "The name of the channel to receive deployment_events notifications",
            "type": "string"
          },
          "deployment_events": {
            "description": "Trigger event when a deployment starts or finishes.",
            "type": "boolean"
          },
          "incident_channel": {
            "description": "The name of the channel to receive incident_events notifications",
            "type": "string"
          },
          "incident_events": {
            "description": "Trigger event when an incident is created.",
            "type": "boolean"
          },
          "issue_channel": {
            "description": "The name of the channel to receive issues_events notifications",
            "type": "string"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "labels_to_be_notified": {
            "description": "Labels to send notifications for. Leave blank to receive notifications for all events.",
            "type": "string"
          },
          "labels_to_be_notified_behavior": {
            "description": "Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`.",
            "type": "string"
          },
          "merge_request_channel": {
            "description": "The name of the channel to receive merge_requests_events notifications",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_channel": {
            "description": "The name of the channel to receive note_events notifications",
            "type": "string"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_channel": {
            "description": "The name of the channel to receive pipeline_events notifications",
            "type": "string"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_channel": {
            "description": "The name of the channel to receive push_events notifications",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_channel": {
            "description": "The name of the channel to receive tag_push_events notifications",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "Mattermost notifications username.",
            "type": "string"
          },
          "vulnerability_channel": {
            "description": "The name of the channel to receive vulnerability_events notifications",
            "type": "string"
          },
          "vulnerability_events": {
            "type": "boolean"
          },
          "webhook": {
            "description": "Mattermost notifications webhook (for example, `http://mattermost.example.com/hooks/...`).",
            "type": "string"
          },
          "wiki_page_channel": {
            "description": "The name of the channel to receive wiki_page_events notifications",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsMattermostSlashCommands": {
        "description": "Create/Edit Mattermost Slash Commands integration",
        "properties": {
          "token": {
            "description": "The Mattermost token.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsMicrosoftTeams": {
        "description": "Create/Edit Microsoft Teams integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "webhook": {
            "description": "The Microsoft Teams webhook (for example, `https://outlook.office.com/webhook/...`).",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsMockCi": {
        "description": "Create/Edit Mock Ci integration",
        "properties": {
          "enable_ssl_verification": {
            "description": "Enable SSL verification. Defaults to `true` (enabled).",
            "type": "boolean"
          },
          "mock_service_url": {
            "description": "URL of the Mock CI integration.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "mock_service_url"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsMockMonitoring": {
        "description": "Create/Edit Mock Monitoring integration",
        "properties": {
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsPackagist": {
        "description": "Create/Edit Packagist integration",
        "properties": {
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "server": {
            "description": "URL of the Packagist server. The default value is `https://packagist.org`.",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "token": {
            "description": "API token of the Packagist server.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "Username of a Packagist account.",
            "type": "string"
          }
        },
        "required": [
          "username",
          "token"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsPhorge": {
        "description": "Create/Edit Phorge integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsPipelinesEmail": {
        "description": "Create/Edit Pipelines Email integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "notify_only_default_branch": {
            "description": "Send notifications for the default branch.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "recipients": {
            "description": "Comma-separated list of recipient email addresses.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "recipients"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsPivotaltracker": {
        "description": "Create/Edit Pivotaltracker integration",
        "properties": {
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "restrict_to_branch": {
            "description": "Comma-separated list of branches to automatically inspect. Leave blank to include all branches.",
            "type": "string"
          },
          "token": {
            "description": "The Pivotal Tracker token.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsPumble": {
        "description": "Create/Edit Pumble integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "webhook": {
            "description": "The Pumble webhook (for example, `https://api.pumble.com/workspaces/x/...`).",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsPushover": {
        "description": "Create/Edit Pushover integration",
        "properties": {
          "api_key": {
            "description": "The application key.",
            "type": "string"
          },
          "device": {
            "description": "Leave blank for all active devices.",
            "type": "string"
          },
          "priority": {
            "description": "The priority.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "sound": {
            "description": "The sound of the notification.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "user_key": {
            "description": "The user key.",
            "type": "string"
          }
        },
        "required": [
          "api_key",
          "user_key",
          "priority"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsRedmine": {
        "description": "Create/Edit Redmine integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "new_issue_url": {
            "description": "URL of the new issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url",
          "new_issue_url"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsSlack": {
        "description": "Create/Edit Slack integration",
        "properties": {
          "alert_channel": {
            "description": "The name of the channel to receive alert_events notifications",
            "type": "string"
          },
          "alert_events": {
            "description": "Trigger event when a new, unique alert is recorded.",
            "type": "boolean"
          },
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "channel": {
            "description": "Default channel to use if no other channel is configured.",
            "type": "string"
          },
          "confidential_issue_channel": {
            "description": "The name of the channel to receive confidential_issues_events notifications",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_channel": {
            "description": "The name of the channel to receive confidential_note_events notifications",
            "type": "string"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "deployment_channel": {
            "description": "The name of the channel to receive deployment_events notifications",
            "type": "string"
          },
          "deployment_events": {
            "description": "Trigger event when a deployment starts or finishes.",
            "type": "boolean"
          },
          "incident_channel": {
            "description": "The name of the channel to receive incident_events notifications",
            "type": "string"
          },
          "incident_events": {
            "description": "Trigger event when an incident is created.",
            "type": "boolean"
          },
          "issue_channel": {
            "description": "The name of the channel to receive issues_events notifications",
            "type": "string"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "labels_to_be_notified": {
            "description": "Labels to send notifications for. Leave blank to receive notifications for all events.",
            "type": "string"
          },
          "labels_to_be_notified_behavior": {
            "description": "Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`.",
            "type": "string"
          },
          "merge_request_channel": {
            "description": "The name of the channel to receive merge_requests_events notifications",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_channel": {
            "description": "The name of the channel to receive note_events notifications",
            "type": "string"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_channel": {
            "description": "The name of the channel to receive pipeline_events notifications",
            "type": "string"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_channel": {
            "description": "The name of the channel to receive push_events notifications",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_channel": {
            "description": "The name of the channel to receive tag_push_events notifications",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "Slack notifications username.",
            "type": "string"
          },
          "vulnerability_channel": {
            "description": "The name of the channel to receive vulnerability_events notifications",
            "type": "string"
          },
          "vulnerability_events": {
            "type": "boolean"
          },
          "webhook": {
            "description": "Slack notifications webhook (for example, `https://hooks.slack.com/services/...`).",
            "type": "string"
          },
          "wiki_page_channel": {
            "description": "The name of the channel to receive wiki_page_events notifications",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsSlackSlashCommands": {
        "description": "Create/Edit Slack Slash Commands integration",
        "properties": {
          "token": {
            "description": "The Slack token.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsSquashTm": {
        "description": "Create/Edit Squash Tm integration",
        "properties": {
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "token": {
            "description": "Secret token.",
            "type": "string"
          },
          "url": {
            "description": "URL of the Squash TM webhook.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsTeamcity": {
        "description": "Create/Edit Teamcity integration",
        "properties": {
          "build_type": {
            "description": "The build configuration ID of the TeamCity project.",
            "type": "string"
          },
          "enable_ssl_verification": {
            "description": "Enable SSL verification. Defaults to `true` (enabled).",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "password": {
            "description": "The password of the user.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "teamcity_url": {
            "description": "TeamCity root URL (for example, `https://teamcity.example.com`).",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "A user with permissions to trigger a manual build.",
            "type": "string"
          }
        },
        "required": [
          "teamcity_url",
          "build_type",
          "username",
          "password"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsTelegram": {
        "description": "Create/Edit Telegram integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "hostname": {
            "description": "Custom hostname of the Telegram API. The default value is `https://api.telegram.org`.",
            "type": "string"
          },
          "incident_events": {
            "description": "Trigger event when an incident is created.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "room": {
            "description": "Unique identifier for the target chat or the username of the target channel (in the format `@channelusername`).",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "thread": {
            "description": "Unique identifier for the target message thread (topic in a forum supergroup).",
            "type": "string"
          },
          "token": {
            "description": "The Telegram bot token (for example, `123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11`).",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "vulnerability_events": {
            "type": "boolean"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "token",
          "room"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsUnifyCircuit": {
        "description": "Create/Edit Unify Circuit integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "webhook": {
            "description": "The Unify Circuit webhook (for example, `https://circuit.com/rest/v2/webhooks/incoming/...`).",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsWebexTeams": {
        "description": "Create/Edit Webex Teams integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "webhook": {
            "description": "The Webex Teams webhook. For example, https://api.ciscospark.com/v1/webhooks/incoming/...",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsYoutrack": {
        "description": "Create/Edit Youtrack integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdIntegrationsZentao": {
        "description": "Create/Edit Zentao integration",
        "properties": {
          "api_token": {
            "type": "string"
          },
          "api_url": {
            "description": "If different from Web URL.",
            "type": "string"
          },
          "url": {
            "description": "Base URL of the ZenTao instance.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "zentao_product_xid": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "api_token",
          "zentao_product_xid"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdInvitationsEmail": {
        "description": "Updates a group or project invitation.",
        "properties": {
          "access_level": {
            "description": "A valid access level (defaults: `30`, developer access level)",
            "enum": [
              10,
              15,
              20,
              30,
              40,
              50
            ],
            "format": "int32",
            "type": "integer"
          },
          "expires_at": {
            "description": "Date string in ISO 8601 format (`YYYY-MM-DDTHH:MM:SSZ`)",
            "format": "date-time",
            "type": "string"
          },
          "member_role_id": {
            "description": "The ID of a member role for the invited user",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "putApiV4GroupsIdMembersUserId": {
        "description": "Updates a member of a group or project.",
        "properties": {
          "access_level": {
            "description": "A valid access level",
            "format": "int32",
            "type": "integer"
          },
          "expires_at": {
            "description": "Date string in the format YEAR-MONTH-DAY",
            "format": "date-time",
            "type": "string"
          },
          "member_role_id": {
            "description": "The ID of the Member Role to be updated",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "access_level"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdMembersUserIdState": {
        "description": "Changes the state of the memberships of a user in the group",
        "properties": {
          "state": {
            "description": "The new state for the memberships of the user",
            "enum": [
              "awaiting",
              "active"
            ],
            "type": "string"
          }
        },
        "required": [
          "state"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdPackagesNpmPackage*packageNameDistTagsTag": {
        "description": "Create or Update the given tag for the given NPM package and version",
        "properties": {
          "package_name": {
            "description": "Package name",
            "type": "string"
          }
        },
        "required": [
          "package_name"
        ],
        "type": "object"
      },
      "putApiV4GroupsIdVariablesKey": {
        "description": "Update an existing variable from a group",
        "properties": {
          "description": {
            "description": "The description of the variable",
            "type": "string"
          },
          "environment_scope": {
            "description": "The environment scope of the variable",
            "type": "string"
          },
          "masked": {
            "description": "Whether the variable is masked",
            "type": "string"
          },
          "protected": {
            "description": "Whether the variable is protected",
            "type": "string"
          },
          "raw": {
            "description": "Whether the variable will be expanded",
            "type": "string"
          },
          "value": {
            "description": "The value of a variable",
            "type": "string"
          },
          "variable_type": {
            "description": "The type of the variable. Default: env_var",
            "enum": [
              "env_var",
              "file"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4GroupsIdWikisSlug": {
        "description": "Update a wiki page",
        "properties": {
          "content": {
            "description": "Content of a wiki page",
            "type": "string"
          },
          "format": {
            "default": "markdown",
            "description": "Format of a wiki page. Available formats are markdown, rdoc, asciidoc and org",
            "enum": [
              "markdown",
              "rdoc",
              "asciidoc",
              "org"
            ],
            "type": "string"
          },
          "front_matter": {
            "properties": {
              "title": {
                "description": "Front matter title of a wiki page",
                "type": "string"
              }
            },
            "type": "object"
          },
          "title": {
            "description": "Title of a wiki page",
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsId": {
        "description": "Update an existing project",
        "properties": {
          "allow_merge_on_skipped_pipeline": {
            "description": "Allow to merge if pipeline is skipped",
            "type": "boolean"
          },
          "allow_pipeline_trigger_approve_deployment": {
            "description": "Allow pipeline triggerer to approve deployments",
            "type": "boolean"
          },
          "analytics_access_level": {
            "description": "Analytics access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "approvals_before_merge": {
            "description": "How many approvers should approve merge request by default",
            "format": "int32",
            "type": "integer"
          },
          "auto_cancel_pending_pipelines": {
            "description": "Auto-cancel pending pipelines",
            "enum": [
              "disabled",
              "enabled"
            ],
            "type": "string"
          },
          "auto_devops_deploy_strategy": {
            "description": "Auto Deploy strategy",
            "enum": [
              "continuous",
              "manual",
              "timed_incremental"
            ],
            "type": "string"
          },
          "auto_devops_enabled": {
            "description": "Flag indication if Auto DevOps is enabled",
            "type": "boolean"
          },
          "autoclose_referenced_issues": {
            "description": "Flag indication if referenced issues auto-closing is enabled",
            "type": "boolean"
          },
          "avatar": {
            "description": "Avatar image for project",
            "type": "file"
          },
          "build_git_strategy": {
            "description": "The Git strategy. Defaults to `fetch`",
            "enum": [
              "fetch",
              "clone"
            ],
            "type": "string"
          },
          "build_timeout": {
            "description": "Build timeout",
            "format": "int32",
            "type": "integer"
          },
          "builds_access_level": {
            "description": "Builds access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "ci_allow_fork_pipelines_to_run_in_parent_project": {
            "description": "Allow fork merge request pipelines to run in parent project",
            "type": "boolean"
          },
          "ci_config_path": {
            "description": "The path to CI config file. Defaults to `.gitlab-ci.yml`",
            "type": "string"
          },
          "ci_default_git_depth": {
            "description": "Default number of revisions for shallow cloning",
            "format": "int32",
            "type": "integer"
          },
          "ci_delete_pipelines_in_seconds": {
            "description": "Pipelines older than the configured time are deleted",
            "format": "int32",
            "type": "integer"
          },
          "ci_forward_deployment_enabled": {
            "description": "Prevent older deployment jobs that are still pending",
            "type": "boolean"
          },
          "ci_forward_deployment_rollback_allowed": {
            "description": "Allow job retries for rollback deployments",
            "type": "boolean"
          },
          "ci_id_token_sub_claim_components": {
            "description": "Claims that will be used to build the sub claim in id tokens",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ci_pipeline_variables_minimum_override_role": {
            "description": "Limit ability to override CI/CD variables when triggering a pipeline to only users with at least the set minimum role",
            "enum": [
              "no_one_allowed",
              "developer",
              "maintainer",
              "owner"
            ],
            "type": "string"
          },
          "ci_push_repository_for_job_token_allowed": {
            "description": "Allow pushing to this project's repository by authenticating with a CI/CD job token generated in this project.",
            "type": "boolean"
          },
          "ci_restrict_pipeline_cancellation_role": {
            "description": "Roles allowed to cancel pipelines and jobs.",
            "type": "string"
          },
          "ci_separated_caches": {
            "description": "Enable or disable separated caches based on branch protection.",
            "type": "boolean"
          },
          "container_expiration_policy_attributes": {
            "properties": {
              "cadence": {
                "description": "Container expiration policy cadence for recurring job",
                "type": "string"
              },
              "enabled": {
                "description": "Flag indication if container expiration policy is enabled",
                "type": "boolean"
              },
              "keep_n": {
                "description": "Container expiration policy number of images to keep",
                "format": "int32",
                "type": "integer"
              },
              "name_regex": {
                "description": "Container expiration policy regex for image removal",
                "type": "string"
              },
              "name_regex_keep": {
                "description": "Container expiration policy regex for image retention",
                "type": "string"
              },
              "older_than": {
                "description": "Container expiration policy remove images older than value",
                "type": "string"
              }
            },
            "type": "object"
          },
          "container_registry_access_level": {
            "description": "Controls visibility of the container registry. One of `disabled`, `private` or `enabled`. `private` will make the container registry accessible only to project members (reporter role and above). `enabled` will make the container registry accessible to everyone who has access to the project. `disabled` will disable the container registry",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "container_registry_enabled": {
            "description": "Deprecated: Use :container_registry_access_level instead. Flag indication if the container registry is enabled for that project",
            "type": "boolean"
          },
          "default_branch": {
            "description": "The default branch of the project",
            "example": "main",
            "type": "string"
          },
          "description": {
            "description": "The description of the project",
            "type": "string"
          },
          "emails_disabled": {
            "description": "Deprecated: Use emails_enabled instead.",
            "type": "boolean"
          },
          "emails_enabled": {
            "description": "Enable email notifications",
            "type": "boolean"
          },
          "enforce_auth_checks_on_uploads": {
            "description": "Enforce auth check on uploads",
            "type": "boolean"
          },
          "environments_access_level": {
            "description": "Environments access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "external_authorization_classification_label": {
            "description": "The classification label for the project",
            "type": "string"
          },
          "fallback_approvals_required": {
            "description": "Overall approvals required when no rule is present",
            "format": "int32",
            "type": "integer"
          },
          "feature_flags_access_level": {
            "description": "Feature flags access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "forking_access_level": {
            "description": "Forks access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "group_runners_enabled": {
            "description": "Flag indication if group runners are enabled for that project",
            "type": "boolean"
          },
          "import_url": {
            "description": "URL from which the project is imported",
            "type": "string"
          },
          "infrastructure_access_level": {
            "description": "Infrastructure access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "issue_branch_template": {
            "description": "Template used to create a branch from an issue",
            "type": "string"
          },
          "issues_access_level": {
            "description": "Issues access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "issues_enabled": {
            "description": "Flag indication if the issue tracker is enabled",
            "type": "boolean"
          },
          "issues_template": {
            "description": "Default description for Issues. Description is parsed with GitLab Flavored Markdown.",
            "type": "string"
          },
          "jobs_enabled": {
            "description": "Flag indication if jobs are enabled",
            "type": "boolean"
          },
          "keep_latest_artifact": {
            "description": "Indicates if the latest artifact should be kept for this project.",
            "type": "boolean"
          },
          "lfs_enabled": {
            "description": "Flag indication if Git LFS is enabled for that project",
            "type": "boolean"
          },
          "max_artifacts_size": {
            "description": "Set the maximum file size for each job's artifacts",
            "format": "int32",
            "type": "integer"
          },
          "merge_commit_template": {
            "description": "Template used to create merge commit message",
            "type": "string"
          },
          "merge_method": {
            "description": "The merge method used when merging merge requests",
            "enum": [
              "ff",
              "rebase_merge",
              "merge"
            ],
            "type": "string"
          },
          "merge_pipelines_enabled": {
            "description": "Enable merged results pipelines.",
            "type": "boolean"
          },
          "merge_requests_access_level": {
            "description": "Merge requests access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "merge_requests_enabled": {
            "description": "Flag indication if merge requests are enabled",
            "type": "boolean"
          },
          "merge_requests_template": {
            "description": "Default description for merge requests. Description is parsed with GitLab Flavored Markdown.",
            "type": "string"
          },
          "merge_trains_enabled": {
            "description": "Enable merge trains.",
            "type": "boolean"
          },
          "merge_trains_skip_train_allowed": {
            "description": "Allow merge train merge requests to be merged without waiting for pipelines to finish.",
            "type": "boolean"
          },
          "mirror": {
            "description": "[Deprecated] Enables pull mirroring in a project",
            "type": "boolean"
          },
          "mirror_branch_regex": {
            "description": "[Deprecated] Only mirror branches match regex",
            "type": "string"
          },
          "mirror_overwrites_diverged_branches": {
            "description": "[Deprecated] Pull mirror overwrites diverged branches",
            "type": "boolean"
          },
          "mirror_trigger_builds": {
            "description": "[Deprecated] Pull mirroring triggers builds",
            "type": "boolean"
          },
          "mirror_user_id": {
            "description": "[Deprecated] User responsible for all the activity surrounding a pull mirror event. Can only be set by admins",
            "format": "int32",
            "type": "integer"
          },
          "model_experiments_access_level": {
            "description": "Model experiments access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "model_registry_access_level": {
            "description": "Model registry access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "monitor_access_level": {
            "description": "Monitor access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "mr_default_target_self": {
            "description": "Merge requests of this forked project targets itself by default",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the project",
            "example": "project",
            "type": "string"
          },
          "only_allow_merge_if_all_discussions_are_resolved": {
            "description": "Only allow to merge if all threads are resolved",
            "type": "boolean"
          },
          "only_allow_merge_if_all_status_checks_passed": {
            "description": "Blocks merge requests from merging unless all status checks have passed",
            "type": "boolean"
          },
          "only_allow_merge_if_pipeline_succeeds": {
            "description": "Only allow to merge if builds succeed",
            "type": "boolean"
          },
          "only_mirror_protected_branches": {
            "description": "[Deprecated] Only mirror protected branches",
            "type": "boolean"
          },
          "packages_enabled": {
            "description": "Enable project packages feature",
            "type": "boolean"
          },
          "pages_access_level": {
            "description": "Pages access level. One of `disabled`, `private`, `enabled` or `public`",
            "enum": [
              "disabled",
              "private",
              "enabled",
              "public"
            ],
            "type": "string"
          },
          "path": {
            "description": "The path of the repository",
            "example": "group/project",
            "type": "string"
          },
          "prevent_merge_without_jira_issue": {
            "description": "Require an associated issue from Jira",
            "type": "boolean"
          },
          "printing_merge_request_link_enabled": {
            "description": "Show link to create/view merge request when pushing from the command line",
            "type": "boolean"
          },
          "public_builds": {
            "description": "Deprecated: Use public_jobs instead.",
            "type": "boolean"
          },
          "public_jobs": {
            "description": "Perform public builds",
            "type": "boolean"
          },
          "releases_access_level": {
            "description": "Releases access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "remove_source_branch_after_merge": {
            "description": "Remove the source branch by default after merge",
            "type": "boolean"
          },
          "repository_access_level": {
            "description": "Repository access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "repository_storage": {
            "description": "Which storage shard the repository is on. Available only to admins",
            "type": "string"
          },
          "request_access_enabled": {
            "description": "Allow users to request member access",
            "type": "boolean"
          },
          "requirements_access_level": {
            "description": "Requirements feature access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "resolve_outdated_diff_discussions": {
            "description": "Automatically resolve merge request diff threads on lines changed with a push",
            "type": "boolean"
          },
          "restrict_user_defined_variables": {
            "description": "Restrict use of user-defined variables when triggering a pipeline",
            "type": "boolean"
          },
          "security_and_compliance_access_level": {
            "description": "Security and compliance access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "service_desk_enabled": {
            "description": "Disable or enable the service desk",
            "type": "boolean"
          },
          "shared_runners_enabled": {
            "description": "Flag indication if shared runners are enabled for that project",
            "type": "boolean"
          },
          "show_default_award_emojis": {
            "description": "Show default award emojis",
            "type": "boolean"
          },
          "show_diff_preview_in_email": {
            "description": "Include the code diff preview in merge request notification emails",
            "type": "boolean"
          },
          "snippets_access_level": {
            "description": "Snippets access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "snippets_enabled": {
            "description": "Flag indication if snippets are enabled",
            "type": "boolean"
          },
          "squash_commit_template": {
            "description": "Template used to create squash commit message",
            "type": "string"
          },
          "squash_option": {
            "description": "Squash default for project. One of `never`, `always`, `default_on`, or `default_off`.",
            "enum": [
              "never",
              "always",
              "default_on",
              "default_off"
            ],
            "type": "string"
          },
          "suggestion_commit_message": {
            "description": "The commit message used to apply merge request suggestions",
            "type": "string"
          },
          "tag_list": {
            "description": "Deprecated: Use :topics instead",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "topics": {
            "description": "The list of topics for a project",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "visibility": {
            "description": "The visibility of the project.",
            "enum": [
              "private",
              "internal",
              "public"
            ],
            "type": "string"
          },
          "warn_about_potentially_unwanted_characters": {
            "description": "Warn about potentially unwanted characters",
            "type": "boolean"
          },
          "wiki_access_level": {
            "description": "Wiki access level. One of `disabled`, `private` or `enabled`",
            "enum": [
              "disabled",
              "private",
              "enabled"
            ],
            "type": "string"
          },
          "wiki_enabled": {
            "description": "Flag indication if the wiki is enabled",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdAccessRequestsUserIdApprove": {
        "description": "Approves an access request for the given user.",
        "properties": {
          "access_level": {
            "default": 30,
            "description": "A valid access level (defaults: `30`, the Developer role)",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdBadgesBadgeId": {
        "description": "Updates a badge of a project.",
        "properties": {
          "image_url": {
            "description": "URL of the badge image",
            "type": "string"
          },
          "link_url": {
            "description": "URL of the badge link",
            "type": "string"
          },
          "name": {
            "description": "Name for the badge",
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdClustersClusterId": {
        "description": "Edit project cluster",
        "properties": {
          "domain": {
            "description": "Cluster base domain",
            "type": "string"
          },
          "enabled": {
            "description": "Determines if cluster is active or not",
            "type": "boolean"
          },
          "environment_scope": {
            "description": "The associated environment to the cluster",
            "type": "string"
          },
          "managed": {
            "description": "Determines if GitLab will manage namespaces and service accounts for this cluster",
            "type": "boolean"
          },
          "management_project_id": {
            "description": "The ID of the management project",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Cluster name",
            "type": "string"
          },
          "namespace_per_environment": {
            "default": true,
            "description": "Deploy each environment to a separate Kubernetes namespace",
            "type": "boolean"
          },
          "platform_kubernetes_attributes": {
            "description": "Platform Kubernetes data",
            "properties": {
              "api_url": {
                "description": "URL to access the Kubernetes API",
                "type": "string"
              },
              "ca_cert": {
                "description": "TLS certificate (needed if API is using a self-signed TLS certificate)",
                "type": "string"
              },
              "namespace": {
                "description": "Unique namespace related to Project",
                "type": "string"
              },
              "token": {
                "description": "Token to authenticate against Kubernetes",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdCustomAttributesKey": {
        "description": "Set a custom attribute on a project",
        "properties": {
          "value": {
            "description": "The value of the custom attribute",
            "type": "string"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdDebianDistributionsCodename": {
        "description": "Update a Debian Distribution",
        "properties": {
          "architectures": {
            "description": "The list of Architectures",
            "example": "amd64",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "components": {
            "description": "The list of Components",
            "example": "main",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "description": "The Debian Description",
            "example": "My description",
            "type": "string"
          },
          "label": {
            "description": "The Debian Label",
            "example": "grep.be",
            "type": "string"
          },
          "origin": {
            "description": "The Debian Origin",
            "example": "Grep",
            "type": "string"
          },
          "suite": {
            "description": "The Debian Suite",
            "example": "unstable",
            "type": "string"
          },
          "valid_time_duration_seconds": {
            "description": "The duration before the Release file should be considered expired by the client",
            "example": 604800,
            "format": "int32",
            "type": "integer"
          },
          "version": {
            "description": "The Debian Version",
            "example": "12",
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdDeployKeysKeyId": {
        "description": "Update deploy key",
        "properties": {
          "can_push": {
            "description": "Can deploy key push to the project's repository",
            "type": "boolean"
          },
          "title": {
            "description": "New deploy key's title",
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdDeploymentsDeploymentId": {
        "description": "Update a deployment",
        "properties": {
          "status": {
            "description": "The new status of the deployment. One of `running`, `success`, `failed`, or `canceled`",
            "enum": [
              "running",
              "success",
              "failed",
              "canceled"
            ],
            "type": "string"
          }
        },
        "required": [
          "status"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdEnvironmentsEnvironmentId": {
        "description": "Update an existing environment",
        "properties": {
          "auto_stop_setting": {
            "description": "The auto stop setting for the environment. Allowed values are `always` and `with_action`",
            "enum": [
              "always",
              "with_action"
            ],
            "type": "string"
          },
          "cluster_agent_id": {
            "description": "The ID of the Cluster Agent to associate with this environment",
            "format": "int32",
            "type": "integer"
          },
          "description": {
            "description": "The description of the environment",
            "type": "string"
          },
          "external_url": {
            "description": "The new URL on which this deployment is viewable",
            "type": "string"
          },
          "flux_resource_path": {
            "description": "The Flux resource path to associate with this environment",
            "type": "string"
          },
          "kubernetes_namespace": {
            "description": "The Kubernetes namespace to associate with this environment",
            "type": "string"
          },
          "tier": {
            "description": "The tier of the new environment. Allowed values are `production`, `staging`, `testing`, `development`, and `other`",
            "enum": [
              "production",
              "staging",
              "testing",
              "development",
              "other"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdErrorTrackingSettings": {
        "description": "Update Error Tracking project settings. Available in GitLab 15.10 and later.",
        "properties": {
          "active": {
            "description": "Pass true to enable the configured Error Tracking settings or false to disable it.",
            "type": "boolean"
          },
          "integrated": {
            "description": "Pass true to enable the integrated Error Tracking backend.",
            "type": "boolean"
          }
        },
        "required": [
          "active",
          "integrated"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdFeatureFlagsFeatureFlagName": {
        "description": "Update a feature flag",
        "properties": {
          "active": {
            "description": "The active state of the flag. Supported in GitLab 13.3 and later",
            "type": "boolean"
          },
          "description": {
            "description": "The description of the feature flag",
            "type": "string"
          },
          "name": {
            "description": "The new name of the feature flag. Supported in GitLab 13.3 and later",
            "type": "string"
          },
          "strategies": {
            "items": {
              "properties": {
                "_destroy": {
                  "description": "Delete the strategy when true",
                  "type": "boolean"
                },
                "id": {
                  "description": "The feature flag strategy ID",
                  "format": "int32",
                  "type": "integer"
                },
                "name": {
                  "description": "The strategy name",
                  "type": "string"
                },
                "parameters": {
                  "description": "The strategy parameters as a JSON-formatted string e.g. `{\"userIds\":\"user1\"}`",
                  "type": "string"
                },
                "scopes": {
                  "items": {
                    "properties": {
                      "_destroy": {
                        "description": "Delete the scope when true",
                        "type": "boolean"
                      },
                      "environment_scope": {
                        "description": "The environment scope of the scope",
                        "type": "string"
                      },
                      "id": {
                        "description": "The scope id",
                        "format": "int32",
                        "type": "integer"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "user_list_id": {
                  "description": "The ID of the feature flag user list",
                  "format": "int32",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdFeatureFlagsUserListsIid": {
        "description": "Update a feature flag user list",
        "properties": {
          "name": {
            "description": "The name of the list",
            "type": "string"
          },
          "user_xids": {
            "description": "A comma separated list of external user ids",
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdFreezePeriodsFreezePeriodId": {
        "description": "Update a freeze period",
        "properties": {
          "cron_timezone": {
            "description": "The time zone for the cron fields",
            "type": "string"
          },
          "freeze_end": {
            "description": "End of the freeze period in cron format",
            "type": "string"
          },
          "freeze_start": {
            "description": "Start of the freeze period in cron format",
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdHooksHookId": {
        "description": "Edit project hook",
        "properties": {
          "branch_filter_strategy": {
            "description": "Filter push events by branch. Possible values are `wildcard` (default), `regex`, and `all_branches`",
            "enum": [
              "wildcard",
              "regex",
              "all_branches"
            ],
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger hook on confidential issues events",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger hook on confidential note (comment) events",
            "type": "boolean"
          },
          "custom_headers": {
            "description": "Custom headers",
            "items": {
              "properties": {
                "key": {
                  "description": "Name of the header",
                  "example": "X-Custom-Header",
                  "type": "string"
                },
                "value": {
                  "description": "Value of the header",
                  "example": "value",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "custom_webhook_template": {
            "description": "Custom template for the request payload",
            "type": "string"
          },
          "deployment_events": {
            "description": "Trigger hook on deployment events",
            "type": "boolean"
          },
          "description": {
            "description": "Description of the hook",
            "type": "string"
          },
          "emoji_events": {
            "description": "Trigger hook on emoji events",
            "type": "boolean"
          },
          "enable_ssl_verification": {
            "description": "Do SSL verification when triggering the hook",
            "type": "boolean"
          },
          "feature_flag_events": {
            "description": "Trigger hook on feature flag events",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger hook on issues events",
            "type": "boolean"
          },
          "job_events": {
            "description": "Trigger hook on job events",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger hook on merge request events",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the hook",
            "type": "string"
          },
          "note_events": {
            "description": "Trigger hook on note (comment) events",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger hook on pipeline events",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger hook on push events",
            "type": "boolean"
          },
          "push_events_branch_filter": {
            "description": "Trigger hook on specified branch only",
            "type": "string"
          },
          "releases_events": {
            "description": "Trigger hook on release events",
            "type": "boolean"
          },
          "resource_access_token_events": {
            "description": "Trigger hook on project access token expiry events",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger hook on tag push events",
            "type": "boolean"
          },
          "token": {
            "description": "Secret token to validate received payloads; this will not be returned in the response",
            "type": "string"
          },
          "url": {
            "description": "The URL to send the request to",
            "type": "string"
          },
          "url_variables": {
            "description": "URL variables for interpolation",
            "items": {
              "properties": {
                "key": {
                  "description": "Name of the variable",
                  "example": "token",
                  "type": "string"
                },
                "value": {
                  "description": "Value of the variable",
                  "example": "123",
                  "type": "string"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "vulnerability_events": {
            "description": "Trigger hook on vulnerability events",
            "type": "boolean"
          },
          "wiki_page_events": {
            "description": "Trigger hook on wiki events",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdHooksHookIdCustomHeadersKey": {
        "description": "Set a custom header",
        "properties": {
          "value": {
            "description": "The value of the custom header",
            "type": "string"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdHooksHookIdUrlVariablesKey": {
        "description": "Set a url variable",
        "properties": {
          "value": {
            "description": "The value of the variable",
            "type": "string"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsAppleAppStore": {
        "description": "Create/Edit Apple App Store integration",
        "properties": {
          "app_store_issuer_id": {
            "description": "Apple App Store Connect issuer ID.",
            "type": "string"
          },
          "app_store_key_id": {
            "description": "Apple App Store Connect key ID.",
            "type": "string"
          },
          "app_store_private_key": {
            "description": "Apple App Store Connect private key.",
            "type": "string"
          },
          "app_store_private_key_file_name": {
            "description": "Apple App Store Connect private key file name.",
            "type": "string"
          },
          "app_store_protected_refs": {
            "description": "Set variables on protected branches and tags only.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "app_store_issuer_id",
          "app_store_key_id",
          "app_store_private_key_file_name",
          "app_store_private_key"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsAsana": {
        "description": "Create/Edit Asana integration",
        "properties": {
          "api_key": {
            "description": "User API token. The user must have access to the task. All comments are attributed to this user.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "restrict_to_branch": {
            "description": "Comma-separated list of branches to be automatically inspected. Leave blank to include all branches.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "api_key"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsAssembla": {
        "description": "Create/Edit Assembla integration",
        "properties": {
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "subdomain": {
            "description": "The subdomain setting.",
            "type": "string"
          },
          "token": {
            "description": "The authentication token.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsBamboo": {
        "description": "Create/Edit Bamboo integration",
        "properties": {
          "bamboo_url": {
            "description": "Bamboo root URL (for example, `https://bamboo.example.com`).",
            "type": "string"
          },
          "build_key": {
            "description": "Bamboo build plan key (for example, `KEY`).",
            "type": "string"
          },
          "enable_ssl_verification": {
            "description": "Enable SSL verification. Defaults to `true` (enabled).",
            "type": "boolean"
          },
          "password": {
            "description": "Password of the user.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "User with API access to the Bamboo server.",
            "type": "string"
          }
        },
        "required": [
          "bamboo_url",
          "build_key",
          "username",
          "password"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsBugzilla": {
        "description": "Create/Edit Bugzilla integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "new_issue_url": {
            "description": "URL of the new issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url",
          "new_issue_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsBuildkite": {
        "description": "Create/Edit Buildkite integration",
        "properties": {
          "enable_ssl_verification": {
            "description": "DEPRECATED: This parameter has no effect because SSL verification is always enabled.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "project_url": {
            "description": "Pipeline URL (for example, `https://buildkite.com/example/pipeline`).",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "token": {
            "description": "Token you get after you create a Buildkite pipeline with a GitLab repository.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "token"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsCampfire": {
        "description": "Create/Edit Campfire integration",
        "properties": {
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "room": {
            "description": "ID portion of the Campfire room URL.",
            "type": "string"
          },
          "subdomain": {
            "description": "`.campfirenow.com` subdomain when you're signed in.",
            "type": "string"
          },
          "token": {
            "description": "API authentication token from Campfire. To get the token, sign in to Campfire and select **My info**.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsClickup": {
        "description": "Create/Edit Clickup integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsConfluence": {
        "description": "Create/Edit Confluence integration",
        "properties": {
          "confluence_url": {
            "description": "URL of the Confluence Workspace hosted on `atlassian.net`.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "confluence_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsCustomIssueTracker": {
        "description": "Create/Edit Custom Issue Tracker integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "new_issue_url": {
            "description": "URL of the new issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url",
          "new_issue_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsDatadog": {
        "description": "Create/Edit Datadog integration",
        "properties": {
          "api_key": {
            "description": "<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.datadoghq.com/account_management/api-app-keys/\">API key</a> used for authentication with Datadog.",
            "type": "string"
          },
          "api_url": {
            "description": "Full URL of your Datadog site. Only required if you do not use a standard Datadog site.",
            "type": "string"
          },
          "archive_trace_events": {
            "description": "When enabled, job logs are collected by Datadog and displayed along with pipeline execution traces.",
            "type": "boolean"
          },
          "build_events": {
            "description": "Trigger event when a build is created.",
            "type": "boolean"
          },
          "datadog_ci_visibility": {
            "description": "Enable CI Visibility",
            "type": "boolean"
          },
          "datadog_env": {
            "description": "For self-managed deployments, `env` tag for all the data sent to Datadog.",
            "type": "string"
          },
          "datadog_service": {
            "description": "Tag all pipeline data from this GitLab instance in Datadog. Can be used when managing several self-managed deployments.",
            "type": "string"
          },
          "datadog_site": {
            "description": "Datadog site to send data to. Learn more about Datadog sites in the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.datadoghq.com/getting_started/site/\">documentation</a>.",
            "type": "string"
          },
          "datadog_tags": {
            "description": "Custom tags in Datadog. Specify one tag per line in the format `key:value\\nkey2:value2`.",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "project_events": {
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "subgroup_events": {
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "api_key"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsDiffblueCover": {
        "description": "Create/Edit Diffblue Cover integration",
        "properties": {
          "diffblue_access_token_name": {
            "description": "Access token name used by Diffblue Cover in pipelines.",
            "type": "string"
          },
          "diffblue_access_token_secret": {
            "description": "Access token secret used by Diffblue Cover in pipelines.",
            "type": "string"
          },
          "diffblue_license_key": {
            "description": "Diffblue Cover license key.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "diffblue_license_key",
          "diffblue_access_token_name",
          "diffblue_access_token_secret"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsDiscord": {
        "description": "Create/Edit Discord integration",
        "properties": {
          "alert_channel": {
            "description": "The name of the channel to receive alert_events notifications",
            "type": "string"
          },
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issue_channel": {
            "description": "The name of the channel to receive confidential_issues_events notifications",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_channel": {
            "description": "The name of the channel to receive confidential_note_events notifications",
            "type": "string"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "deployment_channel": {
            "description": "The name of the channel to receive deployment_events notifications",
            "type": "string"
          },
          "deployment_events": {
            "description": "Trigger event when a deployment starts or finishes.",
            "type": "boolean"
          },
          "incident_channel": {
            "description": "The name of the channel to receive incident_events notifications",
            "type": "string"
          },
          "issue_channel": {
            "description": "The name of the channel to receive issues_events notifications",
            "type": "string"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_request_channel": {
            "description": "The name of the channel to receive merge_requests_events notifications",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_channel": {
            "description": "The name of the channel to receive note_events notifications",
            "type": "string"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_channel": {
            "description": "The name of the channel to receive pipeline_events notifications",
            "type": "string"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_channel": {
            "description": "The name of the channel to receive push_events notifications",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_channel": {
            "description": "The name of the channel to receive tag_push_events notifications",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "vulnerability_channel": {
            "description": "The name of the channel to receive vulnerability_events notifications",
            "type": "string"
          },
          "webhook": {
            "description": "Discord webhook (for example, `https://discord.com/api/webhooks/…`).",
            "type": "string"
          },
          "wiki_page_channel": {
            "description": "The name of the channel to receive wiki_page_events notifications",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsDroneCi": {
        "description": "Create/Edit Drone Ci integration",
        "properties": {
          "drone_url": {
            "description": "Drone CI URL (for example, `http://drone.example.com`).",
            "type": "string"
          },
          "enable_ssl_verification": {
            "description": "Enable SSL verification. Defaults to `true` (enabled).",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "token": {
            "description": "Drone CI token.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "drone_url",
          "token"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsEmailsOnPush": {
        "description": "Create/Edit Emails On Push integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "disable_diffs": {
            "description": "Disable code diffs",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "recipients": {
            "description": "Emails separated by whitespace.",
            "type": "string"
          },
          "send_from_committer_email": {
            "description": "Send from committer",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "recipients"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsEwm": {
        "description": "Create/Edit Ewm integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "new_issue_url": {
            "description": "URL of the new issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url",
          "new_issue_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsExternalWiki": {
        "description": "Create/Edit External Wiki integration",
        "properties": {
          "external_wiki_url": {
            "description": "URL of the external wiki.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "external_wiki_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsGitGuardian": {
        "description": "Create/Edit Git Guardian integration",
        "properties": {
          "token": {
            "description": "Personal access token to authenticate calls to the GitGuardian API.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsGithub": {
        "description": "Create/Edit Github integration",
        "properties": {
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "repository_url": {
            "description": "GitHub repository URL.",
            "type": "string"
          },
          "static_context": {
            "description": "Append the hostname of your GitLab instance to the status check name.",
            "type": "boolean"
          },
          "token": {
            "description": "GitHub API token with `repo:status` OAuth scope.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token",
          "repository_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsGitlabSlackApplication": {
        "description": "Create/Edit Gitlab Slack Application integration",
        "properties": {
          "alert_channel": {
            "description": "The name of the channel to receive alert_events notifications",
            "type": "string"
          },
          "alert_events": {
            "description": "Trigger event when a new, unique alert is recorded.",
            "type": "boolean"
          },
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "channel": {
            "description": "Default channel to use if no other channel is configured.",
            "type": "string"
          },
          "confidential_issue_channel": {
            "description": "The name of the channel to receive confidential_issues_events notifications",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_channel": {
            "description": "The name of the channel to receive confidential_note_events notifications",
            "type": "string"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "deployment_channel": {
            "description": "The name of the channel to receive deployment_events notifications",
            "type": "string"
          },
          "deployment_events": {
            "description": "Trigger event when a deployment starts or finishes.",
            "type": "boolean"
          },
          "incident_channel": {
            "description": "The name of the channel to receive incident_events notifications",
            "type": "string"
          },
          "incident_events": {
            "description": "Trigger event when an incident is created.",
            "type": "boolean"
          },
          "issue_channel": {
            "description": "The name of the channel to receive issues_events notifications",
            "type": "string"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "labels_to_be_notified": {
            "description": "Labels to send notifications for. Leave blank to receive notifications for all events.",
            "type": "string"
          },
          "labels_to_be_notified_behavior": {
            "description": "Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`.",
            "type": "string"
          },
          "merge_request_channel": {
            "description": "The name of the channel to receive merge_requests_events notifications",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_channel": {
            "description": "The name of the channel to receive note_events notifications",
            "type": "string"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_channel": {
            "description": "The name of the channel to receive pipeline_events notifications",
            "type": "string"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_channel": {
            "description": "The name of the channel to receive push_events notifications",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_channel": {
            "description": "The name of the channel to receive tag_push_events notifications",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "vulnerability_channel": {
            "description": "The name of the channel to receive vulnerability_events notifications",
            "type": "string"
          },
          "vulnerability_events": {
            "type": "boolean"
          },
          "wiki_page_channel": {
            "description": "The name of the channel to receive wiki_page_events notifications",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsGoogleCloudPlatformArtifactRegistry": {
        "description": "Create/Edit Google Cloud Platform Artifact Registry integration",
        "properties": {
          "artifact_registry_location": {
            "description": "Location of the Artifact Registry repository.",
            "type": "string"
          },
          "artifact_registry_project_id": {
            "description": "ID of the Google Cloud project.",
            "type": "string"
          },
          "artifact_registry_repositories": {
            "description": "Repository of Artifact Registry.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "artifact_registry_project_id",
          "artifact_registry_repositories",
          "artifact_registry_location"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederation": {
        "description": "Create/Edit Google Cloud Platform Workload Identity Federation integration",
        "properties": {
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "workload_identity_federation_project_id": {
            "description": "Google Cloud project ID for the Workload Identity Federation.",
            "type": "string"
          },
          "workload_identity_federation_project_number": {
            "description": "Google Cloud project number for the Workload Identity Federation.",
            "type": "string"
          },
          "workload_identity_pool_id": {
            "description": "ID of the Workload Identity Pool.",
            "type": "string"
          },
          "workload_identity_pool_provider_id": {
            "description": "ID of the Workload Identity Pool provider.",
            "type": "string"
          }
        },
        "required": [
          "workload_identity_federation_project_id",
          "workload_identity_federation_project_number",
          "workload_identity_pool_id",
          "workload_identity_pool_provider_id"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsGooglePlay": {
        "description": "Create/Edit Google Play integration",
        "properties": {
          "google_play_protected_refs": {
            "description": "Set variables on protected branches and tags only.",
            "type": "boolean"
          },
          "package_name": {
            "description": "Package name of the app in Google Play.",
            "type": "string"
          },
          "service_account_key": {
            "description": "Google Play service account key.",
            "type": "string"
          },
          "service_account_key_file_name": {
            "description": "File name of the Google Play service account key.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "package_name",
          "service_account_key_file_name",
          "service_account_key"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsHangoutsChat": {
        "description": "Create/Edit Hangouts Chat integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "webhook": {
            "description": "The Hangouts Chat webhook (for example, `https://chat.googleapis.com/v1/spaces...`).",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsHarbor": {
        "description": "Create/Edit Harbor integration",
        "properties": {
          "password": {
            "description": "The password of the user.",
            "type": "string"
          },
          "project_name": {
            "description": "The name of the project in the Harbor instance. For example, `testproject`.",
            "type": "string"
          },
          "url": {
            "description": "The base URL to the Harbor instance linked to the GitLab project. For example, `https://demo.goharbor.io`.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "The username created in the Harbor interface.",
            "type": "string"
          }
        },
        "required": [
          "url",
          "project_name",
          "username",
          "password"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsIrker": {
        "description": "Create/Edit Irker integration",
        "properties": {
          "colorize_messages": {
            "description": "Colorize messages",
            "type": "boolean"
          },
          "default_irc_uri": {
            "description": "URI to add before each recipient. The default value is `irc://irc.network.net:6697/`.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "recipients": {
            "description": "Comma-separated list of channels or email addresses.",
            "type": "string"
          },
          "server_host": {
            "description": "irker daemon hostname. The default value is `localhost`.",
            "type": "string"
          },
          "server_port": {
            "description": "irker daemon port. The default value is `6659`.",
            "format": "int32",
            "type": "integer"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "recipients"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsJenkins": {
        "description": "Create/Edit Jenkins integration",
        "properties": {
          "enable_ssl_verification": {
            "description": "Enable SSL verification. Defaults to `true` (enabled).",
            "type": "boolean"
          },
          "jenkins_url": {
            "description": "URL of the Jenkins server.",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "password": {
            "description": "Password of the Jenkins server.",
            "type": "string"
          },
          "project_name": {
            "description": "Name of the Jenkins project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "Username of the Jenkins server.",
            "type": "string"
          }
        },
        "required": [
          "jenkins_url",
          "project_name"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsJira": {
        "description": "Create/Edit Jira integration",
        "properties": {
          "api_url": {
            "description": "The base URL to the Jira instance API. Web URL value is used if not set (for example, `https://jira-api.example.com`).",
            "type": "string"
          },
          "commit_events": {
            "description": "Trigger event when a commit is created or updated.",
            "type": "boolean"
          },
          "issues_enabled": {
            "description": "Enable viewing Jira issues in GitLab.",
            "type": "string"
          },
          "jira_auth_type": {
            "description": "The authentication method to use with Jira. Use `0` for Basic Authentication, and `1` for Jira personal access token. Defaults to `0`.",
            "format": "int32",
            "type": "integer"
          },
          "jira_issue_prefix": {
            "description": "Prefix to match Jira issue keys.",
            "type": "string"
          },
          "jira_issue_regex": {
            "description": "Regular expression to match Jira issue keys.",
            "type": "string"
          },
          "jira_issue_transition_id": {
            "description": "The ID of one or more transitions for [custom issue transitions](../integration/jira/issues.md#custom-issue-transitions).Ignored when `jira_issue_transition_automatic` is enabled. Defaults to a blank string,which disables custom transitions.",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "password": {
            "description": "The Jira API token, password, or personal access token to use with Jira. When using Basic Authentication (`jira_auth_type` is `0`), use an API token for Jira Cloud, and a password for Jira Data Center or Jira Server. For a Jira personal access token (`jira_auth_type` is `1`), use the personal access token.",
            "type": "string"
          },
          "project_keys": {
            "description": "Keys of Jira projects. When `issues_enabled` is `true`, this setting specifies which Jira projects to view issues from in GitLab.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "url": {
            "description": "The URL to the Jira project which is being linked to this GitLab project (for example, `https://jira.example.com`).",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "The email or username to use with Jira. Use an email for Jira Cloud, and a username for Jira Data Center and Jira Server. Required when using Basic Authentication (`jira_auth_type` is `0`).",
            "type": "string"
          }
        },
        "required": [
          "url",
          "password"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsJiraCloudApp": {
        "description": "Create/Edit Jira Cloud App integration",
        "properties": {
          "jira_cloud_app_deployment_gating_environments": {
            "description": "Enter the environment (production,staging,testing,development) where you want to enable deployment gating. Use comma (,) to separate multiple environments.",
            "type": "string"
          },
          "jira_cloud_app_enable_deployment_gating": {
            "description": "Enable to approve or reject blocked GitLab deployments from Jira Service Management.",
            "type": "boolean"
          },
          "jira_cloud_app_service_ids": {
            "description": "Copy and paste your JSM Service ID here. Use comma (,) to separate multiple IDs.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsMatrix": {
        "description": "Create/Edit Matrix integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "hostname": {
            "description": "Custom hostname of the Matrix server. The default value is `https://matrix-client.matrix.org`.",
            "type": "string"
          },
          "incident_events": {
            "description": "Trigger event when an incident is created.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "room": {
            "description": "Unique identifier for the target room (in the format `!qPKKM111FFKKsfoCVy:matrix.org`).",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "token": {
            "description": "The Matrix access token (for example, `syt-zyx57W2v1u123ew11`).",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "vulnerability_events": {
            "type": "boolean"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "token",
          "room"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsMattermost": {
        "description": "Create/Edit Mattermost integration",
        "properties": {
          "alert_channel": {
            "description": "The name of the channel to receive alert_events notifications",
            "type": "string"
          },
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "channel": {
            "description": "Default channel to use if no other channel is configured.",
            "type": "string"
          },
          "confidential_issue_channel": {
            "description": "The name of the channel to receive confidential_issues_events notifications",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_channel": {
            "description": "The name of the channel to receive confidential_note_events notifications",
            "type": "string"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "deployment_channel": {
            "description": "The name of the channel to receive deployment_events notifications",
            "type": "string"
          },
          "deployment_events": {
            "description": "Trigger event when a deployment starts or finishes.",
            "type": "boolean"
          },
          "incident_channel": {
            "description": "The name of the channel to receive incident_events notifications",
            "type": "string"
          },
          "incident_events": {
            "description": "Trigger event when an incident is created.",
            "type": "boolean"
          },
          "issue_channel": {
            "description": "The name of the channel to receive issues_events notifications",
            "type": "string"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "labels_to_be_notified": {
            "description": "Labels to send notifications for. Leave blank to receive notifications for all events.",
            "type": "string"
          },
          "labels_to_be_notified_behavior": {
            "description": "Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`.",
            "type": "string"
          },
          "merge_request_channel": {
            "description": "The name of the channel to receive merge_requests_events notifications",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_channel": {
            "description": "The name of the channel to receive note_events notifications",
            "type": "string"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_channel": {
            "description": "The name of the channel to receive pipeline_events notifications",
            "type": "string"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_channel": {
            "description": "The name of the channel to receive push_events notifications",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_channel": {
            "description": "The name of the channel to receive tag_push_events notifications",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "Mattermost notifications username.",
            "type": "string"
          },
          "vulnerability_channel": {
            "description": "The name of the channel to receive vulnerability_events notifications",
            "type": "string"
          },
          "vulnerability_events": {
            "type": "boolean"
          },
          "webhook": {
            "description": "Mattermost notifications webhook (for example, `http://mattermost.example.com/hooks/...`).",
            "type": "string"
          },
          "wiki_page_channel": {
            "description": "The name of the channel to receive wiki_page_events notifications",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsMattermostSlashCommands": {
        "description": "Create/Edit Mattermost Slash Commands integration",
        "properties": {
          "token": {
            "description": "The Mattermost token.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsMicrosoftTeams": {
        "description": "Create/Edit Microsoft Teams integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "webhook": {
            "description": "The Microsoft Teams webhook (for example, `https://outlook.office.com/webhook/...`).",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsMockCi": {
        "description": "Create/Edit Mock Ci integration",
        "properties": {
          "enable_ssl_verification": {
            "description": "Enable SSL verification. Defaults to `true` (enabled).",
            "type": "boolean"
          },
          "mock_service_url": {
            "description": "URL of the Mock CI integration.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "mock_service_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsMockMonitoring": {
        "description": "Create/Edit Mock Monitoring integration",
        "properties": {
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsPackagist": {
        "description": "Create/Edit Packagist integration",
        "properties": {
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "server": {
            "description": "URL of the Packagist server. The default value is `https://packagist.org`.",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "token": {
            "description": "API token of the Packagist server.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "Username of a Packagist account.",
            "type": "string"
          }
        },
        "required": [
          "username",
          "token"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsPhorge": {
        "description": "Create/Edit Phorge integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsPipelinesEmail": {
        "description": "Create/Edit Pipelines Email integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "notify_only_default_branch": {
            "description": "Send notifications for the default branch.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "recipients": {
            "description": "Comma-separated list of recipient email addresses.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "recipients"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsPivotaltracker": {
        "description": "Create/Edit Pivotaltracker integration",
        "properties": {
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "restrict_to_branch": {
            "description": "Comma-separated list of branches to automatically inspect. Leave blank to include all branches.",
            "type": "string"
          },
          "token": {
            "description": "The Pivotal Tracker token.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsPumble": {
        "description": "Create/Edit Pumble integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "webhook": {
            "description": "The Pumble webhook (for example, `https://api.pumble.com/workspaces/x/...`).",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsPushover": {
        "description": "Create/Edit Pushover integration",
        "properties": {
          "api_key": {
            "description": "The application key.",
            "type": "string"
          },
          "device": {
            "description": "Leave blank for all active devices.",
            "type": "string"
          },
          "priority": {
            "description": "The priority.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "sound": {
            "description": "The sound of the notification.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "user_key": {
            "description": "The user key.",
            "type": "string"
          }
        },
        "required": [
          "api_key",
          "user_key",
          "priority"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsRedmine": {
        "description": "Create/Edit Redmine integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "new_issue_url": {
            "description": "URL of the new issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url",
          "new_issue_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsSlack": {
        "description": "Create/Edit Slack integration",
        "properties": {
          "alert_channel": {
            "description": "The name of the channel to receive alert_events notifications",
            "type": "string"
          },
          "alert_events": {
            "description": "Trigger event when a new, unique alert is recorded.",
            "type": "boolean"
          },
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "channel": {
            "description": "Default channel to use if no other channel is configured.",
            "type": "string"
          },
          "confidential_issue_channel": {
            "description": "The name of the channel to receive confidential_issues_events notifications",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_channel": {
            "description": "The name of the channel to receive confidential_note_events notifications",
            "type": "string"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "deployment_channel": {
            "description": "The name of the channel to receive deployment_events notifications",
            "type": "string"
          },
          "deployment_events": {
            "description": "Trigger event when a deployment starts or finishes.",
            "type": "boolean"
          },
          "incident_channel": {
            "description": "The name of the channel to receive incident_events notifications",
            "type": "string"
          },
          "incident_events": {
            "description": "Trigger event when an incident is created.",
            "type": "boolean"
          },
          "issue_channel": {
            "description": "The name of the channel to receive issues_events notifications",
            "type": "string"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "labels_to_be_notified": {
            "description": "Labels to send notifications for. Leave blank to receive notifications for all events.",
            "type": "string"
          },
          "labels_to_be_notified_behavior": {
            "description": "Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`.",
            "type": "string"
          },
          "merge_request_channel": {
            "description": "The name of the channel to receive merge_requests_events notifications",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_channel": {
            "description": "The name of the channel to receive note_events notifications",
            "type": "string"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_channel": {
            "description": "The name of the channel to receive pipeline_events notifications",
            "type": "string"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_channel": {
            "description": "The name of the channel to receive push_events notifications",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_channel": {
            "description": "The name of the channel to receive tag_push_events notifications",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "Slack notifications username.",
            "type": "string"
          },
          "vulnerability_channel": {
            "description": "The name of the channel to receive vulnerability_events notifications",
            "type": "string"
          },
          "vulnerability_events": {
            "type": "boolean"
          },
          "webhook": {
            "description": "Slack notifications webhook (for example, `https://hooks.slack.com/services/...`).",
            "type": "string"
          },
          "wiki_page_channel": {
            "description": "The name of the channel to receive wiki_page_events notifications",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsSlackSlashCommands": {
        "description": "Create/Edit Slack Slash Commands integration",
        "properties": {
          "token": {
            "description": "The Slack token.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsSquashTm": {
        "description": "Create/Edit Squash Tm integration",
        "properties": {
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "token": {
            "description": "Secret token.",
            "type": "string"
          },
          "url": {
            "description": "URL of the Squash TM webhook.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsTeamcity": {
        "description": "Create/Edit Teamcity integration",
        "properties": {
          "build_type": {
            "description": "The build configuration ID of the TeamCity project.",
            "type": "string"
          },
          "enable_ssl_verification": {
            "description": "Enable SSL verification. Defaults to `true` (enabled).",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "password": {
            "description": "The password of the user.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "teamcity_url": {
            "description": "TeamCity root URL (for example, `https://teamcity.example.com`).",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "A user with permissions to trigger a manual build.",
            "type": "string"
          }
        },
        "required": [
          "teamcity_url",
          "build_type",
          "username",
          "password"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsTelegram": {
        "description": "Create/Edit Telegram integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "hostname": {
            "description": "Custom hostname of the Telegram API. The default value is `https://api.telegram.org`.",
            "type": "string"
          },
          "incident_events": {
            "description": "Trigger event when an incident is created.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "room": {
            "description": "Unique identifier for the target chat or the username of the target channel (in the format `@channelusername`).",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "thread": {
            "description": "Unique identifier for the target message thread (topic in a forum supergroup).",
            "type": "string"
          },
          "token": {
            "description": "The Telegram bot token (for example, `123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11`).",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "vulnerability_events": {
            "type": "boolean"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "token",
          "room"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsUnifyCircuit": {
        "description": "Create/Edit Unify Circuit integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "webhook": {
            "description": "The Unify Circuit webhook (for example, `https://circuit.com/rest/v2/webhooks/incoming/...`).",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsWebexTeams": {
        "description": "Create/Edit Webex Teams integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "webhook": {
            "description": "The Webex Teams webhook. For example, https://api.ciscospark.com/v1/webhooks/incoming/...",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsYoutrack": {
        "description": "Create/Edit Youtrack integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdIntegrationsZentao": {
        "description": "Create/Edit Zentao integration",
        "properties": {
          "api_token": {
            "type": "string"
          },
          "api_url": {
            "description": "If different from Web URL.",
            "type": "string"
          },
          "url": {
            "description": "Base URL of the ZenTao instance.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "zentao_product_xid": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "api_token",
          "zentao_product_xid"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdInvitationsEmail": {
        "description": "Updates a group or project invitation.",
        "properties": {
          "access_level": {
            "description": "A valid access level (defaults: `30`, developer access level)",
            "enum": [
              10,
              15,
              20,
              30,
              40,
              50
            ],
            "format": "int32",
            "type": "integer"
          },
          "expires_at": {
            "description": "Date string in ISO 8601 format (`YYYY-MM-DDTHH:MM:SSZ`)",
            "format": "date-time",
            "type": "string"
          },
          "member_role_id": {
            "description": "The ID of a member role for the invited user",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdMembersUserId": {
        "description": "Updates a member of a group or project.",
        "properties": {
          "access_level": {
            "description": "A valid access level",
            "format": "int32",
            "type": "integer"
          },
          "expires_at": {
            "description": "Date string in the format YEAR-MONTH-DAY",
            "format": "date-time",
            "type": "string"
          },
          "member_role_id": {
            "description": "The ID of the Member Role to be updated",
            "format": "int32",
            "type": "integer"
          }
        },
        "required": [
          "access_level"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdMergeRequestsMergeRequestIid": {
        "description": "Update merge request",
        "properties": {
          "add_labels": {
            "description": "Comma-separated label names to add to a merge request.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "allow_collaboration": {
            "description": "Allow commits from members who can merge to the target branch.",
            "type": "boolean"
          },
          "allow_maintainer_to_push": {
            "description": "[deprecated] See allow_collaboration",
            "type": "boolean"
          },
          "approvals_before_merge": {
            "description": "Number of approvals required before this can be merged",
            "format": "int32",
            "type": "integer"
          },
          "assignee_id": {
            "description": "Assignee user ID.",
            "format": "int32",
            "type": "integer"
          },
          "assignee_ids": {
            "description": "The IDs of the users to assign the merge request to, as a comma-separated list. Set to 0 or provide an empty value to unassign all assignees.",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "description": {
            "description": "Description of the merge request. Limited to 1,048,576 characters.",
            "type": "string"
          },
          "discussion_locked": {
            "description": "Flag indicating if the merge request’s discussion is locked. If the discussion is locked only project members can add, edit or resolve comments.",
            "type": "boolean"
          },
          "labels": {
            "description": "Comma-separated label names for a merge request. Set to an empty string to unassign all labels.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "merge_after": {
            "description": "Date after which the merge request can be merged.",
            "type": "string"
          },
          "milestone_id": {
            "description": "The global ID of a milestone to assign the merge reques to.",
            "format": "int32",
            "type": "integer"
          },
          "remove_labels": {
            "description": "Comma-separated label names to remove from a merge request.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "remove_source_branch": {
            "description": "Flag indicating if a merge request should remove the source branch when merging.",
            "type": "boolean"
          },
          "reviewer_ids": {
            "description": "The IDs of the users to review the merge request, as a comma-separated list. Set to 0 or provide an empty value to unassign all reviewers.",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "squash": {
            "description": "Squash commits into a single commit when merging.",
            "type": "boolean"
          },
          "state_event": {
            "description": "New state (close/reopen).",
            "enum": [
              "close",
              "reopen"
            ],
            "type": "string"
          },
          "target_branch": {
            "description": "The target branch.",
            "type": "string"
          },
          "title": {
            "description": "The title of the merge request.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotesDraftNoteId": {
        "description": "Modify an existing draft note",
        "properties": {
          "note": {
            "description": "The content of a note.",
            "type": "string"
          },
          "position": {
            "properties": {
              "base_sha": {
                "description": "Base commit SHA in the source branch",
                "type": "string"
              },
              "head_sha": {
                "description": "SHA referencing HEAD of this merge request",
                "type": "string"
              },
              "height": {
                "description": "Height of the image",
                "format": "int32",
                "type": "integer"
              },
              "line_range": {
                "description": "Multi-line start and end",
                "properties": {
                  "end": {
                    "properties": {
                      "line_code": {
                        "description": "End line code for multi-line note",
                        "type": "string"
                      },
                      "new_line": {
                        "description": "End new_line line number",
                        "type": "string"
                      },
                      "old_line": {
                        "description": "End old_line line number",
                        "type": "string"
                      },
                      "type": {
                        "description": "End line type for multi-line note",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "start": {
                    "properties": {
                      "line_code": {
                        "description": "Start line code for multi-line note",
                        "type": "string"
                      },
                      "new_line": {
                        "description": "Start new_line line number",
                        "type": "string"
                      },
                      "old_line": {
                        "description": "Start old_line line number",
                        "type": "string"
                      },
                      "type": {
                        "description": "Start line type for multi-line note",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "new_line": {
                "description": "Line number after change",
                "format": "int32",
                "type": "integer"
              },
              "new_path": {
                "description": "File path after change",
                "type": "string"
              },
              "old_line": {
                "description": "Line number before change",
                "format": "int32",
                "type": "integer"
              },
              "old_path": {
                "description": "File path before change",
                "type": "string"
              },
              "position_type": {
                "description": "Type of the position reference",
                "enum": [
                  "text",
                  "image",
                  "file"
                ],
                "type": "string"
              },
              "start_sha": {
                "description": "SHA referencing commit in target branch",
                "type": "string"
              },
              "width": {
                "description": "Width of the image",
                "format": "int32",
                "type": "integer"
              },
              "x": {
                "description": "X coordinate in the image",
                "format": "int32",
                "type": "integer"
              },
              "y": {
                "description": "Y coordinate in the image",
                "format": "int32",
                "type": "integer"
              }
            },
            "required": [
              "base_sha",
              "start_sha",
              "head_sha",
              "position_type"
            ],
            "type": "object"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdMergeRequestsMergeRequestIidMerge": {
        "description": "Merge a merge request",
        "properties": {
          "merge_commit_message": {
            "description": "Custom merge commit message.",
            "type": "string"
          },
          "merge_when_pipeline_succeeds": {
            "description": "If `true`, the merge request is merged when the pipeline succeeds.",
            "type": "boolean"
          },
          "sha": {
            "description": "If present, then this SHA must match the HEAD of the source branch, otherwise the merge fails.",
            "type": "string"
          },
          "should_remove_source_branch": {
            "description": "If `true`, removes the source branch.",
            "type": "boolean"
          },
          "skip_merge_train": {
            "description": "If `true` skips train restart when merging immediately in a merge train configured project.",
            "type": "boolean"
          },
          "squash": {
            "description": "If `true`, the commits are squashed into a single commit on merge.",
            "type": "boolean"
          },
          "squash_commit_message": {
            "description": "Custom squash commit message.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdMergeRequestsMergeRequestIidRebase": {
        "description": "Rebase a merge request",
        "properties": {
          "skip_ci": {
            "description": "Set to true to skip creating a CI pipeline.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionExportFileName": {
        "description": "Upload recipe package files",
        "properties": {
          "file": {
            "description": "The package file to be published (generated by Multipart middleware)",
            "type": "file"
          }
        },
        "required": [
          "file"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionPackageConanPackageReferencePackageRevisionFileName": {
        "description": "Upload package files",
        "properties": {
          "file": {
            "description": "The package file to be published (generated by Multipart middleware)",
            "type": "file"
          }
        },
        "required": [
          "file"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdPackagesDebianFileName": {
        "description": "Upload Debian package",
        "properties": {
          "component": {
            "description": "The Debian Component",
            "type": "string"
          },
          "distribution": {
            "description": "The Debian Codename or Suite",
            "type": "string"
          },
          "file": {
            "description": "The package file to be published (generated by Multipart middleware)",
            "type": "file"
          }
        },
        "required": [
          "file",
          "component"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdPackagesDebianFileNameAuthorize": {
        "description": "Authorize Debian package upload",
        "properties": {
          "component": {
            "description": "The Debian Component",
            "type": "string"
          },
          "distribution": {
            "description": "The Debian Codename or Suite",
            "type": "string"
          }
        },
        "required": [
          "component"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdPackagesGenericPackageName*packageVersion(*path)FileName": {
        "description": "Upload package file",
        "properties": {
          "file": {
            "description": "The package file to be published (generated by Multipart middleware)",
            "type": "file"
          },
          "package_version": {
            "description": "Package version",
            "type": "string"
          },
          "path": {
            "description": "File directory path",
            "type": "string"
          },
          "select": {
            "enum": [
              "package_file"
            ],
            "type": "string"
          },
          "status": {
            "description": "Package status",
            "enum": [
              "default",
              "hidden"
            ],
            "type": "string"
          }
        },
        "required": [
          "package_version",
          "file"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdPackagesGenericPackageName*packageVersion(*path)FileNameAuthorize": {
        "description": "Workhorse authorize generic package file",
        "properties": {
          "package_version": {
            "description": "Package version",
            "type": "string"
          },
          "path": {
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "description": "Package status",
            "enum": [
              "default",
              "hidden"
            ],
            "type": "string"
          }
        },
        "required": [
          "package_version",
          "path"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdPackagesMaven*pathFileName": {
        "description": "Upload the maven package file",
        "properties": {
          "file": {
            "description": "The package file to be published (generated by Multipart middleware)",
            "type": "file"
          },
          "path": {
            "description": "Package path",
            "example": "foo/bar/mypkg/1.0-SNAPSHOT",
            "type": "string"
          }
        },
        "required": [
          "path",
          "file"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdPackagesMaven*pathFileNameAuthorize": {
        "description": "Workhorse authorize the maven package file upload",
        "properties": {
          "path": {
            "description": "Package path",
            "example": "foo/bar/mypkg/1.0-SNAPSHOT",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdPackagesMlModelsModelVersionIdFiles(*path)FileName": {
        "description": "Workhorse upload model package file",
        "properties": {
          "file": {
            "description": "The package file to be published (generated by Multipart middleware)",
            "type": "file"
          },
          "path": {
            "description": "File directory path",
            "type": "string"
          },
          "status": {
            "description": "Package status",
            "enum": [
              "default",
              "hidden"
            ],
            "type": "string"
          }
        },
        "required": [
          "file"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdPackagesMlModelsModelVersionIdFiles(*path)FileNameAuthorize": {
        "description": "Workhorse authorize model package file",
        "properties": {
          "path": {
            "description": "File directory path",
            "type": "string"
          },
          "status": {
            "description": "Package status",
            "enum": [
              "default",
              "hidden"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdPackagesNpmPackage*packageNameDistTagsTag": {
        "description": "Create or Update the given tag for the given NPM package and version",
        "properties": {
          "package_name": {
            "description": "Package name",
            "type": "string"
          }
        },
        "required": [
          "package_name"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdPackagesNpmPackageName": {
        "description": "Create or deprecate NPM package",
        "properties": {
          "versions": {
            "description": "Package version info",
            "type": "object"
          }
        },
        "required": [
          "versions"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdPackagesNuget": {
        "description": "The NuGet V3 Feed Package Publish endpoint",
        "properties": {
          "package": {
            "description": "The package file to be published (generated by Multipart middleware)",
            "type": "file"
          }
        },
        "required": [
          "package"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdPackagesNugetSymbolpackage": {
        "description": "The NuGet Symbol Package Publish endpoint",
        "properties": {
          "package": {
            "description": "The package file to be published (generated by Multipart middleware)",
            "type": "file"
          }
        },
        "required": [
          "package"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdPackagesNugetV2": {
        "description": "The NuGet V2 Feed Package Publish endpoint",
        "properties": {
          "package": {
            "description": "The package file to be published (generated by Multipart middleware)",
            "type": "file"
          }
        },
        "required": [
          "package"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdPackagesTerraformModulesModuleNameModuleSystem*moduleVersionFileAuthorize": {
        "description": "Workhorse authorize Terraform Module package file",
        "properties": {
          "module_version": {
            "description": "Module version",
            "type": "string"
          }
        },
        "required": [
          "module_version"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdPagesDomainsDomain": {
        "description": "Updates a pages domain",
        "properties": {
          "auto_ssl_enabled": {
            "description": "Enables automatic generation of SSL certificates issued by Let's Encrypt for custom domains.",
            "type": "boolean"
          },
          "certificate": {
            "description": "The certificate",
            "type": "file"
          },
          "key": {
            "description": "The key",
            "type": "file"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdPipelineSchedulesPipelineScheduleId": {
        "description": "Edit a pipeline schedule",
        "properties": {
          "active": {
            "description": "The activation of pipeline schedule",
            "example": true,
            "type": "boolean"
          },
          "cron": {
            "description": "The cron",
            "example": "* * * * *",
            "type": "string"
          },
          "cron_timezone": {
            "description": "The timezone",
            "example": "Asia/Tokyo",
            "type": "string"
          },
          "description": {
            "description": "The description of pipeline schedule",
            "example": "Test schedule pipeline",
            "type": "string"
          },
          "ref": {
            "description": "The branch/tag name will be triggered",
            "example": "develop",
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdVariablesKey": {
        "description": "Edit a pipeline schedule variable",
        "properties": {
          "value": {
            "description": "The value of the variable",
            "example": "new value",
            "type": "string"
          },
          "variable_type": {
            "default": "env_var",
            "description": "The type of variable, must be one of env_var or file",
            "enum": [
              "env_var",
              "file"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdPipelinesPipelineIdMetadata": {
        "description": "Updates pipeline metadata",
        "properties": {
          "name": {
            "description": "The name of the pipeline",
            "example": "Deployment to production",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdReleasesTagName": {
        "description": "Update a release",
        "properties": {
          "description": {
            "description": "The description of the release. You can use Markdown",
            "type": "string"
          },
          "milestone_ids": {
            "description": "The ID of each milestone the release is associated with. GitLab Premium customers can specify group milestones. Cannot be combined with `milestones` parameter. To remove all milestones from the release, specify `[]`",
            "type": "string"
          },
          "milestones": {
            "description": "The title of each milestone to associate with the release. GitLab Premium customers can specify group milestones. Cannot be combined with `milestone_ids` parameter. To remove all milestones from the release, specify `[]`",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "The release name",
            "type": "string"
          },
          "released_at": {
            "description": "The date when the release is/was ready. Expected in ISO 8601 format (`2019-03-15T08:00:00Z`)",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdReleasesTagNameAssetsLinksLinkId": {
        "description": "Update a release link",
        "properties": {
          "direct_asset_path": {
            "description": "Optional path for a direct asset link",
            "type": "string"
          },
          "filepath": {
            "description": "Deprecated: optional path for a direct asset link",
            "type": "string"
          },
          "link_type": {
            "default": "other",
            "description": "The type of the link: `other`, `runbook`, `image`, or `package`. Defaults to `other`",
            "enum": [
              "other",
              "runbook",
              "image",
              "package"
            ],
            "type": "string"
          },
          "name": {
            "description": "The name of the link",
            "type": "string"
          },
          "url": {
            "description": "The URL of the link",
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdRemoteMirrorsMirrorId": {
        "description": "Update the attributes of a single remote mirror",
        "properties": {
          "auth_method": {
            "description": "Determines the mirror authentication method",
            "type": "string"
          },
          "enabled": {
            "description": "Determines if the mirror is enabled",
            "example": true,
            "type": "boolean"
          },
          "keep_divergent_refs": {
            "description": "Determines if divergent refs are kept on the target",
            "type": "boolean"
          },
          "mirror_branch_regex": {
            "description": "Determines if only matched branches are mirrored",
            "type": "string"
          },
          "only_protected_branches": {
            "description": "Determines if only protected branches are mirrored",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdRepositoryBranchesBranchProtect": {
        "description": "Protect a single branch",
        "properties": {
          "developers_can_merge": {
            "description": "Flag if developers can merge to that branch",
            "type": "boolean"
          },
          "developers_can_push": {
            "description": "Flag if developers can push to that branch",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdRepositoryFilesFilePath": {
        "description": "Update existing file in repository",
        "properties": {
          "author_email": {
            "description": "The email of the author",
            "example": "johndoe@example.com",
            "type": "string"
          },
          "author_name": {
            "description": "The name of the author",
            "example": "John Doe",
            "type": "string"
          },
          "branch": {
            "description": "Name of the branch to commit into. To create a new branch, also provide `start_branch`.",
            "example": "main",
            "type": "string"
          },
          "commit_message": {
            "description": "Commit message",
            "example": "Initial commit",
            "type": "string"
          },
          "content": {
            "description": "File content",
            "example": "file content",
            "type": "string"
          },
          "encoding": {
            "default": "text",
            "description": "File encoding",
            "enum": [
              "base64",
              "text"
            ],
            "type": "string"
          },
          "execute_filemode": {
            "description": "Enable / Disable the executable flag on the file path",
            "type": "boolean"
          },
          "last_commit_id": {
            "description": "Last known commit id for this file",
            "example": "2695effb5807a22ff3d138d593fd856244e155e7",
            "type": "string"
          },
          "start_branch": {
            "description": "Name of the branch to start the new commit from",
            "example": "main",
            "type": "string"
          }
        },
        "required": [
          "branch",
          "commit_message",
          "content"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdRepositorySubmodulesSubmodule": {
        "description": "Update existing submodule reference in repository",
        "properties": {
          "branch": {
            "description": "Name of the branch to commit into.",
            "example": "main",
            "type": "string"
          },
          "commit_message": {
            "description": "Commit message. If no message is provided a default one will be set.",
            "example": "Commit message",
            "type": "string"
          },
          "commit_sha": {
            "description": "Commit sha to update the submodule to.",
            "example": "ed899a2f4b50b4370feeea94676502b42383c746",
            "type": "string"
          }
        },
        "required": [
          "commit_sha",
          "branch"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdResourceGroupsKey": {
        "description": "Edit an existing resource group",
        "properties": {
          "process_mode": {
            "description": "The process mode of the resource group",
            "enum": [
              "unordered",
              "oldest_first",
              "newest_first"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdServicesAppleAppStore": {
        "description": "Create/Edit Apple App Store integration",
        "properties": {
          "app_store_issuer_id": {
            "description": "Apple App Store Connect issuer ID.",
            "type": "string"
          },
          "app_store_key_id": {
            "description": "Apple App Store Connect key ID.",
            "type": "string"
          },
          "app_store_private_key": {
            "description": "Apple App Store Connect private key.",
            "type": "string"
          },
          "app_store_private_key_file_name": {
            "description": "Apple App Store Connect private key file name.",
            "type": "string"
          },
          "app_store_protected_refs": {
            "description": "Set variables on protected branches and tags only.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "app_store_issuer_id",
          "app_store_key_id",
          "app_store_private_key_file_name",
          "app_store_private_key"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesAsana": {
        "description": "Create/Edit Asana integration",
        "properties": {
          "api_key": {
            "description": "User API token. The user must have access to the task. All comments are attributed to this user.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "restrict_to_branch": {
            "description": "Comma-separated list of branches to be automatically inspected. Leave blank to include all branches.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "api_key"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesAssembla": {
        "description": "Create/Edit Assembla integration",
        "properties": {
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "subdomain": {
            "description": "The subdomain setting.",
            "type": "string"
          },
          "token": {
            "description": "The authentication token.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesBamboo": {
        "description": "Create/Edit Bamboo integration",
        "properties": {
          "bamboo_url": {
            "description": "Bamboo root URL (for example, `https://bamboo.example.com`).",
            "type": "string"
          },
          "build_key": {
            "description": "Bamboo build plan key (for example, `KEY`).",
            "type": "string"
          },
          "enable_ssl_verification": {
            "description": "Enable SSL verification. Defaults to `true` (enabled).",
            "type": "boolean"
          },
          "password": {
            "description": "Password of the user.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "User with API access to the Bamboo server.",
            "type": "string"
          }
        },
        "required": [
          "bamboo_url",
          "build_key",
          "username",
          "password"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesBugzilla": {
        "description": "Create/Edit Bugzilla integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "new_issue_url": {
            "description": "URL of the new issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url",
          "new_issue_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesBuildkite": {
        "description": "Create/Edit Buildkite integration",
        "properties": {
          "enable_ssl_verification": {
            "description": "DEPRECATED: This parameter has no effect because SSL verification is always enabled.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "project_url": {
            "description": "Pipeline URL (for example, `https://buildkite.com/example/pipeline`).",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "token": {
            "description": "Token you get after you create a Buildkite pipeline with a GitLab repository.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "token"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesCampfire": {
        "description": "Create/Edit Campfire integration",
        "properties": {
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "room": {
            "description": "ID portion of the Campfire room URL.",
            "type": "string"
          },
          "subdomain": {
            "description": "`.campfirenow.com` subdomain when you're signed in.",
            "type": "string"
          },
          "token": {
            "description": "API authentication token from Campfire. To get the token, sign in to Campfire and select **My info**.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesClickup": {
        "description": "Create/Edit Clickup integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesConfluence": {
        "description": "Create/Edit Confluence integration",
        "properties": {
          "confluence_url": {
            "description": "URL of the Confluence Workspace hosted on `atlassian.net`.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "confluence_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesCustomIssueTracker": {
        "description": "Create/Edit Custom Issue Tracker integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "new_issue_url": {
            "description": "URL of the new issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url",
          "new_issue_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesDatadog": {
        "description": "Create/Edit Datadog integration",
        "properties": {
          "api_key": {
            "description": "<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.datadoghq.com/account_management/api-app-keys/\">API key</a> used for authentication with Datadog.",
            "type": "string"
          },
          "api_url": {
            "description": "Full URL of your Datadog site. Only required if you do not use a standard Datadog site.",
            "type": "string"
          },
          "archive_trace_events": {
            "description": "When enabled, job logs are collected by Datadog and displayed along with pipeline execution traces.",
            "type": "boolean"
          },
          "build_events": {
            "description": "Trigger event when a build is created.",
            "type": "boolean"
          },
          "datadog_ci_visibility": {
            "description": "Enable CI Visibility",
            "type": "boolean"
          },
          "datadog_env": {
            "description": "For self-managed deployments, `env` tag for all the data sent to Datadog.",
            "type": "string"
          },
          "datadog_service": {
            "description": "Tag all pipeline data from this GitLab instance in Datadog. Can be used when managing several self-managed deployments.",
            "type": "string"
          },
          "datadog_site": {
            "description": "Datadog site to send data to. Learn more about Datadog sites in the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.datadoghq.com/getting_started/site/\">documentation</a>.",
            "type": "string"
          },
          "datadog_tags": {
            "description": "Custom tags in Datadog. Specify one tag per line in the format `key:value\\nkey2:value2`.",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "project_events": {
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "subgroup_events": {
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "api_key"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesDiffblueCover": {
        "description": "Create/Edit Diffblue Cover integration",
        "properties": {
          "diffblue_access_token_name": {
            "description": "Access token name used by Diffblue Cover in pipelines.",
            "type": "string"
          },
          "diffblue_access_token_secret": {
            "description": "Access token secret used by Diffblue Cover in pipelines.",
            "type": "string"
          },
          "diffblue_license_key": {
            "description": "Diffblue Cover license key.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "diffblue_license_key",
          "diffblue_access_token_name",
          "diffblue_access_token_secret"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesDiscord": {
        "description": "Create/Edit Discord integration",
        "properties": {
          "alert_channel": {
            "description": "The name of the channel to receive alert_events notifications",
            "type": "string"
          },
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issue_channel": {
            "description": "The name of the channel to receive confidential_issues_events notifications",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_channel": {
            "description": "The name of the channel to receive confidential_note_events notifications",
            "type": "string"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "deployment_channel": {
            "description": "The name of the channel to receive deployment_events notifications",
            "type": "string"
          },
          "deployment_events": {
            "description": "Trigger event when a deployment starts or finishes.",
            "type": "boolean"
          },
          "incident_channel": {
            "description": "The name of the channel to receive incident_events notifications",
            "type": "string"
          },
          "issue_channel": {
            "description": "The name of the channel to receive issues_events notifications",
            "type": "string"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_request_channel": {
            "description": "The name of the channel to receive merge_requests_events notifications",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_channel": {
            "description": "The name of the channel to receive note_events notifications",
            "type": "string"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_channel": {
            "description": "The name of the channel to receive pipeline_events notifications",
            "type": "string"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_channel": {
            "description": "The name of the channel to receive push_events notifications",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_channel": {
            "description": "The name of the channel to receive tag_push_events notifications",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "vulnerability_channel": {
            "description": "The name of the channel to receive vulnerability_events notifications",
            "type": "string"
          },
          "webhook": {
            "description": "Discord webhook (for example, `https://discord.com/api/webhooks/…`).",
            "type": "string"
          },
          "wiki_page_channel": {
            "description": "The name of the channel to receive wiki_page_events notifications",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesDroneCi": {
        "description": "Create/Edit Drone Ci integration",
        "properties": {
          "drone_url": {
            "description": "Drone CI URL (for example, `http://drone.example.com`).",
            "type": "string"
          },
          "enable_ssl_verification": {
            "description": "Enable SSL verification. Defaults to `true` (enabled).",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "token": {
            "description": "Drone CI token.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "drone_url",
          "token"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesEmailsOnPush": {
        "description": "Create/Edit Emails On Push integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "disable_diffs": {
            "description": "Disable code diffs",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "recipients": {
            "description": "Emails separated by whitespace.",
            "type": "string"
          },
          "send_from_committer_email": {
            "description": "Send from committer",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "recipients"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesEwm": {
        "description": "Create/Edit Ewm integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "new_issue_url": {
            "description": "URL of the new issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url",
          "new_issue_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesExternalWiki": {
        "description": "Create/Edit External Wiki integration",
        "properties": {
          "external_wiki_url": {
            "description": "URL of the external wiki.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "external_wiki_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesGitGuardian": {
        "description": "Create/Edit Git Guardian integration",
        "properties": {
          "token": {
            "description": "Personal access token to authenticate calls to the GitGuardian API.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesGithub": {
        "description": "Create/Edit Github integration",
        "properties": {
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "repository_url": {
            "description": "GitHub repository URL.",
            "type": "string"
          },
          "static_context": {
            "description": "Append the hostname of your GitLab instance to the status check name.",
            "type": "boolean"
          },
          "token": {
            "description": "GitHub API token with `repo:status` OAuth scope.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token",
          "repository_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesGitlabSlackApplication": {
        "description": "Create/Edit Gitlab Slack Application integration",
        "properties": {
          "alert_channel": {
            "description": "The name of the channel to receive alert_events notifications",
            "type": "string"
          },
          "alert_events": {
            "description": "Trigger event when a new, unique alert is recorded.",
            "type": "boolean"
          },
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "channel": {
            "description": "Default channel to use if no other channel is configured.",
            "type": "string"
          },
          "confidential_issue_channel": {
            "description": "The name of the channel to receive confidential_issues_events notifications",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_channel": {
            "description": "The name of the channel to receive confidential_note_events notifications",
            "type": "string"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "deployment_channel": {
            "description": "The name of the channel to receive deployment_events notifications",
            "type": "string"
          },
          "deployment_events": {
            "description": "Trigger event when a deployment starts or finishes.",
            "type": "boolean"
          },
          "incident_channel": {
            "description": "The name of the channel to receive incident_events notifications",
            "type": "string"
          },
          "incident_events": {
            "description": "Trigger event when an incident is created.",
            "type": "boolean"
          },
          "issue_channel": {
            "description": "The name of the channel to receive issues_events notifications",
            "type": "string"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "labels_to_be_notified": {
            "description": "Labels to send notifications for. Leave blank to receive notifications for all events.",
            "type": "string"
          },
          "labels_to_be_notified_behavior": {
            "description": "Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`.",
            "type": "string"
          },
          "merge_request_channel": {
            "description": "The name of the channel to receive merge_requests_events notifications",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_channel": {
            "description": "The name of the channel to receive note_events notifications",
            "type": "string"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_channel": {
            "description": "The name of the channel to receive pipeline_events notifications",
            "type": "string"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_channel": {
            "description": "The name of the channel to receive push_events notifications",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_channel": {
            "description": "The name of the channel to receive tag_push_events notifications",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "vulnerability_channel": {
            "description": "The name of the channel to receive vulnerability_events notifications",
            "type": "string"
          },
          "vulnerability_events": {
            "type": "boolean"
          },
          "wiki_page_channel": {
            "description": "The name of the channel to receive wiki_page_events notifications",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdServicesGoogleCloudPlatformArtifactRegistry": {
        "description": "Create/Edit Google Cloud Platform Artifact Registry integration",
        "properties": {
          "artifact_registry_location": {
            "description": "Location of the Artifact Registry repository.",
            "type": "string"
          },
          "artifact_registry_project_id": {
            "description": "ID of the Google Cloud project.",
            "type": "string"
          },
          "artifact_registry_repositories": {
            "description": "Repository of Artifact Registry.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "artifact_registry_project_id",
          "artifact_registry_repositories",
          "artifact_registry_location"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesGoogleCloudPlatformWorkloadIdentityFederation": {
        "description": "Create/Edit Google Cloud Platform Workload Identity Federation integration",
        "properties": {
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "workload_identity_federation_project_id": {
            "description": "Google Cloud project ID for the Workload Identity Federation.",
            "type": "string"
          },
          "workload_identity_federation_project_number": {
            "description": "Google Cloud project number for the Workload Identity Federation.",
            "type": "string"
          },
          "workload_identity_pool_id": {
            "description": "ID of the Workload Identity Pool.",
            "type": "string"
          },
          "workload_identity_pool_provider_id": {
            "description": "ID of the Workload Identity Pool provider.",
            "type": "string"
          }
        },
        "required": [
          "workload_identity_federation_project_id",
          "workload_identity_federation_project_number",
          "workload_identity_pool_id",
          "workload_identity_pool_provider_id"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesGooglePlay": {
        "description": "Create/Edit Google Play integration",
        "properties": {
          "google_play_protected_refs": {
            "description": "Set variables on protected branches and tags only.",
            "type": "boolean"
          },
          "package_name": {
            "description": "Package name of the app in Google Play.",
            "type": "string"
          },
          "service_account_key": {
            "description": "Google Play service account key.",
            "type": "string"
          },
          "service_account_key_file_name": {
            "description": "File name of the Google Play service account key.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "package_name",
          "service_account_key_file_name",
          "service_account_key"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesHangoutsChat": {
        "description": "Create/Edit Hangouts Chat integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "webhook": {
            "description": "The Hangouts Chat webhook (for example, `https://chat.googleapis.com/v1/spaces...`).",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesHarbor": {
        "description": "Create/Edit Harbor integration",
        "properties": {
          "password": {
            "description": "The password of the user.",
            "type": "string"
          },
          "project_name": {
            "description": "The name of the project in the Harbor instance. For example, `testproject`.",
            "type": "string"
          },
          "url": {
            "description": "The base URL to the Harbor instance linked to the GitLab project. For example, `https://demo.goharbor.io`.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "The username created in the Harbor interface.",
            "type": "string"
          }
        },
        "required": [
          "url",
          "project_name",
          "username",
          "password"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesIrker": {
        "description": "Create/Edit Irker integration",
        "properties": {
          "colorize_messages": {
            "description": "Colorize messages",
            "type": "boolean"
          },
          "default_irc_uri": {
            "description": "URI to add before each recipient. The default value is `irc://irc.network.net:6697/`.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "recipients": {
            "description": "Comma-separated list of channels or email addresses.",
            "type": "string"
          },
          "server_host": {
            "description": "irker daemon hostname. The default value is `localhost`.",
            "type": "string"
          },
          "server_port": {
            "description": "irker daemon port. The default value is `6659`.",
            "format": "int32",
            "type": "integer"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "recipients"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesJenkins": {
        "description": "Create/Edit Jenkins integration",
        "properties": {
          "enable_ssl_verification": {
            "description": "Enable SSL verification. Defaults to `true` (enabled).",
            "type": "boolean"
          },
          "jenkins_url": {
            "description": "URL of the Jenkins server.",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "password": {
            "description": "Password of the Jenkins server.",
            "type": "string"
          },
          "project_name": {
            "description": "Name of the Jenkins project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "Username of the Jenkins server.",
            "type": "string"
          }
        },
        "required": [
          "jenkins_url",
          "project_name"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesJira": {
        "description": "Create/Edit Jira integration",
        "properties": {
          "api_url": {
            "description": "The base URL to the Jira instance API. Web URL value is used if not set (for example, `https://jira-api.example.com`).",
            "type": "string"
          },
          "commit_events": {
            "description": "Trigger event when a commit is created or updated.",
            "type": "boolean"
          },
          "issues_enabled": {
            "description": "Enable viewing Jira issues in GitLab.",
            "type": "string"
          },
          "jira_auth_type": {
            "description": "The authentication method to use with Jira. Use `0` for Basic Authentication, and `1` for Jira personal access token. Defaults to `0`.",
            "format": "int32",
            "type": "integer"
          },
          "jira_issue_prefix": {
            "description": "Prefix to match Jira issue keys.",
            "type": "string"
          },
          "jira_issue_regex": {
            "description": "Regular expression to match Jira issue keys.",
            "type": "string"
          },
          "jira_issue_transition_id": {
            "description": "The ID of one or more transitions for [custom issue transitions](../integration/jira/issues.md#custom-issue-transitions).Ignored when `jira_issue_transition_automatic` is enabled. Defaults to a blank string,which disables custom transitions.",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "password": {
            "description": "The Jira API token, password, or personal access token to use with Jira. When using Basic Authentication (`jira_auth_type` is `0`), use an API token for Jira Cloud, and a password for Jira Data Center or Jira Server. For a Jira personal access token (`jira_auth_type` is `1`), use the personal access token.",
            "type": "string"
          },
          "project_keys": {
            "description": "Keys of Jira projects. When `issues_enabled` is `true`, this setting specifies which Jira projects to view issues from in GitLab.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "url": {
            "description": "The URL to the Jira project which is being linked to this GitLab project (for example, `https://jira.example.com`).",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "The email or username to use with Jira. Use an email for Jira Cloud, and a username for Jira Data Center and Jira Server. Required when using Basic Authentication (`jira_auth_type` is `0`).",
            "type": "string"
          }
        },
        "required": [
          "url",
          "password"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesJiraCloudApp": {
        "description": "Create/Edit Jira Cloud App integration",
        "properties": {
          "jira_cloud_app_deployment_gating_environments": {
            "description": "Enter the environment (production,staging,testing,development) where you want to enable deployment gating. Use comma (,) to separate multiple environments.",
            "type": "string"
          },
          "jira_cloud_app_enable_deployment_gating": {
            "description": "Enable to approve or reject blocked GitLab deployments from Jira Service Management.",
            "type": "boolean"
          },
          "jira_cloud_app_service_ids": {
            "description": "Copy and paste your JSM Service ID here. Use comma (,) to separate multiple IDs.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdServicesMatrix": {
        "description": "Create/Edit Matrix integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "hostname": {
            "description": "Custom hostname of the Matrix server. The default value is `https://matrix-client.matrix.org`.",
            "type": "string"
          },
          "incident_events": {
            "description": "Trigger event when an incident is created.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "room": {
            "description": "Unique identifier for the target room (in the format `!qPKKM111FFKKsfoCVy:matrix.org`).",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "token": {
            "description": "The Matrix access token (for example, `syt-zyx57W2v1u123ew11`).",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "vulnerability_events": {
            "type": "boolean"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "token",
          "room"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesMattermost": {
        "description": "Create/Edit Mattermost integration",
        "properties": {
          "alert_channel": {
            "description": "The name of the channel to receive alert_events notifications",
            "type": "string"
          },
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "channel": {
            "description": "Default channel to use if no other channel is configured.",
            "type": "string"
          },
          "confidential_issue_channel": {
            "description": "The name of the channel to receive confidential_issues_events notifications",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_channel": {
            "description": "The name of the channel to receive confidential_note_events notifications",
            "type": "string"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "deployment_channel": {
            "description": "The name of the channel to receive deployment_events notifications",
            "type": "string"
          },
          "deployment_events": {
            "description": "Trigger event when a deployment starts or finishes.",
            "type": "boolean"
          },
          "incident_channel": {
            "description": "The name of the channel to receive incident_events notifications",
            "type": "string"
          },
          "incident_events": {
            "description": "Trigger event when an incident is created.",
            "type": "boolean"
          },
          "issue_channel": {
            "description": "The name of the channel to receive issues_events notifications",
            "type": "string"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "labels_to_be_notified": {
            "description": "Labels to send notifications for. Leave blank to receive notifications for all events.",
            "type": "string"
          },
          "labels_to_be_notified_behavior": {
            "description": "Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`.",
            "type": "string"
          },
          "merge_request_channel": {
            "description": "The name of the channel to receive merge_requests_events notifications",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_channel": {
            "description": "The name of the channel to receive note_events notifications",
            "type": "string"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_channel": {
            "description": "The name of the channel to receive pipeline_events notifications",
            "type": "string"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_channel": {
            "description": "The name of the channel to receive push_events notifications",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_channel": {
            "description": "The name of the channel to receive tag_push_events notifications",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "Mattermost notifications username.",
            "type": "string"
          },
          "vulnerability_channel": {
            "description": "The name of the channel to receive vulnerability_events notifications",
            "type": "string"
          },
          "vulnerability_events": {
            "type": "boolean"
          },
          "webhook": {
            "description": "Mattermost notifications webhook (for example, `http://mattermost.example.com/hooks/...`).",
            "type": "string"
          },
          "wiki_page_channel": {
            "description": "The name of the channel to receive wiki_page_events notifications",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesMattermostSlashCommands": {
        "description": "Create/Edit Mattermost Slash Commands integration",
        "properties": {
          "token": {
            "description": "The Mattermost token.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesMicrosoftTeams": {
        "description": "Create/Edit Microsoft Teams integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "webhook": {
            "description": "The Microsoft Teams webhook (for example, `https://outlook.office.com/webhook/...`).",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesMockCi": {
        "description": "Create/Edit Mock Ci integration",
        "properties": {
          "enable_ssl_verification": {
            "description": "Enable SSL verification. Defaults to `true` (enabled).",
            "type": "boolean"
          },
          "mock_service_url": {
            "description": "URL of the Mock CI integration.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "mock_service_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesMockMonitoring": {
        "description": "Create/Edit Mock Monitoring integration",
        "properties": {
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdServicesPackagist": {
        "description": "Create/Edit Packagist integration",
        "properties": {
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "server": {
            "description": "URL of the Packagist server. The default value is `https://packagist.org`.",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "token": {
            "description": "API token of the Packagist server.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "Username of a Packagist account.",
            "type": "string"
          }
        },
        "required": [
          "username",
          "token"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesPhorge": {
        "description": "Create/Edit Phorge integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesPipelinesEmail": {
        "description": "Create/Edit Pipelines Email integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "notify_only_default_branch": {
            "description": "Send notifications for the default branch.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "recipients": {
            "description": "Comma-separated list of recipient email addresses.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "recipients"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesPivotaltracker": {
        "description": "Create/Edit Pivotaltracker integration",
        "properties": {
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "restrict_to_branch": {
            "description": "Comma-separated list of branches to automatically inspect. Leave blank to include all branches.",
            "type": "string"
          },
          "token": {
            "description": "The Pivotal Tracker token.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesPumble": {
        "description": "Create/Edit Pumble integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "webhook": {
            "description": "The Pumble webhook (for example, `https://api.pumble.com/workspaces/x/...`).",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesPushover": {
        "description": "Create/Edit Pushover integration",
        "properties": {
          "api_key": {
            "description": "The application key.",
            "type": "string"
          },
          "device": {
            "description": "Leave blank for all active devices.",
            "type": "string"
          },
          "priority": {
            "description": "The priority.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "sound": {
            "description": "The sound of the notification.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "user_key": {
            "description": "The user key.",
            "type": "string"
          }
        },
        "required": [
          "api_key",
          "user_key",
          "priority"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesRedmine": {
        "description": "Create/Edit Redmine integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "new_issue_url": {
            "description": "URL of the new issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url",
          "new_issue_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesSlack": {
        "description": "Create/Edit Slack integration",
        "properties": {
          "alert_channel": {
            "description": "The name of the channel to receive alert_events notifications",
            "type": "string"
          },
          "alert_events": {
            "description": "Trigger event when a new, unique alert is recorded.",
            "type": "boolean"
          },
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "channel": {
            "description": "Default channel to use if no other channel is configured.",
            "type": "string"
          },
          "confidential_issue_channel": {
            "description": "The name of the channel to receive confidential_issues_events notifications",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_channel": {
            "description": "The name of the channel to receive confidential_note_events notifications",
            "type": "string"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "deployment_channel": {
            "description": "The name of the channel to receive deployment_events notifications",
            "type": "string"
          },
          "deployment_events": {
            "description": "Trigger event when a deployment starts or finishes.",
            "type": "boolean"
          },
          "incident_channel": {
            "description": "The name of the channel to receive incident_events notifications",
            "type": "string"
          },
          "incident_events": {
            "description": "Trigger event when an incident is created.",
            "type": "boolean"
          },
          "issue_channel": {
            "description": "The name of the channel to receive issues_events notifications",
            "type": "string"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "labels_to_be_notified": {
            "description": "Labels to send notifications for. Leave blank to receive notifications for all events.",
            "type": "string"
          },
          "labels_to_be_notified_behavior": {
            "description": "Labels to be notified for. Valid options are `match_any` and `match_all`. The default value is `match_any`.",
            "type": "string"
          },
          "merge_request_channel": {
            "description": "The name of the channel to receive merge_requests_events notifications",
            "type": "string"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_channel": {
            "description": "The name of the channel to receive note_events notifications",
            "type": "string"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_channel": {
            "description": "The name of the channel to receive pipeline_events notifications",
            "type": "string"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_channel": {
            "description": "The name of the channel to receive push_events notifications",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_channel": {
            "description": "The name of the channel to receive tag_push_events notifications",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "Slack notifications username.",
            "type": "string"
          },
          "vulnerability_channel": {
            "description": "The name of the channel to receive vulnerability_events notifications",
            "type": "string"
          },
          "vulnerability_events": {
            "type": "boolean"
          },
          "webhook": {
            "description": "Slack notifications webhook (for example, `https://hooks.slack.com/services/...`).",
            "type": "string"
          },
          "wiki_page_channel": {
            "description": "The name of the channel to receive wiki_page_events notifications",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesSlackSlashCommands": {
        "description": "Create/Edit Slack Slash Commands integration",
        "properties": {
          "token": {
            "description": "The Slack token.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "token"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesSquashTm": {
        "description": "Create/Edit Squash Tm integration",
        "properties": {
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "token": {
            "description": "Secret token.",
            "type": "string"
          },
          "url": {
            "description": "URL of the Squash TM webhook.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesTeamcity": {
        "description": "Create/Edit Teamcity integration",
        "properties": {
          "build_type": {
            "description": "The build configuration ID of the TeamCity project.",
            "type": "string"
          },
          "enable_ssl_verification": {
            "description": "Enable SSL verification. Defaults to `true` (enabled).",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "password": {
            "description": "The password of the user.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "teamcity_url": {
            "description": "TeamCity root URL (for example, `https://teamcity.example.com`).",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "username": {
            "description": "A user with permissions to trigger a manual build.",
            "type": "string"
          }
        },
        "required": [
          "teamcity_url",
          "build_type",
          "username",
          "password"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesTelegram": {
        "description": "Create/Edit Telegram integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "hostname": {
            "description": "Custom hostname of the Telegram API. The default value is `https://api.telegram.org`.",
            "type": "string"
          },
          "incident_events": {
            "description": "Trigger event when an incident is created.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "room": {
            "description": "Unique identifier for the target chat or the username of the target channel (in the format `@channelusername`).",
            "type": "string"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "thread": {
            "description": "Unique identifier for the target message thread (topic in a forum supergroup).",
            "type": "string"
          },
          "token": {
            "description": "The Telegram bot token (for example, `123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11`).",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "vulnerability_events": {
            "type": "boolean"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "token",
          "room"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesUnifyCircuit": {
        "description": "Create/Edit Unify Circuit integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "webhook": {
            "description": "The Unify Circuit webhook (for example, `https://circuit.com/rest/v2/webhooks/incoming/...`).",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesWebexTeams": {
        "description": "Create/Edit Webex Teams integration",
        "properties": {
          "branches_to_be_notified": {
            "description": "Branches to send notifications for. Valid options are `all`, `default`, `protected`, and `default_and_protected`. The default value is `default`.",
            "type": "string"
          },
          "confidential_issues_events": {
            "description": "Trigger event when a confidential issue is created, updated, or closed.",
            "type": "boolean"
          },
          "confidential_note_events": {
            "description": "Trigger event for new comments on confidential issues.",
            "type": "boolean"
          },
          "issues_events": {
            "description": "Trigger event when an issue is created, updated, or closed.",
            "type": "boolean"
          },
          "merge_requests_events": {
            "description": "Trigger event when a merge request is created, updated, or merged.",
            "type": "boolean"
          },
          "note_events": {
            "description": "Trigger event for new comments.",
            "type": "boolean"
          },
          "notify_only_broken_pipelines": {
            "description": "Send notifications for broken pipelines.",
            "type": "boolean"
          },
          "pipeline_events": {
            "description": "Trigger event when a pipeline status changes.",
            "type": "boolean"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "tag_push_events": {
            "description": "Trigger event for new tags pushed to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "webhook": {
            "description": "The Webex Teams webhook. For example, https://api.ciscospark.com/v1/webhooks/incoming/...",
            "type": "string"
          },
          "wiki_page_events": {
            "description": "Trigger event when a wiki page is created or updated.",
            "type": "boolean"
          }
        },
        "required": [
          "webhook"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesYoutrack": {
        "description": "Create/Edit Youtrack integration",
        "properties": {
          "issues_url": {
            "description": "URL of the issue.",
            "type": "string"
          },
          "project_url": {
            "description": "URL of the project.",
            "type": "string"
          },
          "push_events": {
            "description": "Trigger event for pushes to the repository.",
            "type": "boolean"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "required": [
          "project_url",
          "issues_url"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdServicesZentao": {
        "description": "Create/Edit Zentao integration",
        "properties": {
          "api_token": {
            "type": "string"
          },
          "api_url": {
            "description": "If different from Web URL.",
            "type": "string"
          },
          "url": {
            "description": "Base URL of the ZenTao instance.",
            "type": "string"
          },
          "use_inherited_settings": {
            "description": "Indicates whether to inherit the default settings. Defaults to `false`.",
            "type": "boolean"
          },
          "zentao_product_xid": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "api_token",
          "zentao_product_xid"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdSnippetsSnippetId": {
        "description": "Update an existing project snippet",
        "properties": {
          "content": {
            "description": "The content of the snippet",
            "type": "string"
          },
          "description": {
            "description": "The description of a snippet",
            "type": "string"
          },
          "file_name": {
            "description": "The file name of the snippet",
            "type": "string"
          },
          "files": {
            "description": "An array of files to update",
            "items": {
              "properties": {
                "action": {
                  "description": "The type of action to perform on the file, must be one of: create, update, delete, move",
                  "enum": [
                    "create",
                    "update",
                    "delete",
                    "move"
                  ],
                  "type": "string"
                },
                "content": {
                  "description": "The content of a snippet",
                  "type": "string"
                },
                "file_path": {
                  "description": "The file path of a snippet file",
                  "type": "string"
                },
                "previous_path": {
                  "description": "The previous path of a snippet file",
                  "type": "string"
                }
              },
              "required": [
                "action"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "title": {
            "description": "The title of the snippet",
            "type": "string"
          },
          "visibility": {
            "description": "The visibility of the snippet",
            "enum": [
              "private",
              "internal",
              "public"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdTransfer": {
        "description": "Transfer a project to a new namespace",
        "properties": {
          "namespace": {
            "description": "The ID or path of the new namespace",
            "example": "gitlab",
            "type": "string"
          }
        },
        "required": [
          "namespace"
        ],
        "type": "object"
      },
      "putApiV4ProjectsIdTriggersTriggerId": {
        "description": "Update a trigger token",
        "properties": {
          "description": {
            "description": "The trigger token description",
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdVariablesKey": {
        "description": "Update an existing variable from a project",
        "properties": {
          "description": {
            "description": "The description of the variable",
            "type": "string"
          },
          "environment_scope": {
            "description": "The environment_scope of a variable",
            "type": "string"
          },
          "filter": {
            "description": "Available filters: [environment_scope]. Example: filter[environment_scope]=production",
            "properties": {
              "environment_scope": {
                "description": "The environment scope of a variable",
                "type": "string"
              }
            },
            "type": "object"
          },
          "masked": {
            "description": "Whether the variable is masked",
            "type": "boolean"
          },
          "protected": {
            "description": "Whether the variable is protected",
            "type": "boolean"
          },
          "raw": {
            "description": "Whether the variable will be expanded",
            "type": "boolean"
          },
          "value": {
            "description": "The value of a variable",
            "type": "string"
          },
          "variable_type": {
            "description": "The type of the variable. Default: env_var",
            "enum": [
              "env_var",
              "file"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4ProjectsIdWikisSlug": {
        "description": "Update a wiki page",
        "properties": {
          "content": {
            "description": "Content of a wiki page",
            "type": "string"
          },
          "format": {
            "default": "markdown",
            "description": "Format of a wiki page. Available formats are markdown, rdoc, asciidoc and org",
            "enum": [
              "markdown",
              "rdoc",
              "asciidoc",
              "org"
            ],
            "type": "string"
          },
          "front_matter": {
            "properties": {
              "title": {
                "description": "Front matter title of a wiki page",
                "type": "string"
              }
            },
            "type": "object"
          },
          "title": {
            "description": "Title of a wiki page",
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4RunnersId": {
        "description": "Update runner's details",
        "properties": {
          "access_level": {
            "description": "The access level of the runner",
            "enum": [
              "not_protected",
              "ref_protected"
            ],
            "type": "string"
          },
          "active": {
            "description": "Deprecated: Use `paused` instead. Flag indicating whether the runner is allowed to receive jobs",
            "type": "boolean"
          },
          "description": {
            "description": "The description of the runner",
            "type": "string"
          },
          "locked": {
            "description": "Specifies if the runner is locked",
            "type": "boolean"
          },
          "maintenance_note": {
            "description": "Free-form maintenance notes for the runner (1024 characters)",
            "type": "string"
          },
          "maximum_timeout": {
            "description": "Maximum timeout that limits the amount of time (in seconds) that runners can run jobs",
            "format": "int32",
            "type": "integer"
          },
          "paused": {
            "description": "Specifies if the runner should ignore new jobs",
            "type": "boolean"
          },
          "run_untagged": {
            "description": "Specifies if the runner can execute untagged jobs",
            "type": "boolean"
          },
          "tag_list": {
            "description": "The list of tags for a runner",
            "example": "['macos', 'shell']",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "putApiV4UserAvatar": {
        "description": "Set the avatar of the current user",
        "properties": {
          "avatar": {
            "description": "The avatar file (generated by Multipart middleware)",
            "type": "file"
          }
        },
        "required": [
          "avatar"
        ],
        "type": "object"
      },
      "putApiV4UserPreferences": {
        "description": "Update the current user's preferences",
        "properties": {
          "pass_user_identities_to_ci_jwt": {
            "description": "Flag indicating the user passes their external identities to a CI job as part of a JSON web token.",
            "type": "boolean"
          },
          "show_whitespace_in_diffs": {
            "description": "Flag indicating the user sees whitespace changes in diffs",
            "type": "boolean"
          },
          "view_diffs_file_by_file": {
            "description": "Flag indicating the user sees only one file diff per page",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "putApiV4UserStatus": {
        "description": "Set the status of the current user",
        "properties": {
          "availability": {
            "description": "The availability of user to set",
            "type": "string"
          },
          "clear_status_after": {
            "description": "Automatically clear emoji, message and availability fields after a certain time",
            "enum": [
              "30_minutes",
              "3_hours",
              "8_hours",
              "1_day",
              "3_days",
              "7_days",
              "30_days"
            ],
            "type": "string"
          },
          "emoji": {
            "description": "The emoji to set on the status",
            "type": "string"
          },
          "message": {
            "description": "The status message to set",
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4UserUserIdCreditCardValidation": {
        "description": "[DEPRECATED] Update a user's credit_card_validation",
        "properties": {
          "credit_card_expiration_month": {
            "description": "The month the credit card expires",
            "format": "int32",
            "type": "integer"
          },
          "credit_card_expiration_year": {
            "description": "The year the credit card expires",
            "format": "int32",
            "type": "integer"
          },
          "credit_card_holder_name": {
            "description": "The credit card holder name",
            "type": "string"
          },
          "credit_card_mask_number": {
            "description": "The last 4 digits of credit card number",
            "type": "string"
          },
          "credit_card_type": {
            "description": "The credit card network name",
            "type": "string"
          },
          "credit_card_validated_at": {
            "description": "The time when the user's credit card was validated",
            "format": "date-time",
            "type": "string"
          },
          "stripe_card_fingerprint": {
            "description": "The Stripe credit card fingerprint",
            "type": "string"
          },
          "stripe_payment_method_xid": {
            "description": "The Stripe payment method ID",
            "type": "string"
          },
          "stripe_setup_intent_xid": {
            "description": "The Stripe setup intent ID",
            "type": "string"
          },
          "zuora_payment_method_xid": {
            "description": "The Zuora payment method ID",
            "type": "string"
          }
        },
        "required": [
          "credit_card_validated_at",
          "credit_card_expiration_month",
          "credit_card_expiration_year",
          "credit_card_holder_name",
          "credit_card_mask_number",
          "credit_card_type"
        ],
        "type": "object"
      },
      "putApiV4UsersId": {
        "description": "Update a user. Available only for admins.",
        "properties": {
          "admin": {
            "description": "Flag indicating the user is an administrator",
            "type": "boolean"
          },
          "auditor": {
            "description": "Flag indicating auditor status of the user",
            "type": "boolean"
          },
          "avatar": {
            "description": "Avatar image for user",
            "type": "file"
          },
          "bio": {
            "description": "The biography of the user",
            "type": "string"
          },
          "can_create_group": {
            "description": "Flag indicating the user can create groups",
            "type": "boolean"
          },
          "color_scheme_id": {
            "description": "The color scheme for the file viewer",
            "format": "int32",
            "type": "integer"
          },
          "commit_email": {
            "description": "The commit email, _private for private commit email",
            "type": "string"
          },
          "discord": {
            "description": "The Discord user ID",
            "type": "string"
          },
          "email": {
            "description": "The email of the user",
            "type": "string"
          },
          "extern_uid": {
            "description": "The external authentication provider UID",
            "type": "string"
          },
          "external": {
            "description": "Flag indicating the user is an external user",
            "type": "boolean"
          },
          "extra_shared_runners_minutes_limit": {
            "description": "(admin-only) Extra compute minutes quota for this user",
            "format": "int32",
            "type": "integer"
          },
          "group_id_for_saml": {
            "description": "ID for group where SAML has been configured",
            "format": "int32",
            "type": "integer"
          },
          "linkedin": {
            "description": "The LinkedIn username",
            "type": "string"
          },
          "location": {
            "description": "The location of the user",
            "type": "string"
          },
          "name": {
            "description": "The name of the user",
            "type": "string"
          },
          "note": {
            "description": "Admin note for this user",
            "type": "string"
          },
          "organization": {
            "description": "The organization of the user",
            "type": "string"
          },
          "password": {
            "description": "The password of the new user",
            "type": "string"
          },
          "private_profile": {
            "description": "Flag indicating the user has a private profile",
            "type": "boolean"
          },
          "projects_limit": {
            "description": "The number of projects a user can create",
            "format": "int32",
            "type": "integer"
          },
          "pronouns": {
            "description": "The pronouns of the user",
            "type": "string"
          },
          "provider": {
            "description": "The external provider",
            "type": "string"
          },
          "public_email": {
            "description": "The public email of the user",
            "type": "string"
          },
          "shared_runners_minutes_limit": {
            "description": "Compute minutes quota for this user",
            "format": "int32",
            "type": "integer"
          },
          "skip_reconfirmation": {
            "description": "Flag indicating the account skips the confirmation by email",
            "type": "boolean"
          },
          "skype": {
            "description": "The Skype username",
            "type": "string"
          },
          "theme_id": {
            "description": "The GitLab theme for the user",
            "format": "int32",
            "type": "integer"
          },
          "twitter": {
            "description": "The Twitter username",
            "type": "string"
          },
          "username": {
            "description": "The username of the user",
            "type": "string"
          },
          "view_diffs_file_by_file": {
            "description": "Flag indicating the user sees only one file diff per page",
            "type": "boolean"
          },
          "website_url": {
            "description": "The website of the user",
            "type": "string"
          }
        },
        "type": "object"
      },
      "putApiV4UsersIdCustomAttributesKey": {
        "description": "Set a custom attribute on a user",
        "properties": {
          "value": {
            "description": "The value of the custom attribute",
            "type": "string"
          }
        },
        "required": [
          "value"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "access_token_header": {
        "in": "header",
        "name": "PRIVATE-TOKEN",
        "type": "apiKey"
      },
      "access_token_query": {
        "in": "query",
        "name": "private_token",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "title": "GitLab API",
    "version": "v4"
  },
  "openapi": "3.0.0",
  "paths": {
    "/api/v3/user": {
      "get": {
        "description": "Get the currently authenticated user",
        "operationId": "user/getApiV3User",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API_Entities_UserPublic"
                }
              }
            },
            "description": "Get the currently authenticated user"
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/v4/admin/batched_background_migrations": {
      "get": {
        "description": "Get the list of batched background migrations",
        "operationId": "admin/getApiV4AdminBatchedBackgroundMigrations",
        "parameters": [
          {
            "description": "The name of the database, the default `main`",
            "in": "query",
            "name": "database",
            "required": false,
            "schema": {
              "default": "main",
              "enum": [
                "main",
                "ci",
                "sec",
                "embedding",
                "geo"
              ],
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the list of batched background migrations",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_BatchedBackgroundMigration"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized"
          },
          "403": {
            "description": "403 Forbidden"
          }
        },
        "tags": [
          "batched_background_migrations"
        ]
      }
    },
    "/api/v4/admin/batched_background_migrations/{id}": {
      "get": {
        "description": "Retrieve a batched background migration",
        "operationId": "admin/getApiV4AdminBatchedBackgroundMigrationsId",
        "parameters": [
          {
            "description": "The name of the database",
            "in": "query",
            "name": "database",
            "required": false,
            "schema": {
              "default": "main",
              "enum": [
                "main",
                "ci",
                "sec",
                "embedding",
                "geo"
              ],
              "type": "string"
            }
          },
          {
            "description": "The batched background migration id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Retrieve a batched background migration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_BatchedBackgroundMigration"
            }
          },
          "401": {
            "description": "401 Unauthorized"
          },
          "403": {
            "description": "403 Forbidden"
          },
          "404": {
            "description": "404 Not found"
          }
        },
        "tags": [
          "batched_background_migrations"
        ]
      }
    },
    "/api/v4/admin/batched_background_migrations/{id}/pause": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Pause a batched background migration",
        "operationId": "admin/putApiV4AdminBatchedBackgroundMigrationsIdPause",
        "parameters": [
          {
            "description": "The batched background migration id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4AdminBatchedBackgroundMigrationsIdPause",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4AdminBatchedBackgroundMigrationsIdPause"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Pause a batched background migration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_BatchedBackgroundMigration"
            }
          },
          "401": {
            "description": "401 Unauthorized"
          },
          "403": {
            "description": "403 Forbidden"
          },
          "404": {
            "description": "404 Not found"
          },
          "422": {
            "description": "You can pause only `active` batched background migrations."
          }
        },
        "tags": [
          "batched_background_migrations"
        ]
      }
    },
    "/api/v4/admin/batched_background_migrations/{id}/resume": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Resume a batched background migration",
        "operationId": "admin/putApiV4AdminBatchedBackgroundMigrationsIdResume",
        "parameters": [
          {
            "description": "The batched background migration id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4AdminBatchedBackgroundMigrationsIdResume",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4AdminBatchedBackgroundMigrationsIdResume"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Resume a batched background migration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_BatchedBackgroundMigration"
            }
          },
          "401": {
            "description": "401 Unauthorized"
          },
          "403": {
            "description": "403 Forbidden"
          },
          "404": {
            "description": "404 Not found"
          },
          "422": {
            "description": "You can resume only `paused` batched background migrations."
          }
        },
        "tags": [
          "batched_background_migrations"
        ]
      }
    },
    "/api/v4/admin/ci/variables": {
      "get": {
        "description": "List all instance-level variables",
        "operationId": "admin/getApiV4AdminCiVariables",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List all instance-level variables",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Variable"
            }
          }
        },
        "tags": [
          "ci_variables"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new instance-level variable",
        "operationId": "admin/postApiV4AdminCiVariables",
        "parameters": [
          {
            "in": "body",
            "name": "postApiV4AdminCiVariables",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4AdminCiVariables"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a new instance-level variable",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Variable"
            }
          },
          "400": {
            "description": "400 Bad Request"
          }
        },
        "tags": [
          "ci_variables"
        ]
      }
    },
    "/api/v4/admin/ci/variables/{key}": {
      "delete": {
        "description": "Delete an existing instance-level variable",
        "operationId": "admin/deleteApiV4AdminCiVariablesKey",
        "parameters": [
          {
            "description": "The key of a variable",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Instance Variable Not Found"
          }
        },
        "tags": [
          "ci_variables"
        ]
      },
      "get": {
        "description": "Get the details of a specific instance-level variable",
        "operationId": "admin/getApiV4AdminCiVariablesKey",
        "parameters": [
          {
            "description": "The key of a variable",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the details of a specific instance-level variable",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Variable"
            }
          },
          "404": {
            "description": "Instance Variable Not Found"
          }
        },
        "tags": [
          "ci_variables"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update an instance-level variable",
        "operationId": "admin/putApiV4AdminCiVariablesKey",
        "parameters": [
          {
            "description": "The key of a variable",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4AdminCiVariablesKey",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4AdminCiVariablesKey"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update an instance-level variable",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Variable"
            }
          },
          "404": {
            "description": "Instance Variable Not Found"
          }
        },
        "tags": [
          "ci_variables"
        ]
      }
    },
    "/api/v4/admin/clusters": {
      "get": {
        "description": "This feature was introduced in GitLab 13.2. Returns a list of instance clusters.",
        "operationId": "admin/getApiV4AdminClusters",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List instance clusters",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Cluster"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "summary": "List instance clusters",
        "tags": [
          "clusters"
        ]
      }
    },
    "/api/v4/admin/clusters/add": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 13.2. Adds an existing Kubernetes instance cluster.",
        "operationId": "admin/postApiV4AdminClustersAdd",
        "parameters": [
          {
            "in": "body",
            "name": "postApiV4AdminClustersAdd",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4AdminClustersAdd"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add existing instance cluster",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Cluster"
            }
          },
          "400": {
            "description": "Validation error"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Add existing instance cluster",
        "tags": [
          "clusters"
        ]
      }
    },
    "/api/v4/admin/clusters/{cluster_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 13.2. Deletes an existing instance cluster. Does not remove existing resources within the connected Kubernetes cluster.",
        "operationId": "admin/deleteApiV4AdminClustersClusterId",
        "parameters": [
          {
            "description": "The cluster ID",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete instance cluster",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Cluster"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Delete instance cluster",
        "tags": [
          "clusters"
        ]
      },
      "get": {
        "description": "This feature was introduced in GitLab 13.2. Returns a single instance cluster.",
        "operationId": "admin/getApiV4AdminClustersClusterId",
        "parameters": [
          {
            "description": "The cluster ID",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single instance cluster",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Cluster"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get a single instance cluster",
        "tags": [
          "clusters"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 13.2. Updates an existing instance cluster.",
        "operationId": "admin/putApiV4AdminClustersClusterId",
        "parameters": [
          {
            "description": "The cluster ID",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4AdminClustersClusterId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4AdminClustersClusterId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Edit instance cluster",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Cluster"
            }
          },
          "400": {
            "description": "Validation error"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Edit instance cluster",
        "tags": [
          "clusters"
        ]
      }
    },
    "/api/v4/admin/databases/{database_name}/dictionary/tables/{table_name}": {
      "get": {
        "description": "Retrieve dictionary details",
        "operationId": "admin/getApiV4AdminDatabasesDatabaseNameDictionaryTablesTableName",
        "parameters": [
          {
            "description": "The database name",
            "in": "path",
            "name": "database_name",
            "required": true,
            "schema": {
              "enum": [
                "main",
                "ci"
              ],
              "type": "string"
            }
          },
          {
            "description": "The table name",
            "in": "path",
            "name": "table_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Retrieve dictionary details",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Dictionary_Table"
            }
          },
          "401": {
            "description": "401 Unauthorized"
          },
          "403": {
            "description": "403 Forbidden"
          },
          "404": {
            "description": "404 Not found"
          }
        },
        "tags": [
          "admin"
        ]
      }
    },
    "/api/v4/admin/migrations/{timestamp}/mark": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Mark the migration as successfully executed",
        "operationId": "admin/postApiV4AdminMigrationsTimestampMark",
        "parameters": [
          {
            "description": "The migration version timestamp",
            "in": "path",
            "name": "timestamp",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4AdminMigrationsTimestampMark",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4AdminMigrationsTimestampMark"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "201 Created"
          },
          "401": {
            "description": "401 Unauthorized"
          },
          "403": {
            "description": "403 Forbidden"
          },
          "404": {
            "description": "404 Not found"
          },
          "422": {
            "description": "You can mark only pending migrations"
          }
        },
        "tags": [
          "migrations"
        ]
      }
    },
    "/api/v4/applications": {
      "get": {
        "description": "List all registered applications",
        "operationId": "applications/getApiV4Applications",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get applications",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Application"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get applications",
        "tags": [
          "applications"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 10.5",
        "operationId": "applications/postApiV4Applications",
        "parameters": [
          {
            "in": "body",
            "name": "postApiV4Applications",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4Applications"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create a new application",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ApplicationWithSecret"
            }
          }
        },
        "summary": "Create a new application",
        "tags": [
          "applications"
        ]
      }
    },
    "/api/v4/applications/{id}": {
      "delete": {
        "description": "Delete a specific application",
        "operationId": "applications/deleteApiV4ApplicationsId",
        "parameters": [
          {
            "description": "The ID of the application (not the application_id)",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete an application"
          }
        },
        "summary": "Delete an application",
        "tags": [
          "applications"
        ]
      }
    },
    "/api/v4/applications/{id}/renew-secret": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Renew the secret of a specific application",
        "operationId": "applications_renew-secret/postApiV4ApplicationsIdRenewSecret",
        "parameters": [
          {
            "description": "The ID of the application (not the application_id)",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Renew an application secret",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ApplicationWithSecret"
            }
          }
        },
        "summary": "Renew an application secret",
        "tags": [
          "applications"
        ]
      }
    },
    "/api/v4/groups": {
      "get": {
        "description": "Get a groups list",
        "operationId": "groups/getApiV4Groups",
        "parameters": [
          {
            "description": "Include project statistics",
            "in": "query",
            "name": "statistics",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Array of group ids to exclude from list",
            "in": "query",
            "name": "skip_groups",
            "required": false,
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Show all group that you have access to",
            "in": "query",
            "name": "all_available",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "enum": [
                "private",
                "internal",
                "public"
              ],
              "type": "string"
            }
          },
          {
            "description": "Search for a specific group",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit by owned by authenticated user",
            "in": "query",
            "name": "owned",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Order by name, path, id or similarity if searching",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "name",
              "enum": [
                "name",
                "path",
                "id",
                "similarity"
              ],
              "type": "string"
            }
          },
          {
            "description": "Sort by asc (ascending) or desc (descending)",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Minimum access level of authenticated user",
            "in": "query",
            "name": "min_access_level",
            "required": false,
            "schema": {
              "enum": [
                10,
                15,
                20,
                30,
                40,
                50
              ],
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Only include top-level groups",
            "in": "query",
            "name": "top_level_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter by repository storage used by the group",
            "in": "query",
            "name": "repository_storage",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Date when the group was marked for deletion",
            "in": "query",
            "name": "marked_for_deletion_on",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Include custom attributes in the response",
            "in": "query",
            "name": "with_custom_attributes",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/API_Entities_Group"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Get a groups list"
          }
        },
        "tags": [
          "groups"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a group. Available only for users who can create groups.",
        "operationId": "groups/postApiV4Groups",
        "parameters": [
          {
            "in": "body",
            "name": "postApiV4Groups",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4Groups"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a group. Available only for users who can create groups.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Group"
            }
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/import": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "This feature was introduced in GitLab 12.8",
        "operationId": "groups/postApiV4GroupsImport",
        "parameters": [
          {
            "description": "Group path",
            "in": "formData",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Group name",
            "in": "formData",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The group export file to be imported",
            "in": "formData",
            "name": "file",
            "required": true,
            "schema": {
              "type": "file"
            }
          },
          {
            "description": "The ID of the parent group that the group will be imported into. Defaults to the current user's namespace.",
            "in": "formData",
            "name": "parent_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the organization that the group will be part of. ",
            "in": "formData",
            "name": "organization_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Create a new group import"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "summary": "Create a new group import",
        "tags": [
          "group_import"
        ]
      }
    },
    "/api/v4/groups/import/authorize": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 12.8",
        "operationId": "groups/postApiV4GroupsImportAuthorize",
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Workhorse authorize the group import upload"
          }
        },
        "summary": "Workhorse authorize the group import upload",
        "tags": [
          "group_import"
        ]
      }
    },
    "/api/v4/groups/{id}": {
      "delete": {
        "description": "Remove a group.",
        "operationId": "groups/deleteApiV4GroupsId",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Remove a group."
          }
        },
        "tags": [
          "groups"
        ]
      },
      "get": {
        "description": "Get a single group, with containing projects.",
        "operationId": "groups/getApiV4GroupsId",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include custom attributes in the response",
            "in": "query",
            "name": "with_custom_attributes",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Omit project details",
            "in": "query",
            "name": "with_projects",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API_Entities_GroupDetail"
                }
              }
            },
            "description": "Get a single group, with containing projects."
          }
        },
        "tags": [
          "groups"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a group. Available only for users who can administrate groups.",
        "operationId": "groups/putApiV4GroupsId",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update a group. Available only for users who can administrate groups.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Group"
            }
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/-/debian_distributions": {
      "get": {
        "description": "This feature was introduced in 14.0",
        "operationId": "groups/getApiV4GroupsIdDebianDistributions",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The Debian Codename",
            "in": "query",
            "name": "codename",
            "required": false,
            "schema": {
              "example": "sid",
              "type": "string"
            }
          },
          {
            "description": "The Debian Suite",
            "in": "query",
            "name": "suite",
            "required": false,
            "schema": {
              "example": "unstable",
              "type": "string"
            }
          },
          {
            "description": "The Debian Origin",
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "example": "Grep",
              "type": "string"
            }
          },
          {
            "description": "The Debian Label",
            "in": "query",
            "name": "label",
            "required": false,
            "schema": {
              "example": "grep.be",
              "type": "string"
            }
          },
          {
            "description": "The Debian Version",
            "in": "query",
            "name": "version",
            "required": false,
            "schema": {
              "example": "12",
              "type": "string"
            }
          },
          {
            "description": "The Debian Description",
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "example": "My description",
              "type": "string"
            }
          },
          {
            "description": "The duration before the Release file should be considered expired by the client",
            "in": "query",
            "name": "valid_time_duration_seconds",
            "required": false,
            "schema": {
              "example": 604800,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The list of Components",
            "in": "query",
            "name": "components",
            "required": false,
            "schema": {
              "example": "main",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The list of Architectures",
            "in": "query",
            "name": "architectures",
            "required": false,
            "schema": {
              "example": "amd64",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of Debian Distributions",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Packages_Debian_Distribution"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get a list of Debian Distributions",
        "tags": [
          "debian_distribution"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in 14.0",
        "operationId": "groups/postApiV4GroupsIdDebianDistributions",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4GroupsIdDebianDistributions",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4GroupsIdDebianDistributions"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a Debian Distribution",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Packages_Debian_Distribution"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Create a Debian Distribution",
        "tags": [
          "debian_distribution"
        ]
      }
    },
    "/api/v4/groups/{id}/-/debian_distributions/{codename}": {
      "delete": {
        "description": "This feature was introduced in 14.0",
        "operationId": "groups/deleteApiV4GroupsIdDebianDistributionsCodename",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename",
            "in": "path",
            "name": "codename",
            "required": true,
            "schema": {
              "example": "sid",
              "type": "string"
            }
          },
          {
            "description": "The Debian Suite",
            "in": "query",
            "name": "suite",
            "required": false,
            "schema": {
              "example": "unstable",
              "type": "string"
            }
          },
          {
            "description": "The Debian Origin",
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "example": "Grep",
              "type": "string"
            }
          },
          {
            "description": "The Debian Label",
            "in": "query",
            "name": "label",
            "required": false,
            "schema": {
              "example": "grep.be",
              "type": "string"
            }
          },
          {
            "description": "The Debian Version",
            "in": "query",
            "name": "version",
            "required": false,
            "schema": {
              "example": "12",
              "type": "string"
            }
          },
          {
            "description": "The Debian Description",
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "example": "My description",
              "type": "string"
            }
          },
          {
            "description": "The duration before the Release file should be considered expired by the client",
            "in": "query",
            "name": "valid_time_duration_seconds",
            "required": false,
            "schema": {
              "example": 604800,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The list of Components",
            "in": "query",
            "name": "components",
            "required": false,
            "schema": {
              "example": "main",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The list of Architectures",
            "in": "query",
            "name": "architectures",
            "required": false,
            "schema": {
              "example": "amd64",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Delete a Debian Distribution"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Delete a Debian Distribution",
        "tags": [
          "debian_distribution"
        ]
      },
      "get": {
        "description": "This feature was introduced in 14.0",
        "operationId": "groups/getApiV4GroupsIdDebianDistributionsCodename",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename",
            "in": "path",
            "name": "codename",
            "required": true,
            "schema": {
              "example": "sid",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a Debian Distribution",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Packages_Debian_Distribution"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get a Debian Distribution",
        "tags": [
          "debian_distribution"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in 14.0",
        "operationId": "groups/putApiV4GroupsIdDebianDistributionsCodename",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename",
            "in": "path",
            "name": "codename",
            "required": true,
            "schema": {
              "example": "sid",
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdDebianDistributionsCodename",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdDebianDistributionsCodename"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update a Debian Distribution",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Packages_Debian_Distribution"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Update a Debian Distribution",
        "tags": [
          "debian_distribution"
        ]
      }
    },
    "/api/v4/groups/{id}/-/debian_distributions/{codename}/key.asc": {
      "get": {
        "description": "This feature was introduced in 14.4",
        "operationId": "groups/getApiV4GroupsIdDebianDistributionsCodenameKeyAsc",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename",
            "in": "path",
            "name": "codename",
            "required": true,
            "schema": {
              "example": "sid",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a Debian Distribution Key",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Packages_Debian_Distribution"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get a Debian Distribution Key",
        "tags": [
          "debian_distribution"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/debian/dists/*distribution/InRelease": {
      "get": {
        "description": "This feature was introduced in GitLab 13.5",
        "operationId": "groups/getApiV4GroupsIdPackagesDebianDists*distributionInrelease",
        "parameters": [
          {
            "description": "The group ID or full group path.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "query",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The signed Release file"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The signed Release file",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/debian/dists/*distribution/Release": {
      "get": {
        "description": "This feature was introduced in GitLab 13.5",
        "operationId": "groups/getApiV4GroupsIdPackagesDebianDists*distributionRelease",
        "parameters": [
          {
            "description": "The group ID or full group path.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "query",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The unsigned Release file"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The unsigned Release file",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/debian/dists/*distribution/Release.gpg": {
      "get": {
        "description": "This feature was introduced in GitLab 13.5",
        "operationId": "groups/getApiV4GroupsIdPackagesDebianDists*distributionReleaseGpg",
        "parameters": [
          {
            "description": "The group ID or full group path.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "query",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Release file signature"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The Release file signature",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/debian/dists/*distribution/{component}/binary-{architecture}/Packages": {
      "get": {
        "description": "This feature was introduced in GitLab 13.5",
        "operationId": "groups/getApiV4GroupsIdPackagesDebianDists*distributionComponentBinaryArchitecturePackages",
        "parameters": [
          {
            "description": "The group ID or full group path.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "query",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          },
          {
            "description": "The Debian Component",
            "in": "path",
            "name": "component",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          },
          {
            "description": "The Debian Architecture",
            "in": "path",
            "name": "architecture",
            "required": true,
            "schema": {
              "example": "binary-amd64",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The binary files index"
          },
          "202": {
            "description": "The binary files index"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The binary files index",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/debian/dists/*distribution/{component}/binary-{architecture}/by-hash/SHA256/{file_sha256}": {
      "get": {
        "description": "This feature was introduced in GitLab 15.4",
        "operationId": "groups/getApiV4GroupsIdPackagesDebianDists*distributionComponentBinaryArchitectureByHashSha256FileSha256",
        "parameters": [
          {
            "description": "The group ID or full group path.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "query",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          },
          {
            "description": "The Debian Component",
            "in": "path",
            "name": "component",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          },
          {
            "description": "The Debian Architecture",
            "in": "path",
            "name": "architecture",
            "required": true,
            "schema": {
              "example": "binary-amd64",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "file_sha256",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The binary files index by hash"
          },
          "202": {
            "description": "The binary files index by hash"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The binary files index by hash",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/debian/dists/*distribution/{component}/debian-installer/binary-{architecture}/Packages": {
      "get": {
        "description": "This feature was introduced in GitLab 15.4",
        "operationId": "groups/getApiV4GroupsIdPackagesDebianDists*distributionComponentDebianInstallerBinaryArchitecturePackages",
        "parameters": [
          {
            "description": "The group ID or full group path.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "query",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          },
          {
            "description": "The Debian Component",
            "in": "path",
            "name": "component",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          },
          {
            "description": "The Debian Architecture",
            "in": "path",
            "name": "architecture",
            "required": true,
            "schema": {
              "example": "binary-amd64",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The installer (udeb) binary files index"
          },
          "202": {
            "description": "The installer (udeb) binary files index"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The installer (udeb) binary files index",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/debian/dists/*distribution/{component}/debian-installer/binary-{architecture}/by-hash/SHA256/{file_sha256}": {
      "get": {
        "description": "This feature was introduced in GitLab 15.4",
        "operationId": "groups/getApiV4GroupsIdPackagesDebianDists*distributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256",
        "parameters": [
          {
            "description": "The group ID or full group path.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "query",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          },
          {
            "description": "The Debian Component",
            "in": "path",
            "name": "component",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          },
          {
            "description": "The Debian Architecture",
            "in": "path",
            "name": "architecture",
            "required": true,
            "schema": {
              "example": "binary-amd64",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "file_sha256",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The installer (udeb) binary files index by hash"
          },
          "202": {
            "description": "The installer (udeb) binary files index by hash"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The installer (udeb) binary files index by hash",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/debian/dists/*distribution/{component}/source/Sources": {
      "get": {
        "description": "This feature was introduced in GitLab 15.4",
        "operationId": "groups/getApiV4GroupsIdPackagesDebianDists*distributionComponentSourceSources",
        "parameters": [
          {
            "description": "The group ID or full group path.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "query",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          },
          {
            "description": "The Debian Component",
            "in": "path",
            "name": "component",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The source files index"
          },
          "202": {
            "description": "The source files index"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The source files index",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/debian/dists/*distribution/{component}/source/by-hash/SHA256/{file_sha256}": {
      "get": {
        "description": "This feature was introduced in GitLab 15.4",
        "operationId": "groups/getApiV4GroupsIdPackagesDebianDists*distributionComponentSourceByHashSha256FileSha256",
        "parameters": [
          {
            "description": "The group ID or full group path.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "query",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          },
          {
            "description": "The Debian Component",
            "in": "path",
            "name": "component",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "file_sha256",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The source files index by hash"
          },
          "202": {
            "description": "The source files index by hash"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The source files index by hash",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/debian/pool/{distribution}/{project_id}/{letter}/{package_name}/{package_version}/{file_name}": {
      "get": {
        "description": "This feature was introduced in GitLab 14.2",
        "operationId": "groups/getApiV4GroupsIdPackagesDebianPoolDistributionProjectIdLetterPackageNamePackageVersionFileName",
        "parameters": [
          {
            "description": "The group ID or full group path.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Project Id",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "path",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          },
          {
            "description": "The Debian Classification (first-letter or lib-first-letter)",
            "in": "path",
            "name": "letter",
            "required": true,
            "schema": {
              "example": "a",
              "type": "string"
            }
          },
          {
            "description": "The Debian Source Package Name",
            "in": "path",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my-pkg",
              "type": "string"
            }
          },
          {
            "description": "The Debian Source Package Version",
            "in": "path",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0.0",
              "type": "string"
            }
          },
          {
            "description": "The Debian File Name",
            "in": "path",
            "name": "file_name",
            "required": true,
            "schema": {
              "example": "example_1.0.0~alpha2_amd64.deb",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download Debian package"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Download Debian package",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/maven/*path/{file_name}": {
      "get": {
        "description": "This feature was introduced in GitLab 11.7",
        "operationId": "groups/getApiV4GroupsIdPackagesMaven*pathFileName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package path",
            "in": "query",
            "name": "path",
            "required": true,
            "schema": {
              "example": "foo/bar/mypkg/1.0-SNAPSHOT",
              "type": "string"
            }
          },
          {
            "description": "Package file name",
            "in": "path",
            "name": "file_name",
            "required": true,
            "schema": {
              "example": "mypkg-1.0-SNAPSHOT.jar",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download the maven package file at a group level"
          },
          "302": {
            "description": "Download the maven package file at a group level"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Download the maven package file at a group level",
        "tags": [
          "maven_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/npm/*package_name": {
      "get": {
        "description": "This feature was introduced in GitLab 11.8",
        "operationId": "groups/getApiV4GroupsIdPackagesNpm*packageName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "query",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "mypackage",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_NpmPackage"
            }
          },
          "302": {
            "description": "Found (redirect)"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "NPM registry metadata endpoint",
        "tags": [
          "npm_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/npm/-/npm/v1/security/advisories/bulk": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 15.6",
        "operationId": "groups/postApiV4GroupsIdPackagesNpmNpmV1SecurityAdvisoriesBulk",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "307": {
            "description": "Temporary Redirect"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "NPM registry bulk advisory endpoint",
        "tags": [
          "npm_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/npm/-/npm/v1/security/audits/quick": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 15.6",
        "operationId": "groups/postApiV4GroupsIdPackagesNpmNpmV1SecurityAuditsQuick",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "307": {
            "description": "Temporary Redirect"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "NPM registry quick audit endpoint",
        "tags": [
          "npm_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/npm/-/package/*package_name/dist-tags": {
      "get": {
        "description": "This feature was introduced in GitLab 12.7",
        "operationId": "groups/getApiV4GroupsIdPackagesNpmPackage*packageNameDistTags",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "query",
            "name": "package_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get all tags for a given an NPM package",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_NpmPackageTag"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get all tags for a given an NPM package",
        "tags": [
          "npm_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/npm/-/package/*package_name/dist-tags/{tag}": {
      "delete": {
        "description": "This feature was introduced in GitLab 12.7",
        "operationId": "groups/deleteApiV4GroupsIdPackagesNpmPackage*packageNameDistTagsTag",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "query",
            "name": "package_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package dist-tag",
            "in": "path",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Deletes the given tag"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Deletes the given tag",
        "tags": [
          "npm_packages"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 12.7",
        "operationId": "groups/putApiV4GroupsIdPackagesNpmPackage*packageNameDistTagsTag",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package dist-tag",
            "in": "path",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdPackagesNpmPackage*packageNameDistTagsTag",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdPackagesNpmPackage*packageNameDistTagsTag"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Create or Update the given tag for the given NPM package and version"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Create or Update the given tag for the given NPM package and version",
        "tags": [
          "npm_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/nuget/index": {
      "get": {
        "description": "This feature was introduced in GitLab 12.6",
        "operationId": "groups/getApiV4GroupsIdPackagesNugetIndex",
        "parameters": [
          {
            "description": "The group ID or full group path.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet V3 Feed Service Index",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Nuget_ServiceIndex"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet V3 Feed Service Index",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/nuget/metadata/*package_name/*package_version": {
      "get": {
        "description": "This feature was introduced in GitLab 12.8",
        "operationId": "groups/getApiV4GroupsIdPackagesNugetMetadata*packageName*packageVersion",
        "parameters": [
          {
            "description": "The group ID or full group path.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The NuGet package name",
            "in": "query",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "MyNuGetPkg",
              "type": "string"
            }
          },
          {
            "description": "The NuGet package version",
            "in": "query",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0.0",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet Metadata Service - Package name and version level",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Nuget_PackageMetadata"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet Metadata Service - Package name and version level",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/nuget/metadata/*package_name/index": {
      "get": {
        "description": "This feature was introduced in GitLab 12.8",
        "operationId": "groups/getApiV4GroupsIdPackagesNugetMetadata*packageNameIndex",
        "parameters": [
          {
            "description": "The group ID or full group path.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The NuGet package name",
            "in": "query",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "MyNuGetPkg",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet Metadata Service - Package name level",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Nuget_PackagesMetadata"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet Metadata Service - Package name level",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/nuget/query": {
      "get": {
        "description": "This feature was introduced in GitLab 12.8",
        "operationId": "groups/getApiV4GroupsIdPackagesNugetQuery",
        "parameters": [
          {
            "description": "The group ID or full group path.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The search term",
            "in": "query",
            "name": "q",
            "required": false,
            "schema": {
              "example": "MyNuGet",
              "type": "string"
            }
          },
          {
            "description": "The number of results to skip",
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of results to return",
            "in": "query",
            "name": "take",
            "required": false,
            "schema": {
              "default": 20,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Include prerelease versions",
            "in": "query",
            "name": "prerelease",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet Search Service",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Nuget_SearchResults"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet Search Service",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/nuget/symbolfiles/*file_name/*signature/*same_file_name": {
      "get": {
        "description": "This feature was introduced in GitLab 16.7",
        "operationId": "groups/getApiV4GroupsIdPackagesNugetSymbolfiles*fileName*signature*sameFileName",
        "parameters": [
          {
            "in": "header",
            "name": "Symbolchecksum",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The group ID or full group path.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The symbol file name",
            "in": "query",
            "name": "file_name",
            "required": true,
            "schema": {
              "example": "mynugetpkg.pdb",
              "type": "string"
            }
          },
          {
            "description": "The symbol file signature",
            "in": "query",
            "name": "signature",
            "required": true,
            "schema": {
              "example": "k813f89485474661234z7109cve5709eFFFFFFFF",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "same_file_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet Symbol File Download Endpoint"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet Symbol File Download Endpoint",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/nuget/v2": {
      "get": {
        "description": "This feature was introduced in GitLab 16.2",
        "operationId": "groups/getApiV4GroupsIdPackagesNugetV2",
        "parameters": [
          {
            "description": "The group ID or full group path.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet V2 Feed Service Index"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet V2 Feed Service Index",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/nuget/v2/$metadata": {
      "get": {
        "description": "This feature was introduced in GitLab 16.3",
        "operationId": "groups/getApiV4GroupsIdPackagesNugetV2$metadata",
        "parameters": [
          {
            "description": "The group ID or full group path.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet V2 Feed Package $metadata endpoint"
          }
        },
        "summary": "The NuGet V2 Feed Package $metadata endpoint",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/pypi/files/{sha256}/*file_identifier": {
      "get": {
        "description": "This feature was introduced in GitLab 13.12",
        "operationId": "groups/getApiV4GroupsIdPackagesPypiFilesSha256*fileIdentifier",
        "parameters": [
          {
            "description": "The ID or full path of the group.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The PyPi package file identifier",
            "in": "query",
            "name": "file_identifier",
            "required": true,
            "schema": {
              "example": "my.pypi.package-0.0.1.tar.gz",
              "type": "string"
            }
          },
          {
            "description": "The PyPi package sha256 check sum",
            "in": "path",
            "name": "sha256",
            "required": true,
            "schema": {
              "example": "5y57017232013c8ac80647f4ca153k3726f6cba62d055cd747844ed95b3c65ff",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download a package file from a group"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Download a package file from a group",
        "tags": [
          "pypi_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/pypi/simple": {
      "get": {
        "description": "This feature was introduced in GitLab 15.1",
        "operationId": "groups/getApiV4GroupsIdPackagesPypiSimple",
        "parameters": [
          {
            "description": "The ID or full path of the group.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The PyPi Simple Group Index Endpoint"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The PyPi Simple Group Index Endpoint",
        "tags": [
          "pypi_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/-/packages/pypi/simple/*package_name": {
      "get": {
        "description": "This feature was introduced in GitLab 12.10",
        "operationId": "groups/getApiV4GroupsIdPackagesPypiSimple*packageName",
        "parameters": [
          {
            "description": "The ID or full path of the group.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The PyPi package name",
            "in": "query",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my.pypi.package",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The PyPi Simple Group Package Endpoint"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The PyPi Simple Group Package Endpoint",
        "tags": [
          "pypi_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/access_requests": {
      "get": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "groups_access_requests/getApiV4GroupsIdAccessRequests",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets a list of access requests for a group.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AccessRequester"
            }
          }
        },
        "summary": "Gets a list of access requests for a group.",
        "tags": [
          "access_requests"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "groups_access_requests/postApiV4GroupsIdAccessRequests",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "successfull_response": {
                "access_level": 20,
                "created_at": "2012-10-22T14:13:35Z",
                "id": 1,
                "name": "Raymond Smith",
                "state": "active",
                "username": "raymond_smith"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AccessRequester"
            }
          }
        },
        "summary": "Requests access for the authenticated user to a group.",
        "tags": [
          "access_requests"
        ]
      }
    },
    "/api/v4/groups/{id}/access_requests/{user_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "groups_access_requests/deleteApiV4GroupsIdAccessRequestsUserId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the access requester",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Denies an access request for the given user."
          }
        },
        "summary": "Denies an access request for the given user.",
        "tags": [
          "access_requests"
        ]
      }
    },
    "/api/v4/groups/{id}/access_requests/{user_id}/approve": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "groups_access_requests/putApiV4GroupsIdAccessRequestsUserIdApprove",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the access requester",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdAccessRequestsUserIdApprove",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdAccessRequestsUserIdApprove"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "successfull_response": {
                "access_level": 20,
                "created_at": "2012-10-22T14:13:35Z",
                "id": 1,
                "name": "Raymond Smith",
                "state": "active",
                "username": "raymond_smith"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AccessRequester"
            }
          }
        },
        "summary": "Approves an access request for the given user.",
        "tags": [
          "access_requests"
        ]
      }
    },
    "/api/v4/groups/{id}/access_tokens": {
      "get": {
        "description": "This feature was introduced in GitLab 13.9.",
        "operationId": "groups_access_tokens/getApiV4GroupsIdAccessTokens",
        "parameters": [
          {
            "description": "ID or URL-encoded path of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter tokens which are either active or inactive",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "enum": [
                "active",
                "inactive"
              ],
              "example": "active",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get list of all access tokens for the specified resource",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_ResourceAccessToken"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get list of all access tokens for the specified resource",
        "tags": [
          "group_access_tokens"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 13.9.",
        "operationId": "groups_access_tokens/postApiV4GroupsIdAccessTokens",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 2,
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4GroupsIdAccessTokens",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4GroupsIdAccessTokens"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a resource access token",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ResourceAccessTokenWithToken"
            }
          }
        },
        "summary": "Create a resource access token",
        "tags": [
          "group_access_tokens"
        ]
      }
    },
    "/api/v4/groups/{id}/access_tokens/self/rotate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Rotates a resource access token by passing it to the API in a header",
        "operationId": "groups_access_tokens/postApiV4GroupsIdAccessTokensSelfRotate",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4GroupsIdAccessTokensSelfRotate",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4GroupsIdAccessTokensSelfRotate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Rotate a resource access token",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ResourceAccessTokenWithToken"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Method not allowed"
          }
        },
        "summary": "Rotate a resource access token",
        "tags": [
          "personal_access_tokens"
        ]
      }
    },
    "/api/v4/groups/{id}/access_tokens/{token_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 13.9.",
        "operationId": "groups_access_tokens/deleteApiV4GroupsIdAccessTokensTokenId",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the token",
            "in": "path",
            "name": "token_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Revoke a resource access token"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Revoke a resource access token",
        "tags": [
          "group_access_tokens"
        ]
      },
      "get": {
        "description": "This feature was introduced in GitLab 14.10.",
        "operationId": "groups_access_tokens/getApiV4GroupsIdAccessTokensTokenId",
        "parameters": [
          {
            "description": "ID or URL-encoded path of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the token",
            "in": "path",
            "name": "token_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get an access token for the specified resource by ID",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ResourceAccessToken"
            }
          }
        },
        "summary": "Get an access token for the specified resource by ID",
        "tags": [
          "group_access_tokens"
        ]
      }
    },
    "/api/v4/groups/{id}/access_tokens/{token_id}/rotate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 16.0.",
        "operationId": "groups_access_tokens/postApiV4GroupsIdAccessTokensTokenIdRotate",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the token",
            "in": "path",
            "name": "token_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4GroupsIdAccessTokensTokenIdRotate",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4GroupsIdAccessTokensTokenIdRotate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Rotate a resource access token",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ResourceAccessTokenWithToken"
            }
          }
        },
        "summary": "Rotate a resource access token",
        "tags": [
          "group_access_tokens"
        ]
      }
    },
    "/api/v4/groups/{id}/audit_events": {
      "get": {
        "description": "Get a list of audit events in this group.",
        "operationId": "groups_audit_events/getApiV4GroupsIdAuditEvents",
        "parameters": [
          {
            "description": "Return audit events created after the specified time",
            "in": "query",
            "name": "created_after",
            "required": false,
            "schema": {
              "example": "2016-01-19T09:05:50.355Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Return audit events created before the specified time",
            "in": "query",
            "name": "created_before",
            "required": false,
            "schema": {
              "example": "2016-01-19T09:05:50.355Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of audit events in this group.",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/EE_API_Entities_AuditEvent"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/audit_events/{audit_event_id}": {
      "get": {
        "description": "Get a specific audit event in this group.",
        "operationId": "groups_audit_events/getApiV4GroupsIdAuditEventsAuditEventId",
        "parameters": [
          {
            "description": "The ID of the audit event",
            "in": "path",
            "name": "audit_event_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a specific audit event in this group.",
            "schema": {
              "$ref": "#/components/schemas/EE_API_Entities_AuditEvent"
            }
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/avatar": {
      "get": {
        "description": "This feature was introduced in GitLab 14.0",
        "operationId": "groups_avatar/getApiV4GroupsIdAvatar",
        "parameters": [
          {
            "description": "The ID of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download the group avatar"
          }
        },
        "summary": "Download the group avatar",
        "tags": [
          "group_avatar"
        ]
      }
    },
    "/api/v4/groups/{id}/badges": {
      "get": {
        "description": "This feature was introduced in GitLab 10.6.",
        "operationId": "groups_badges/getApiV4GroupsIdBadges",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Name for the badge",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets a list of group badges viewable by the authenticated user.",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Badge"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a list of group badges viewable by the authenticated user.",
        "tags": [
          "badges"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 10.6.",
        "operationId": "groups_badges/postApiV4GroupsIdBadges",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4GroupsIdBadges",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4GroupsIdBadges"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Adds a badge to a group.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Badge"
            }
          }
        },
        "summary": "Adds a badge to a group.",
        "tags": [
          "badges"
        ]
      }
    },
    "/api/v4/groups/{id}/badges/render": {
      "get": {
        "description": "This feature was introduced in GitLab 10.6.",
        "operationId": "groups_badges/getApiV4GroupsIdBadgesRender",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "URL of the badge link",
            "in": "query",
            "name": "link_url",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "URL of the badge image",
            "in": "query",
            "name": "image_url",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Preview a badge from a group.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_BasicBadgeDetails"
            }
          }
        },
        "summary": "Preview a badge from a group.",
        "tags": [
          "badges"
        ]
      }
    },
    "/api/v4/groups/{id}/badges/{badge_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 10.6.",
        "operationId": "groups_badges/deleteApiV4GroupsIdBadgesBadgeId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The badge ID",
            "in": "path",
            "name": "badge_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Removes a badge from the group."
          }
        },
        "summary": "Removes a badge from the group.",
        "tags": [
          "badges"
        ]
      },
      "get": {
        "description": "This feature was introduced in GitLab 10.6.",
        "operationId": "groups_badges/getApiV4GroupsIdBadgesBadgeId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The badge ID",
            "in": "path",
            "name": "badge_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets a badge of a group.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Badge"
            }
          }
        },
        "summary": "Gets a badge of a group.",
        "tags": [
          "badges"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 10.6.",
        "operationId": "groups_badges/putApiV4GroupsIdBadgesBadgeId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "badge_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdBadgesBadgeId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdBadgesBadgeId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Updates a badge of a group.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Badge"
            }
          }
        },
        "summary": "Updates a badge of a group.",
        "tags": [
          "badges"
        ]
      }
    },
    "/api/v4/groups/{id}/billable_members": {
      "get": {
        "description": "Gets a list of billable users of top-level group.",
        "operationId": "groups_billable_members/getApiV4GroupsIdBillableMembers",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The exact name of the subscribed member",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The sorting option",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "access_level_asc",
                "access_level_desc",
                "last_joined",
                "name_asc",
                "name_desc",
                "oldest_joined",
                "oldest_sign_in",
                "recent_sign_in",
                "last_activity_on_asc",
                "last_activity_on_desc"
              ],
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets a list of billable users of top-level group.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Member"
            }
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/billable_members/{user_id}": {
      "delete": {
        "description": "Removes a billable member from a group or project.",
        "operationId": "groups_billable_members/deleteApiV4GroupsIdBillableMembersUserId",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Removes a billable member from a group or project."
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/billable_members/{user_id}/indirect": {
      "get": {
        "description": "Get the indirect memberships of a billable user of a top-level group.",
        "operationId": "groups_billable_members/getApiV4GroupsIdBillableMembersUserIdIndirect",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the indirect memberships of a billable user of a top-level group.",
            "schema": {
              "$ref": "#/components/schemas/EE_API_Entities_BillableMembership"
            }
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/billable_members/{user_id}/memberships": {
      "get": {
        "description": "Get the direct memberships of a billable user of a top-level group.",
        "operationId": "groups_billable_members/getApiV4GroupsIdBillableMembersUserIdMemberships",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the direct memberships of a billable user of a top-level group.",
            "schema": {
              "$ref": "#/components/schemas/EE_API_Entities_BillableMembership"
            }
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/clusters": {
      "get": {
        "description": "This feature was introduced in GitLab 12.1. Returns a list of group clusters.",
        "operationId": "groups_clusters/getApiV4GroupsIdClusters",
        "parameters": [
          {
            "description": "The ID of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List group clusters",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Cluster"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "summary": "List group clusters",
        "tags": [
          "clusters"
        ]
      }
    },
    "/api/v4/groups/{id}/clusters/user": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 12.1. Adds an existing Kubernetes cluster to the group.",
        "operationId": "groups_clusters/postApiV4GroupsIdClustersUser",
        "parameters": [
          {
            "description": "The ID of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4GroupsIdClustersUser",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4GroupsIdClustersUser"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add existing cluster to group",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ClusterGroup"
            }
          },
          "400": {
            "description": "Validation error"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Add existing cluster to group",
        "tags": [
          "clusters"
        ]
      }
    },
    "/api/v4/groups/{id}/clusters/{cluster_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 12.1. Deletes an existing group cluster. Does not remove existing resources within the connected Kubernetes cluster.",
        "operationId": "groups_clusters/deleteApiV4GroupsIdClustersClusterId",
        "parameters": [
          {
            "description": "The ID of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Cluster ID",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete group cluster",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ClusterGroup"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Delete group cluster",
        "tags": [
          "clusters"
        ]
      },
      "get": {
        "description": "This feature was introduced in GitLab 12.1. Gets a single group cluster.",
        "operationId": "groups_clusters/getApiV4GroupsIdClustersClusterId",
        "parameters": [
          {
            "description": "The ID of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The cluster ID",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single group cluster",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ClusterGroup"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get a single group cluster",
        "tags": [
          "clusters"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 12.1. Updates an existing group cluster.",
        "operationId": "groups_clusters/putApiV4GroupsIdClustersClusterId",
        "parameters": [
          {
            "description": "The ID of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The cluster ID",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdClustersClusterId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdClustersClusterId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Edit group cluster",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ClusterGroup"
            }
          },
          "400": {
            "description": "Validation error"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Edit group cluster",
        "tags": [
          "clusters"
        ]
      }
    },
    "/api/v4/groups/{id}/custom_attributes": {
      "get": {
        "description": "Get all custom attributes on a group",
        "operationId": "groups_custom_attributes/getApiV4GroupsIdCustomAttributes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get all custom attributes on a group",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_CustomAttribute"
            }
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/custom_attributes/{key}": {
      "delete": {
        "description": "Delete a custom attribute on a group",
        "operationId": "groups_custom_attributes/deleteApiV4GroupsIdCustomAttributesKey",
        "parameters": [
          {
            "description": "The key of the custom attribute",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a custom attribute on a group"
          }
        },
        "tags": [
          "groups"
        ]
      },
      "get": {
        "description": "Get a custom attribute on a group",
        "operationId": "groups_custom_attributes/getApiV4GroupsIdCustomAttributesKey",
        "parameters": [
          {
            "description": "The key of the custom attribute",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a custom attribute on a group",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_CustomAttribute"
            }
          }
        },
        "tags": [
          "groups"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set a custom attribute on a group",
        "operationId": "groups_custom_attributes/putApiV4GroupsIdCustomAttributesKey",
        "parameters": [
          {
            "description": "The key of the custom attribute",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdCustomAttributesKey",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdCustomAttributesKey"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Set a custom attribute on a group"
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/dependency_proxy/cache": {
      "delete": {
        "description": "Schedules for deletion the cached manifests and blobs for a group.This endpoint requires the Owner role for the group.",
        "operationId": "groups_dependency_proxy/deleteApiV4GroupsIdDependencyProxyCache",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Purge the dependency proxy for a group"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "Purge the dependency proxy for a group",
        "tags": [
          "dependency_proxy"
        ]
      }
    },
    "/api/v4/groups/{id}/deploy_tokens": {
      "get": {
        "description": "Get a list of a group's deploy tokens. This feature was introduced in GitLab 12.9.",
        "operationId": "groups_deploy_tokens/getApiV4GroupsIdDeployTokens",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Limit by active status",
            "in": "query",
            "name": "active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List group deploy tokens",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_DeployToken"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "List group deploy tokens",
        "tags": [
          "deploy_tokens"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates a new deploy token for a group. This feature was introduced in GitLab 12.9.",
        "operationId": "groups_deploy_tokens/postApiV4GroupsIdDeployTokens",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4GroupsIdDeployTokens",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4GroupsIdDeployTokens"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a group deploy token",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_DeployTokenWithToken"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Create a group deploy token",
        "tags": [
          "deploy_tokens"
        ]
      }
    },
    "/api/v4/groups/{id}/deploy_tokens/{token_id}": {
      "delete": {
        "description": "Removes a deploy token from the group. This feature was introduced in GitLab 12.9.",
        "operationId": "groups_deploy_tokens/deleteApiV4GroupsIdDeployTokensTokenId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the deploy token",
            "in": "path",
            "name": "token_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a group deploy token"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Delete a group deploy token",
        "tags": [
          "deploy_tokens"
        ]
      },
      "get": {
        "description": "Get a single group's deploy token by ID. This feature was introduced in GitLab 14.9. ",
        "operationId": "groups_deploy_tokens/getApiV4GroupsIdDeployTokensTokenId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the deploy token",
            "in": "path",
            "name": "token_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a group deploy token",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_DeployToken"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get a group deploy token",
        "tags": [
          "deploy_tokens"
        ]
      }
    },
    "/api/v4/groups/{id}/descendant_groups": {
      "get": {
        "description": "Get a list of descendant groups of this group.",
        "operationId": "groups_descendant_groups/getApiV4GroupsIdDescendantGroups",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include project statistics",
            "in": "query",
            "name": "statistics",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Array of group ids to exclude from list",
            "in": "query",
            "name": "skip_groups",
            "required": false,
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Show all group that you have access to",
            "in": "query",
            "name": "all_available",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "enum": [
                "private",
                "internal",
                "public"
              ],
              "type": "string"
            }
          },
          {
            "description": "Search for a specific group",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit by owned by authenticated user",
            "in": "query",
            "name": "owned",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Order by name, path, id or similarity if searching",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "name",
              "enum": [
                "name",
                "path",
                "id",
                "similarity"
              ],
              "type": "string"
            }
          },
          {
            "description": "Sort by asc (ascending) or desc (descending)",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Minimum access level of authenticated user",
            "in": "query",
            "name": "min_access_level",
            "required": false,
            "schema": {
              "enum": [
                10,
                15,
                20,
                30,
                40,
                50
              ],
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Only include top-level groups",
            "in": "query",
            "name": "top_level_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter by repository storage used by the group",
            "in": "query",
            "name": "repository_storage",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Date when the group was marked for deletion",
            "in": "query",
            "name": "marked_for_deletion_on",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Include custom attributes in the response",
            "in": "query",
            "name": "with_custom_attributes",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of descendant groups of this group.",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Group"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/epics/{epic_iid}/award_emoji": {
      "get": {
        "description": "Get a list of all emoji reactions for a specified awardable. This feature was introduced in 8.9",
        "operationId": "groups_epics/getApiV4GroupsIdEpicsEpicIidAwardEmoji",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID (`iid` for merge requests/issues/epics, `id` for snippets) of an awardable.",
            "in": "path",
            "name": "epic_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List an awardable's emoji reactions for groups",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_AwardEmoji"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "List an awardable's emoji reactions for groups",
        "tags": [
          "award_emoji"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Add an emoji reaction on the specified awardable. This feature was introduced in 8.9",
        "operationId": "groups_epics/postApiV4GroupsIdEpicsEpicIidAwardEmoji",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "epic_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4GroupsIdEpicsEpicIidAwardEmoji",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4GroupsIdEpicsEpicIidAwardEmoji"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add a new emoji reaction",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AwardEmoji"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Add a new emoji reaction",
        "tags": [
          "award_emoji"
        ]
      }
    },
    "/api/v4/groups/{id}/epics/{epic_iid}/award_emoji/{award_id}": {
      "delete": {
        "description": "Only an administrator or the author of the reaction can delete an emoji reaction. This feature was introduced in 8.9",
        "operationId": "groups_epics/deleteApiV4GroupsIdEpicsEpicIidAwardEmojiAwardId",
        "parameters": [
          {
            "description": "ID of an emoji reaction.",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "epic_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete an emoji reaction"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Delete an emoji reaction",
        "tags": [
          "award_emoji"
        ]
      },
      "get": {
        "description": "Get a single emoji reaction from an issue, snippet, or merge request. This feature was introduced in 8.9",
        "operationId": "groups_epics/getApiV4GroupsIdEpicsEpicIidAwardEmojiAwardId",
        "parameters": [
          {
            "description": "ID of the emoji reaction.",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "epic_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single emoji reaction",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AwardEmoji"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get a single emoji reaction",
        "tags": [
          "award_emoji"
        ]
      }
    },
    "/api/v4/groups/{id}/epics/{epic_iid}/notes/{note_id}/award_emoji": {
      "get": {
        "description": "Get a list of all emoji reactions for a specified awardable. This feature was introduced in 8.9",
        "operationId": "groups_epics/getApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmoji",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "epic_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List an awardable's emoji reactions for groups",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_AwardEmoji"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "List an awardable's emoji reactions for groups",
        "tags": [
          "award_emoji"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Add an emoji reaction on the specified awardable. This feature was introduced in 8.9",
        "operationId": "groups_epics/postApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmoji",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "epic_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmoji",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmoji"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add a new emoji reaction",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AwardEmoji"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Add a new emoji reaction",
        "tags": [
          "award_emoji"
        ]
      }
    },
    "/api/v4/groups/{id}/epics/{epic_iid}/notes/{note_id}/award_emoji/{award_id}": {
      "delete": {
        "description": "Only an administrator or the author of the reaction can delete an emoji reaction. This feature was introduced in 8.9",
        "operationId": "groups_epics/deleteApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "ID of an emoji reaction.",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "epic_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete an emoji reaction"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Delete an emoji reaction",
        "tags": [
          "award_emoji"
        ]
      },
      "get": {
        "description": "Get a single emoji reaction from an issue, snippet, or merge request. This feature was introduced in 8.9",
        "operationId": "groups_epics/getApiV4GroupsIdEpicsEpicIidNotesNoteIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "ID of the emoji reaction.",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "epic_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single emoji reaction",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AwardEmoji"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get a single emoji reaction",
        "tags": [
          "award_emoji"
        ]
      }
    },
    "/api/v4/groups/{id}/export": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 12.5.",
        "operationId": "groups_export/postApiV4GroupsIdExport",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Start export"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "429": {
            "description": "Too many requests"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "summary": "Start export",
        "tags": [
          "group_export"
        ]
      }
    },
    "/api/v4/groups/{id}/export/download": {
      "get": {
        "description": "This feature was introduced in GitLab 12.5.",
        "operationId": "groups_export/getApiV4GroupsIdExportDownload",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/octet-stream",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download export"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "summary": "Download export",
        "tags": [
          "group_export"
        ]
      }
    },
    "/api/v4/groups/{id}/export_relations": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 13.12",
        "operationId": "groups_export_relations/postApiV4GroupsIdExportRelations",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4GroupsIdExportRelations",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4GroupsIdExportRelations"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Start relations export"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "summary": "Start relations export",
        "tags": [
          "group_export"
        ]
      }
    },
    "/api/v4/groups/{id}/export_relations/download": {
      "get": {
        "description": "This feature was introduced in GitLab 13.12",
        "operationId": "groups_export_relations/getApiV4GroupsIdExportRelationsDownload",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Group relation name",
            "in": "query",
            "name": "relation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether to download in batches",
            "in": "query",
            "name": "batched",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Batch number to download",
            "in": "query",
            "name": "batch_number",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/octet-stream",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download relations export"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "summary": "Download relations export",
        "tags": [
          "group_export"
        ]
      }
    },
    "/api/v4/groups/{id}/export_relations/status": {
      "get": {
        "description": "This feature was introduced in GitLab 13.12",
        "operationId": "groups_export_relations/getApiV4GroupsIdExportRelationsStatus",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Group relation name",
            "in": "query",
            "name": "relation",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Relations export status",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_BulkImports_ExportStatus"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "summary": "Relations export status",
        "tags": [
          "group_export"
        ]
      }
    },
    "/api/v4/groups/{id}/groups/shared": {
      "get": {
        "description": "Get a list of shared groups this group was invited to",
        "operationId": "groups_groups/getApiV4GroupsIdGroupsShared",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of group ids to exclude from list",
            "in": "query",
            "name": "skip_groups",
            "required": false,
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "enum": [
                "private",
                "internal",
                "public"
              ],
              "type": "string"
            }
          },
          {
            "description": "Search for a specific group",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Minimum access level of authenticated user",
            "in": "query",
            "name": "min_access_level",
            "required": false,
            "schema": {
              "enum": [
                10,
                15,
                20,
                30,
                40,
                50
              ],
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Order by name, path, id or similarity if searching",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "name",
              "enum": [
                "name",
                "path",
                "id",
                "similarity"
              ],
              "type": "string"
            }
          },
          {
            "description": "Sort by asc (ascending) or desc (descending)",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Include custom attributes in the response",
            "in": "query",
            "name": "with_custom_attributes",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of shared groups this group was invited to",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Group"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations": {
      "get": {
        "description": "Get a list of all active integrations.",
        "operationId": "groups_integrations/getApiV4GroupsIdIntegrations",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List all active integrations",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "List all active integrations",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/apple-app-store": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Apple App Store integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsAppleAppStore",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsAppleAppStore",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsAppleAppStore"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Apple App Store integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Apple App Store integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/asana": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Asana integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsAsana",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsAsana",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsAsana"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Asana integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Asana integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/assembla": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Assembla integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsAssembla",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsAssembla",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsAssembla"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Assembla integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Assembla integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/bamboo": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Bamboo integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsBamboo",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsBamboo",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsBamboo"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Bamboo integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Bamboo integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/bugzilla": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Bugzilla integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsBugzilla",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsBugzilla",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsBugzilla"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Bugzilla integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Bugzilla integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/buildkite": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Buildkite integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsBuildkite",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsBuildkite",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsBuildkite"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Buildkite integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Buildkite integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/campfire": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Campfire integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsCampfire",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsCampfire",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsCampfire"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Campfire integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Campfire integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/clickup": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Clickup integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsClickup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsClickup",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsClickup"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Clickup integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Clickup integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/confluence": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Confluence integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsConfluence",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsConfluence",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsConfluence"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Confluence integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Confluence integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/custom-issue-tracker": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Custom Issue Tracker integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsCustomIssueTracker",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsCustomIssueTracker",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsCustomIssueTracker"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Custom Issue Tracker integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Custom Issue Tracker integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/datadog": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Datadog integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsDatadog",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsDatadog",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsDatadog"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Datadog integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Datadog integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/diffblue-cover": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Diffblue Cover integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsDiffblueCover",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsDiffblueCover",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsDiffblueCover"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Diffblue Cover integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Diffblue Cover integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/discord": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Discord integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsDiscord",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsDiscord",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsDiscord"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Discord integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Discord integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/drone-ci": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Drone Ci integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsDroneCi",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsDroneCi",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsDroneCi"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Drone Ci integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Drone Ci integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/emails-on-push": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Emails On Push integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsEmailsOnPush",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsEmailsOnPush",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsEmailsOnPush"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Emails On Push integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Emails On Push integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/ewm": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Ewm integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsEwm",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsEwm",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsEwm"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Ewm integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Ewm integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/external-wiki": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set External Wiki integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsExternalWiki",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsExternalWiki",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsExternalWiki"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit External Wiki integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit External Wiki integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/git-guardian": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Git Guardian integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsGitGuardian",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsGitGuardian",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsGitGuardian"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Git Guardian integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Git Guardian integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/github": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Github integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsGithub",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsGithub",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsGithub"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Github integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Github integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/gitlab-slack-application": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Gitlab Slack Application integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsGitlabSlackApplication",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsGitlabSlackApplication",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsGitlabSlackApplication"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Gitlab Slack Application integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Gitlab Slack Application integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/google-cloud-platform-artifact-registry": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Google Cloud Platform Artifact Registry integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistry",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistry",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsGoogleCloudPlatformArtifactRegistry"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Google Cloud Platform Artifact Registry integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Google Cloud Platform Artifact Registry integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/google-cloud-platform-workload-identity-federation": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Google Cloud Platform Workload Identity Federation integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederation",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederation"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Google Cloud Platform Workload Identity Federation integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Google Cloud Platform Workload Identity Federation integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/google-play": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Google Play integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsGooglePlay",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsGooglePlay",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsGooglePlay"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Google Play integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Google Play integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/hangouts-chat": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Hangouts Chat integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsHangoutsChat",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsHangoutsChat",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsHangoutsChat"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Hangouts Chat integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Hangouts Chat integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/harbor": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Harbor integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsHarbor",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsHarbor",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsHarbor"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Harbor integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Harbor integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/irker": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Irker integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsIrker",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsIrker",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsIrker"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Irker integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Irker integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/jenkins": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Jenkins integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsJenkins",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsJenkins",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsJenkins"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Jenkins integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Jenkins integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/jira": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Jira integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsJira",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsJira",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsJira"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Jira integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Jira integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/jira-cloud-app": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Jira Cloud App integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsJiraCloudApp",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsJiraCloudApp",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsJiraCloudApp"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Jira Cloud App integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Jira Cloud App integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/matrix": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Matrix integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsMatrix",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsMatrix",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsMatrix"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Matrix integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Matrix integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/mattermost": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Mattermost integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsMattermost",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsMattermost",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsMattermost"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Mattermost integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Mattermost integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/mattermost-slash-commands": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Mattermost Slash Commands integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsMattermostSlashCommands",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsMattermostSlashCommands",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsMattermostSlashCommands"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Mattermost Slash Commands integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Mattermost Slash Commands integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/microsoft-teams": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Microsoft Teams integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsMicrosoftTeams",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsMicrosoftTeams",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsMicrosoftTeams"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Microsoft Teams integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Microsoft Teams integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/mock-ci": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Mock Ci integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsMockCi",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsMockCi",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsMockCi"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Mock Ci integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Mock Ci integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/mock-monitoring": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Mock Monitoring integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsMockMonitoring",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsMockMonitoring",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsMockMonitoring"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Mock Monitoring integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Mock Monitoring integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/packagist": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Packagist integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsPackagist",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsPackagist",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsPackagist"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Packagist integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Packagist integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/phorge": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Phorge integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsPhorge",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsPhorge",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsPhorge"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Phorge integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Phorge integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/pipelines-email": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Pipelines Email integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsPipelinesEmail",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsPipelinesEmail",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsPipelinesEmail"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Pipelines Email integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Pipelines Email integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/pivotaltracker": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Pivotaltracker integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsPivotaltracker",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsPivotaltracker",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsPivotaltracker"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Pivotaltracker integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Pivotaltracker integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/pumble": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Pumble integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsPumble",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsPumble",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsPumble"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Pumble integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Pumble integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/pushover": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Pushover integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsPushover",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsPushover",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsPushover"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Pushover integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Pushover integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/redmine": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Redmine integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsRedmine",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsRedmine",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsRedmine"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Redmine integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Redmine integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/slack": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Slack integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsSlack",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsSlack",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsSlack"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Slack integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Slack integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/slack-slash-commands": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Slack Slash Commands integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsSlackSlashCommands",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsSlackSlashCommands",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsSlackSlashCommands"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Slack Slash Commands integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Slack Slash Commands integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/squash-tm": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Squash Tm integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsSquashTm",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsSquashTm",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsSquashTm"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Squash Tm integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Squash Tm integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/teamcity": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Teamcity integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsTeamcity",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsTeamcity",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsTeamcity"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Teamcity integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Teamcity integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/telegram": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Telegram integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsTelegram",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsTelegram",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsTelegram"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Telegram integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Telegram integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/unify-circuit": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Unify Circuit integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsUnifyCircuit",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsUnifyCircuit",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsUnifyCircuit"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Unify Circuit integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Unify Circuit integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/webex-teams": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Webex Teams integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsWebexTeams",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsWebexTeams",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsWebexTeams"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Webex Teams integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Webex Teams integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/youtrack": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Youtrack integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsYoutrack",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsYoutrack",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsYoutrack"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Youtrack integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Youtrack integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/zentao": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Zentao integration.",
        "operationId": "groups_integrations/putApiV4GroupsIdIntegrationsZentao",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdIntegrationsZentao",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdIntegrationsZentao"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Zentao integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Zentao integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/integrations/{slug}": {
      "delete": {
        "description": "Disable the integration. Integration settings are preserved.",
        "operationId": "groups_integrations/deleteApiV4GroupsIdIntegrationsSlug",
        "parameters": [
          {
            "description": "The name of the integration",
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "enum": [
                "apple-app-store",
                "asana",
                "assembla",
                "bamboo",
                "bugzilla",
                "buildkite",
                "campfire",
                "confluence",
                "custom-issue-tracker",
                "datadog",
                "diffblue-cover",
                "discord",
                "drone-ci",
                "emails-on-push",
                "external-wiki",
                "gitlab-slack-application",
                "google-play",
                "hangouts-chat",
                "harbor",
                "irker",
                "jenkins",
                "jira",
                "jira-cloud-app",
                "matrix",
                "mattermost-slash-commands",
                "slack-slash-commands",
                "packagist",
                "phorge",
                "pipelines-email",
                "pivotaltracker",
                "pumble",
                "pushover",
                "redmine",
                "ewm",
                "youtrack",
                "clickup",
                "slack",
                "microsoft-teams",
                "mattermost",
                "teamcity",
                "telegram",
                "unify-circuit",
                "webex-teams",
                "zentao",
                "squash-tm",
                "github",
                "git-guardian",
                "google-cloud-platform-artifact-registry",
                "google-cloud-platform-workload-identity-federation",
                "mock-ci",
                "mock-monitoring"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Disable an integration"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Disable an integration",
        "tags": [
          "integrations"
        ]
      },
      "get": {
        "description": "Get the integration settings.",
        "operationId": "groups_integrations/getApiV4GroupsIdIntegrationsSlug",
        "parameters": [
          {
            "description": "The name of the integration",
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "enum": [
                "apple-app-store",
                "asana",
                "assembla",
                "bamboo",
                "bugzilla",
                "buildkite",
                "campfire",
                "confluence",
                "custom-issue-tracker",
                "datadog",
                "diffblue-cover",
                "discord",
                "drone-ci",
                "emails-on-push",
                "external-wiki",
                "gitlab-slack-application",
                "google-play",
                "hangouts-chat",
                "harbor",
                "irker",
                "jenkins",
                "jira",
                "jira-cloud-app",
                "matrix",
                "mattermost-slash-commands",
                "slack-slash-commands",
                "packagist",
                "phorge",
                "pipelines-email",
                "pivotaltracker",
                "pumble",
                "pushover",
                "redmine",
                "ewm",
                "youtrack",
                "clickup",
                "slack",
                "microsoft-teams",
                "mattermost",
                "teamcity",
                "telegram",
                "unify-circuit",
                "webex-teams",
                "zentao",
                "squash-tm",
                "github",
                "git-guardian",
                "google-cloud-platform-artifact-registry",
                "google-cloud-platform-workload-identity-federation",
                "mock-ci",
                "mock-monitoring"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get an integration settings",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Integration"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get an integration settings",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/groups/{id}/invitations": {
      "get": {
        "description": "This feature was introduced in GitLab 13.6",
        "operationId": "groups_invitations/getApiV4GroupsIdInvitations",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "A query string to search for members",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of group or project invitations viewable by the authenticated user",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Invitation"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get a list of group or project invitations viewable by the authenticated user",
        "tags": [
          "invitations"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 13.6",
        "operationId": "groups_invitations/postApiV4GroupsIdInvitations",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4GroupsIdInvitations",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4GroupsIdInvitations"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Invite non-members by email address to a group or project.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Invitation"
            }
          }
        },
        "summary": "Invite non-members by email address to a group or project.",
        "tags": [
          "invitations"
        ]
      }
    },
    "/api/v4/groups/{id}/invitations/{email}": {
      "delete": {
        "description": "Removes an invitation from a group or project.",
        "operationId": "groups_invitations/deleteApiV4GroupsIdInvitationsEmail",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The email address of the invitation",
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Removes an invitation from a group or project."
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Could not delete invitation"
          }
        },
        "tags": [
          "invitations"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates a group or project invitation.",
        "operationId": "groups_invitations/putApiV4GroupsIdInvitationsEmail",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The email address of the invitation",
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdInvitationsEmail",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdInvitationsEmail"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Updates a group or project invitation.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Invitation"
            }
          }
        },
        "tags": [
          "invitations"
        ]
      }
    },
    "/api/v4/groups/{id}/invited_groups": {
      "get": {
        "description": "Get a list of invited groups in this group",
        "operationId": "groups_invited_groups/getApiV4GroupsIdInvitedGroups",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include group relations",
            "in": "query",
            "name": "relation",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "direct",
                  "inherited"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Search for a specific group",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Minimum access level of authenticated user",
            "in": "query",
            "name": "min_access_level",
            "required": false,
            "schema": {
              "enum": [
                10,
                15,
                20,
                30,
                40,
                50
              ],
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Include custom attributes in the response",
            "in": "query",
            "name": "with_custom_attributes",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of invited groups in this group",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Group"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/ldap_sync": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Sync a group with LDAP.",
        "operationId": "groups_ldap_sync/postApiV4GroupsIdLdapSync",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Sync a group with LDAP."
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/members": {
      "get": {
        "description": "Gets a list of group or project members viewable by the authenticated user.",
        "operationId": "groups_members/getApiV4GroupsIdMembers",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A query string to search for members",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of user ids to look up for membership",
            "in": "query",
            "name": "user_ids",
            "required": false,
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Array of user ids to be skipped for membership",
            "in": "query",
            "name": "skip_users",
            "required": false,
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Show seat information for members",
            "in": "query",
            "name": "show_seat_info",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "List only members with linked SAML identity",
            "in": "query",
            "name": "with_saml_identity",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets a list of group or project members viewable by the authenticated user.",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Member"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Adds a member to a group or project.",
        "operationId": "groups_members/postApiV4GroupsIdMembers",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4GroupsIdMembers",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4GroupsIdMembers"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Adds a member to a group or project.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Member"
            }
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/api/v4/groups/{id}/members/all": {
      "get": {
        "description": "Gets a list of group or project members viewable by the authenticated user, including those who gained membership through ancestor group.",
        "operationId": "groups_members/getApiV4GroupsIdMembersAll",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A query string to search for members",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of user ids to look up for membership",
            "in": "query",
            "name": "user_ids",
            "required": false,
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Show seat information for members",
            "in": "query",
            "name": "show_seat_info",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter results by member state",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "enum": [
                "awaiting",
                "active"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets a list of group or project members viewable by the authenticated user, including those who gained membership through ancestor group.",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Member"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/api/v4/groups/{id}/members/all/{user_id}": {
      "get": {
        "description": "Gets a member of a group or project, including those who gained membership through ancestor group",
        "operationId": "groups_members/getApiV4GroupsIdMembersAllUserId",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API_Entities_Member"
                }
              }
            },
            "description": "Gets a member of a group or project, including those who gained membership through ancestor group"
          },
          "404": {}
        },
        "tags": [
          "members"
        ]
      }
    },
    "/api/v4/groups/{id}/members/approve_all": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Approves all pending members",
        "operationId": "groups_members/postApiV4GroupsIdMembersApproveAll",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Approves all pending members"
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/members/{member_id}/approve": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Approves a pending member",
        "operationId": "groups_members/putApiV4GroupsIdMembersMemberIdApprove",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the member requiring approval",
            "in": "path",
            "name": "member_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Approves a pending member"
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/members/{user_id}": {
      "delete": {
        "description": "Removes a user from a group or project.",
        "operationId": "groups_members/deleteApiV4GroupsIdMembersUserId",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Flag indicating if the deletion of direct memberships of the removed member in subgroups and projects should be skipped",
            "in": "query",
            "name": "skip_subresources",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Flag indicating if the removed member should be unassigned from any issues or merge requests within given group or project",
            "in": "query",
            "name": "unassign_issuables",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Removes a user from a group or project."
          }
        },
        "tags": [
          "members"
        ]
      },
      "get": {
        "description": "Gets a member of a group or project.",
        "operationId": "groups_members/getApiV4GroupsIdMembersUserId",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets a member of a group or project.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Member"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates a member of a group or project.",
        "operationId": "groups_members/putApiV4GroupsIdMembersUserId",
        "parameters": [
          {
            "description": "The group ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the new member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdMembersUserId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdMembersUserId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Updates a member of a group or project.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Member"
            }
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/api/v4/groups/{id}/members/{user_id}/override": {
      "delete": {
        "description": "Remove an LDAP group member access level override.",
        "operationId": "groups_members/deleteApiV4GroupsIdMembersUserIdOverride",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Remove an LDAP group member access level override.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Member"
            }
          }
        },
        "tags": [
          "groups"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Overrides the access level of an LDAP group member.",
        "operationId": "groups_members/postApiV4GroupsIdMembersUserIdOverride",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Overrides the access level of an LDAP group member.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Member"
            }
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/members/{user_id}/state": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Changes the state of the memberships of a user in the group",
        "operationId": "groups_members/putApiV4GroupsIdMembersUserIdState",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdMembersUserIdState",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdMembersUserIdState"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Changes the state of the memberships of a user in the group"
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/merge_requests": {
      "get": {
        "description": "Get all merge requests for this group and its subgroups.",
        "operationId": "groups_merge_requests/getApiV4GroupsIdMergeRequests",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group owned by the authenticated user.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests created by the given user `id`. Mutually exclusive with `author_username`. Combine with `scope=all` or `scope=assigned_to_me`.",
            "in": "query",
            "name": "author_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
            "in": "query",
            "name": "author_username",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests assigned to the given user `id`. `None` returns unassigned merge requests. `Any` returns merge requests with an assignee.",
            "in": "query",
            "name": "assignee_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
            "in": "query",
            "name": "assignee_username",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Returns merge requests which have the user as a reviewer with the given `username`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_id`. Introduced in GitLab 13.8.",
            "in": "query",
            "name": "reviewer_username",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests matching a comma-separated list of labels. `None` lists all merge requests with no labels. `Any` lists all merge requests with at least one label. Predefined names are case-insensitive.",
            "in": "query",
            "name": "labels",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Returns merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.",
            "in": "query",
            "name": "milestone",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests reacted by the authenticated user by the given `emoji`. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.",
            "in": "query",
            "name": "my_reaction_emoji",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests which have the user as a reviewer with the given user `id`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_username`.",
            "in": "query",
            "name": "reviewer_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns `all` merge requests or just those that are `opened`, `closed`, `locked`, or `merged`.",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "default": "all",
              "enum": [
                "opened",
                "closed",
                "locked",
                "merged",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests ordered by `created_at`, `label_priority`, `milestone_due`, `popularity`, `priority`, `title`, `updated_at` or `merged_at` fields. Introduced in GitLab 14.8.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "created_at",
                "label_priority",
                "milestone_due",
                "popularity",
                "priority",
                "title",
                "updated_at",
                "merged_at"
              ],
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests sorted in `asc` or `desc` order.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "If `true`, response returns more details for each label in labels field: `:name`,`:color`, `:description`, `:description_html`, `:text_color`",
            "in": "query",
            "name": "with_labels_details",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "If `true`, this projection requests (but does not guarantee) that the `merge_status` field be recalculated asynchronously. Introduced in GitLab 13.0.",
            "in": "query",
            "name": "with_merge_status_recheck",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Returns merge requests created on or after the given time. Expected in ISO 8601 format.",
            "in": "query",
            "name": "created_after",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests created on or before the given time. Expected in ISO 8601 format.",
            "in": "query",
            "name": "created_before",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests updated on or after the given time. Expected in ISO 8601 format.",
            "in": "query",
            "name": "updated_after",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests updated on or before the given time. Expected in ISO 8601 format.",
            "in": "query",
            "name": "updated_before",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "If simple, returns the `iid`, URL, title, description, and basic state of merge request",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": {
              "enum": [
                "simple"
              ],
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests for the given scope: `created_by_me`, `assigned_to_me` or `all`",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "created-by-me",
                "assigned-to-me",
                "created_by_me",
                "assigned_to_me",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests with the given source branch",
            "in": "query",
            "name": "source_branch",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests with the given source project id",
            "in": "query",
            "name": "source_project_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns merge requests with the given target branch",
            "in": "query",
            "name": "target_branch",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search merge requests against their `title` and `description`.",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Modify the scope of the search attribute. `title`, `description`, or a string joining them with comma.",
            "in": "query",
            "name": "in",
            "required": false,
            "schema": {
              "example": "title,description",
              "type": "string"
            }
          },
          {
            "description": "Filter merge requests against their `wip` status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.",
            "in": "query",
            "name": "wip",
            "required": false,
            "schema": {
              "enum": [
                "yes",
                "no"
              ],
              "type": "string"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests created by the given user `id`. Mutually exclusive with `author_username`. Combine with `scope=all` or `scope=assigned_to_me`.",
            "in": "query",
            "name": "not[author_id]",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
            "in": "query",
            "name": "not[author_username]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests assigned to the given user `id`. `None` returns unassigned merge requests. `Any` returns merge requests with an assignee.",
            "in": "query",
            "name": "not[assignee_id]",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
            "in": "query",
            "name": "not[assignee_username]",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests which have the user as a reviewer with the given `username`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_id`. Introduced in GitLab 13.8.",
            "in": "query",
            "name": "not[reviewer_username]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests matching a comma-separated list of labels. `None` lists all merge requests with no labels. `Any` lists all merge requests with at least one label. Predefined names are case-insensitive.",
            "in": "query",
            "name": "not[labels]",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.",
            "in": "query",
            "name": "not[milestone]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests reacted by the authenticated user by the given `emoji`. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.",
            "in": "query",
            "name": "not[my_reaction_emoji]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests which have the user as a reviewer with the given user `id`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_username`.",
            "in": "query",
            "name": "not[reviewer_id]",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns merge requests deployed before the given date/time. Expected in ISO 8601 format.",
            "in": "query",
            "name": "deployed_before",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests deployed after the given date/time. Expected in ISO 8601 format",
            "in": "query",
            "name": "deployed_after",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests deployed to the given environment",
            "in": "query",
            "name": "environment",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "type": "string"
            }
          },
          {
            "description": "Filters merge requests by their `approved` status. `yes` returns only approved merge requests. `no` returns only non-approved merge requests.",
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "enum": [
                "yes",
                "no"
              ],
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests which have been merged by the user with the given user `id`. Mutually exclusive with `merge_user_username`.",
            "in": "query",
            "name": "merge_user_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns merge requests which have been merged by the user with the given `username`. Mutually exclusive with `merge_user_id`.",
            "in": "query",
            "name": "merge_user_username",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return merge requests which have specified the users with the given IDs as an individual approver",
            "in": "query",
            "name": "approver_ids",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return merge requests which have been approved by the specified users with the given IDs",
            "in": "query",
            "name": "approved_by_ids",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return merge requests which have been approved by the specified users with the given\n            usernames",
            "in": "query",
            "name": "approved_by_usernames",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns merge requests from non archived projects only.",
            "in": "query",
            "name": "non_archived",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List group merge requests",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_MergeRequestBasic"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "List group merge requests",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/groups/{id}/packages": {
      "get": {
        "description": "Get a list of project packages at the group level. This feature was introduced in GitLab 12.5",
        "operationId": "groups_packages/getApiV4GroupsIdPackages",
        "parameters": [
          {
            "description": "ID or URL-encoded path of the group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Determines if subgroups should be excluded",
            "in": "query",
            "name": "exclude_subgroups",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return packages ordered by `created_at`, `name`, `version` or `type` fields.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "created_at",
                "name",
                "version",
                "type",
                "project_path"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return packages sorted in `asc` or `desc` order.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return packages of a certain type",
            "in": "query",
            "name": "package_type",
            "required": false,
            "schema": {
              "enum": [
                "maven",
                "npm",
                "conan",
                "nuget",
                "pypi",
                "composer",
                "generic",
                "golang",
                "debian",
                "rubygems",
                "helm",
                "terraform_module",
                "rpm",
                "ml_model"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return packages with this name",
            "in": "query",
            "name": "package_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return packages with this version",
            "in": "query",
            "name": "package_version",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns packages without a version",
            "in": "query",
            "name": "include_versionless",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Return packages with specified status",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "default",
                "hidden",
                "processing",
                "error",
                "pending_destruction",
                "deprecated"
              ],
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List packages within a group",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Package"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Group Not Found"
          }
        },
        "summary": "List packages within a group",
        "tags": [
          "group_packages"
        ]
      }
    },
    "/api/v4/groups/{id}/pending_members": {
      "get": {
        "description": "Lists all pending members for a group including invited users",
        "operationId": "groups_pending_members/getApiV4GroupsIdPendingMembers",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Lists all pending members for a group including invited users"
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/projects": {
      "get": {
        "description": "Get a list of projects in this group.",
        "operationId": "groups_projects/getApiV4GroupsIdProjects",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit by archived status",
            "in": "query",
            "name": "archived",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "enum": [
                "private",
                "internal",
                "public"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return list of authorized projects matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return projects ordered by field",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at",
                "similarity",
                "star_count"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return only the ID, URL, name, and path of each project",
            "in": "query",
            "name": "simple",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by owned by authenticated user",
            "in": "query",
            "name": "owned",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by starred status",
            "in": "query",
            "name": "starred",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by enabled issues feature",
            "in": "query",
            "name": "with_issues_enabled",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by enabled merge requests feature",
            "in": "query",
            "name": "with_merge_requests_enabled",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include projects shared to this group",
            "in": "query",
            "name": "with_shared",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "Includes projects in subgroups of this group",
            "in": "query",
            "name": "include_subgroups",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Includes projects in ancestors of this group",
            "in": "query",
            "name": "include_ancestor_groups",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by minimum access level of authenticated user on projects",
            "in": "query",
            "name": "min_access_level",
            "required": false,
            "schema": {
              "enum": [
                10,
                15,
                20,
                30,
                40,
                50
              ],
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Include custom attributes in the response",
            "in": "query",
            "name": "with_custom_attributes",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Return only projects having security report artifacts present",
            "in": "query",
            "name": "with_security_reports",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of projects in this group.",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Project"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/projects/shared": {
      "get": {
        "description": "Get a list of shared projects in this group",
        "operationId": "groups_projects/getApiV4GroupsIdProjectsShared",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit by archived status",
            "in": "query",
            "name": "archived",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "enum": [
                "private",
                "internal",
                "public"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return list of authorized projects matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return projects ordered by field",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at",
                "star_count"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return only the ID, URL, name, and path of each project",
            "in": "query",
            "name": "simple",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by starred status",
            "in": "query",
            "name": "starred",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by enabled issues feature",
            "in": "query",
            "name": "with_issues_enabled",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by enabled merge requests feature",
            "in": "query",
            "name": "with_merge_requests_enabled",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by minimum access level of authenticated user on projects",
            "in": "query",
            "name": "min_access_level",
            "required": false,
            "schema": {
              "enum": [
                10,
                15,
                20,
                30,
                40,
                50
              ],
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Include custom attributes in the response",
            "in": "query",
            "name": "with_custom_attributes",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of shared projects in this group",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Project"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/projects/{project_id}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Transfer a project to the group namespace. Available only for admin.",
        "operationId": "groups_projects/postApiV4GroupsIdProjectsProjectId",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID or path of the project",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Transfer a project to the group namespace. Available only for admin.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_GroupDetail"
            }
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/provisioned_users": {
      "get": {
        "description": "Get a list of users provisioned by the group",
        "operationId": "groups_provisioned_users/getApiV4GroupsIdProvisionedUsers",
        "parameters": [
          {
            "description": "Return a single user with a specific username",
            "in": "query",
            "name": "username",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search users by name, email or username",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return only active users",
            "in": "query",
            "name": "active",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Return only blocked users",
            "in": "query",
            "name": "blocked",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Return users created after the specified time",
            "in": "query",
            "name": "created_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Return users created before the specified time",
            "in": "query",
            "name": "created_before",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of users provisioned by the group",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserPublic"
            }
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/registry/repositories": {
      "get": {
        "description": "Get a list of registry repositories in a group. This feature was introduced in GitLab 12.2.",
        "operationId": "groups_registry/getApiV4GroupsIdRegistryRepositories",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group accessible by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List registry repositories within a group",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_ContainerRegistry_Repository"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Group Not Found"
          }
        },
        "summary": "List registry repositories within a group",
        "tags": [
          "container_registry"
        ]
      }
    },
    "/api/v4/groups/{id}/releases": {
      "get": {
        "description": "Returns a list of group releases.",
        "operationId": "groups_releases/getApiV4GroupsIdReleases",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the group owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The direction of the order. Either `desc` (default) for descending order or `asc` for ascending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return only limited fields for each release",
            "in": "query",
            "name": "simple",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List group releases",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Release"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "List group releases",
        "tags": [
          "releases"
        ]
      }
    },
    "/api/v4/groups/{id}/restore": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Restore a group.",
        "operationId": "groups_restore/postApiV4GroupsIdRestore",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Restore a group."
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/runners": {
      "get": {
        "description": "List all runners available in the group as well as its ancestor groups, including any allowed shared runners.",
        "operationId": "groups_runners/getApiV4GroupsIdRunners",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The type of runners to return",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": [
                "instance_type",
                "group_type",
                "project_type"
              ],
              "type": "string"
            }
          },
          {
            "description": "Whether to include only runners that are accepting or ignoring new jobs",
            "in": "query",
            "name": "paused",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The status of runners to return",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "active",
                "paused",
                "online",
                "offline",
                "never_contacted",
                "stale"
              ],
              "type": "string"
            }
          },
          {
            "description": "A list of runner tags",
            "in": "query",
            "name": "tag_list",
            "required": false,
            "schema": {
              "example": "['macos', 'shell']",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The version prefix of runners to return",
            "in": "query",
            "name": "version_prefix",
            "required": false,
            "schema": {
              "example": "'15.1.' or '16.'",
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get runners available for group",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Runner"
            }
          },
          "400": {
            "description": "Scope contains invalid value"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "summary": "List group's runners",
        "tags": [
          "runners",
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/runners/reset_registration_token": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Reset runner registration token",
        "operationId": "groups_runners/postApiV4GroupsIdRunnersResetRegistrationToken",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Reset runner registration token",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_ResetTokenResult"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Group Not Found"
          }
        },
        "summary": "Reset the runner registration token for a group",
        "tags": [
          "runners",
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/share": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Share a group with a group",
        "operationId": "groups_share/postApiV4GroupsIdShare",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4GroupsIdShare",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4GroupsIdShare"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Share a group with a group",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_GroupDetail"
            }
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/share/{group_id}": {
      "delete": {
        "operationId": "groups_share/deleteApiV4GroupsIdShareGroupId",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the shared group",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "deleted Share"
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/ssh_certificates": {
      "get": {
        "description": "Get a list of ssh certificates created for a group.",
        "operationId": "groups_ssh_certificates/getApiV4GroupsIdSshCertificates",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of ssh certificates created for a group.",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/EE_API_Entities_SshCertificate"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "404 Not Found"
          }
        },
        "summary": "Get a list of Groups::SshCertificate for a Group.",
        "tags": [
          "groups"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a ssh certificate for a group.",
        "operationId": "groups_ssh_certificates/postApiV4GroupsIdSshCertificates",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4GroupsIdSshCertificates",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4GroupsIdSshCertificates"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a ssh certificate for a group.",
            "schema": {
              "$ref": "#/components/schemas/EE_API_Entities_SshCertificate"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Add a Groups::SshCertificate.",
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/ssh_certificates/{ssh_certificates_id}": {
      "delete": {
        "description": "Removes a Groups::SshCertificate",
        "operationId": "groups_ssh_certificates/deleteApiV4GroupsIdSshCertificatesSshCertificatesId",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "ssh_certificates_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Removes an ssh certificate from a group."
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Removes an ssh certificate from a group.",
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/subgroups": {
      "get": {
        "description": "Get a list of subgroups in this group.",
        "operationId": "groups_subgroups/getApiV4GroupsIdSubgroups",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include project statistics",
            "in": "query",
            "name": "statistics",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Array of group ids to exclude from list",
            "in": "query",
            "name": "skip_groups",
            "required": false,
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Show all group that you have access to",
            "in": "query",
            "name": "all_available",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "enum": [
                "private",
                "internal",
                "public"
              ],
              "type": "string"
            }
          },
          {
            "description": "Search for a specific group",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit by owned by authenticated user",
            "in": "query",
            "name": "owned",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Order by name, path, id or similarity if searching",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "name",
              "enum": [
                "name",
                "path",
                "id",
                "similarity"
              ],
              "type": "string"
            }
          },
          {
            "description": "Sort by asc (ascending) or desc (descending)",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Minimum access level of authenticated user",
            "in": "query",
            "name": "min_access_level",
            "required": false,
            "schema": {
              "enum": [
                10,
                15,
                20,
                30,
                40,
                50
              ],
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Only include top-level groups",
            "in": "query",
            "name": "top_level_only",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter by repository storage used by the group",
            "in": "query",
            "name": "repository_storage",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Date when the group was marked for deletion",
            "in": "query",
            "name": "marked_for_deletion_on",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Include custom attributes in the response",
            "in": "query",
            "name": "with_custom_attributes",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of subgroups in this group.",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Group"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/tokens/revoke": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Revoke a token, if it has access to the group or any of its subgroups\nand projects. If the token is revoked, or was already revoked, its\ndetails are returned in the response.\n\nThe following criteria must be met:\n\n- The group must be a top-level group.\n- You must have Owner permission in the group.\n- The token type is one of:\n  - Personal access token\n  - Group access token\n  - Project access token\n  - Group deploy token\n  - User feed token\n\nThis feature is gated by the :group_agnostic_token_revocation feature flag.\n",
        "operationId": "groups_tokens/postApiV4GroupsIdTokensRevoke",
        "parameters": [
          {
            "description": "The ID of a top-level group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4GroupsIdTokensRevoke",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4GroupsIdTokensRevoke"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Revoke a single token"
          }
        },
        "summary": "Revoke a single token",
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/transfer": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Transfer a group to a new parent group or promote a subgroup to a top-level group",
        "operationId": "groups_transfer/postApiV4GroupsIdTransfer",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4GroupsIdTransfer",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4GroupsIdTransfer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Transfer a group to a new parent group or promote a subgroup to a top-level group"
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/transfer_locations": {
      "get": {
        "description": "Get the groups to where the current group can be transferred to",
        "operationId": "groups_transfer_locations/getApiV4GroupsIdTransferLocations",
        "parameters": [
          {
            "description": "The ID of a group",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return list of namespaces matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the groups to where the current group can be transferred to",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Group"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/uploads": {
      "get": {
        "description": "Get the list of uploads of a group",
        "operationId": "groups_uploads/getApiV4GroupsIdUploads",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the list of uploads of a group",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_MarkdownUploadAdmin"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/uploads/{secret}/{filename}": {
      "delete": {
        "description": "Delete a single group upload by secret and filename",
        "operationId": "groups_uploads/deleteApiV4GroupsIdUploadsSecretFilename",
        "parameters": [
          {
            "description": "The 32-character secret of a group upload",
            "in": "path",
            "name": "secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The filename of a group upload",
            "in": "path",
            "name": "filename",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a single group upload by secret and filename"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "groups"
        ]
      },
      "get": {
        "description": "Download a single project upload by secret and filename",
        "operationId": "groups_uploads/getApiV4GroupsIdUploadsSecretFilename",
        "parameters": [
          {
            "description": "The 32-character secret of a group upload",
            "in": "path",
            "name": "secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The filename of a group upload",
            "in": "path",
            "name": "filename",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download a single project upload by secret and filename",
            "schema": {
              "type": "file"
            }
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/uploads/{upload_id}": {
      "delete": {
        "description": "Delete a single group upload",
        "operationId": "groups_uploads/deleteApiV4GroupsIdUploadsUploadId",
        "parameters": [
          {
            "description": "The ID of a group upload",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a single group upload"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "groups"
        ]
      },
      "get": {
        "description": "Download a single group upload by ID",
        "operationId": "groups_uploads/getApiV4GroupsIdUploadsUploadId",
        "parameters": [
          {
            "description": "The ID of a group upload",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download a single group upload by ID",
            "schema": {
              "type": "file"
            }
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/users": {
      "get": {
        "description": "Get a list of users for the group",
        "operationId": "groups_users/getApiV4GroupsIdUsers",
        "parameters": [
          {
            "description": "Search users by name, email or username",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filters only active users",
            "in": "query",
            "name": "active",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Return users with a SAML identity in this group",
            "in": "query",
            "name": "include_saml_users",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Return service accounts owned by this group",
            "in": "query",
            "name": "include_service_accounts",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of users for the group",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserPublic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "404 Not Found"
          }
        },
        "tags": [
          "groups"
        ]
      }
    },
    "/api/v4/groups/{id}/variables": {
      "get": {
        "description": "Get a list of group-level variables",
        "operationId": "groups_variables/getApiV4GroupsIdVariables",
        "parameters": [
          {
            "description": "The ID of a group or URL-encoded path of the group owned by the authenticated\n      user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of group-level variables",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Variable"
            }
          }
        },
        "tags": [
          "ci_variables"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new variable in a group",
        "operationId": "groups_variables/postApiV4GroupsIdVariables",
        "parameters": [
          {
            "description": "The ID of a group or URL-encoded path of the group owned by the authenticated\n      user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4GroupsIdVariables",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4GroupsIdVariables"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a new variable in a group",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Variable"
            }
          },
          "400": {
            "description": "400 Bad Request"
          }
        },
        "tags": [
          "ci_variables"
        ]
      }
    },
    "/api/v4/groups/{id}/variables/{key}": {
      "delete": {
        "description": "Delete an existing variable from a group",
        "operationId": "groups_variables/deleteApiV4GroupsIdVariablesKey",
        "parameters": [
          {
            "description": "The ID of a group or URL-encoded path of the group owned by the authenticated\n      user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The key of a variable",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete an existing variable from a group",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Variable"
            }
          },
          "404": {
            "description": "Group Variable Not Found"
          }
        },
        "tags": [
          "ci_variables"
        ]
      },
      "get": {
        "description": "Get the details of a group’s specific variable",
        "operationId": "groups_variables/getApiV4GroupsIdVariablesKey",
        "parameters": [
          {
            "description": "The ID of a group or URL-encoded path of the group owned by the authenticated\n      user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The key of the variable",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the details of a group’s specific variable",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Variable"
            }
          },
          "404": {
            "description": "Group Variable Not Found"
          }
        },
        "tags": [
          "ci_variables"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update an existing variable from a group",
        "operationId": "groups_variables/putApiV4GroupsIdVariablesKey",
        "parameters": [
          {
            "description": "The ID of a group or URL-encoded path of the group owned by the authenticated\n      user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The key of a variable",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdVariablesKey",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdVariablesKey"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update an existing variable from a group",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Variable"
            }
          },
          "400": {
            "description": "400 Bad Request"
          },
          "404": {
            "description": "Group Variable Not Found"
          }
        },
        "tags": [
          "ci_variables"
        ]
      }
    },
    "/api/v4/groups/{id}/wikis": {
      "get": {
        "description": "Get a list of wiki pages",
        "operationId": "groups_wikis/getApiV4GroupsIdWikis",
        "parameters": [
          {
            "description": "Include pages' content",
            "in": "query",
            "name": "with_content",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of wiki pages",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_WikiPageBasic"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "wikis"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a wiki page",
        "operationId": "groups_wikis/postApiV4GroupsIdWikis",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4GroupsIdWikis",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4GroupsIdWikis"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a wiki page",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_WikiPage"
            }
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "tags": [
          "wikis"
        ]
      }
    },
    "/api/v4/groups/{id}/wikis/attachments": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 11.3.",
        "operationId": "groups_wikis/postApiV4GroupsIdWikisAttachments",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4GroupsIdWikisAttachments",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4GroupsIdWikisAttachments"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Upload an attachment to the wiki repository",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_WikiAttachment"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Upload an attachment to the wiki repository",
        "tags": [
          "wikis"
        ]
      }
    },
    "/api/v4/groups/{id}/wikis/{slug}": {
      "delete": {
        "description": "Delete a wiki page",
        "operationId": "groups_wikis/deleteApiV4GroupsIdWikisSlug",
        "parameters": [
          {
            "description": "The slug of a wiki page",
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a wiki page"
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "wikis"
        ]
      },
      "get": {
        "description": "Get a wiki page",
        "operationId": "groups_wikis/getApiV4GroupsIdWikisSlug",
        "parameters": [
          {
            "description": "The slug of a wiki page",
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The version hash of a wiki page",
            "in": "query",
            "name": "version",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Render content to HTML",
            "in": "query",
            "name": "render_html",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a wiki page",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_WikiPage"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "wikis"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a wiki page",
        "operationId": "groups_wikis/putApiV4GroupsIdWikisSlug",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4GroupsIdWikisSlug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4GroupsIdWikisSlug"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update a wiki page",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_WikiPage"
            }
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "tags": [
          "wikis"
        ]
      }
    },
    "/api/v4/projects/import": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "This feature was introduced in GitLab 10.6.",
        "operationId": "projects/postApiV4ProjectsImport",
        "parameters": [
          {
            "description": "The new project path and name",
            "in": "formData",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The project export file to be imported",
            "in": "formData",
            "name": "file",
            "required": true,
            "schema": {
              "type": "file"
            }
          },
          {
            "description": "The name of the project to be imported. Defaults to the path of the project if not provided.",
            "in": "formData",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID or name of the namespace that the project will be imported into. Defaults to the current user's namespace.",
            "in": "formData",
            "name": "namespace",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If there is a project in the same namespace and with the same name overwrite it",
            "in": "formData",
            "name": "overwrite",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "The description of the project",
            "in": "formData",
            "name": "override_params[description]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Git strategy. Defaults to `fetch`",
            "in": "formData",
            "name": "override_params[build_git_strategy]",
            "required": false,
            "schema": {
              "enum": [
                "fetch",
                "clone"
              ],
              "type": "string"
            }
          },
          {
            "description": "Build timeout",
            "in": "formData",
            "name": "override_params[build_timeout]",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Auto-cancel pending pipelines",
            "in": "formData",
            "name": "override_params[auto_cancel_pending_pipelines]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "The path to CI config file. Defaults to `.gitlab-ci.yml`",
            "in": "formData",
            "name": "override_params[ci_config_path]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Disable or enable the service desk",
            "in": "formData",
            "name": "override_params[service_desk_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if the issue tracker is enabled",
            "in": "formData",
            "name": "override_params[issues_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if merge requests are enabled",
            "in": "formData",
            "name": "override_params[merge_requests_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if the wiki is enabled",
            "in": "formData",
            "name": "override_params[wiki_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if jobs are enabled",
            "in": "formData",
            "name": "override_params[jobs_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if snippets are enabled",
            "in": "formData",
            "name": "override_params[snippets_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Issues access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[issues_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Repository access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[repository_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Merge requests access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[merge_requests_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Forks access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[forking_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Wiki access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[wiki_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Builds access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[builds_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Snippets access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[snippets_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Pages access level. One of `disabled`, `private`, `enabled` or `public`",
            "in": "formData",
            "name": "override_params[pages_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled",
                "public"
              ],
              "type": "string"
            }
          },
          {
            "description": "Analytics access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[analytics_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Controls visibility of the container registry. One of `disabled`, `private` or `enabled`. `private` will make the container registry accessible only to project members (reporter role and above). `enabled` will make the container registry accessible to everyone who has access to the project. `disabled` will disable the container registry",
            "in": "formData",
            "name": "override_params[container_registry_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Security and compliance access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[security_and_compliance_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Releases access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[releases_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Environments access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[environments_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Feature flags access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[feature_flags_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Infrastructure access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[infrastructure_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Monitor access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[monitor_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Model experiments access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[model_experiments_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Model registry access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[model_registry_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Deprecated: Use emails_enabled instead.",
            "in": "formData",
            "name": "override_params[emails_disabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Enable email notifications",
            "in": "formData",
            "name": "override_params[emails_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Show default award emojis",
            "in": "formData",
            "name": "override_params[show_default_award_emojis]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Include the code diff preview in merge request notification emails",
            "in": "formData",
            "name": "override_params[show_diff_preview_in_email]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Warn about potentially unwanted characters",
            "in": "formData",
            "name": "override_params[warn_about_potentially_unwanted_characters]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Enforce auth check on uploads",
            "in": "formData",
            "name": "override_params[enforce_auth_checks_on_uploads]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if shared runners are enabled for that project",
            "in": "formData",
            "name": "override_params[shared_runners_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if group runners are enabled for that project",
            "in": "formData",
            "name": "override_params[group_runners_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Automatically resolve merge request diff threads on lines changed with a push",
            "in": "formData",
            "name": "override_params[resolve_outdated_diff_discussions]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Remove the source branch by default after merge",
            "in": "formData",
            "name": "override_params[remove_source_branch_after_merge]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Deprecated: Use :container_registry_access_level instead. Flag indication if the container registry is enabled for that project",
            "in": "formData",
            "name": "override_params[container_registry_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Container expiration policy cadence for recurring job",
            "in": "formData",
            "name": "override_params[container_expiration_policy_attributes][cadence]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Container expiration policy number of images to keep",
            "in": "formData",
            "name": "override_params[container_expiration_policy_attributes][keep_n]",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Container expiration policy remove images older than value",
            "in": "formData",
            "name": "override_params[container_expiration_policy_attributes][older_than]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Container expiration policy regex for image removal",
            "in": "formData",
            "name": "override_params[container_expiration_policy_attributes][name_regex]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Container expiration policy regex for image retention",
            "in": "formData",
            "name": "override_params[container_expiration_policy_attributes][name_regex_keep]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Flag indication if container expiration policy is enabled",
            "in": "formData",
            "name": "override_params[container_expiration_policy_attributes][enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if Git LFS is enabled for that project",
            "in": "formData",
            "name": "override_params[lfs_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The visibility of the project.",
            "in": "formData",
            "name": "override_params[visibility]",
            "required": false,
            "schema": {
              "enum": [
                "private",
                "internal",
                "public"
              ],
              "type": "string"
            }
          },
          {
            "description": "Deprecated: Use public_jobs instead.",
            "in": "formData",
            "name": "override_params[public_builds]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Perform public builds",
            "in": "formData",
            "name": "override_params[public_jobs]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Allow users to request member access",
            "in": "formData",
            "name": "override_params[request_access_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only allow to merge if builds succeed",
            "in": "formData",
            "name": "override_params[only_allow_merge_if_pipeline_succeeds]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Allow to merge if pipeline is skipped",
            "in": "formData",
            "name": "override_params[allow_merge_on_skipped_pipeline]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only allow to merge if all threads are resolved",
            "in": "formData",
            "name": "override_params[only_allow_merge_if_all_discussions_are_resolved]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Deprecated: Use :topics instead",
            "in": "formData",
            "name": "override_params[tag_list]",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The list of topics for a project",
            "in": "formData",
            "name": "override_params[topics]",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Avatar image for project",
            "in": "formData",
            "name": "override_params[avatar]",
            "required": false,
            "schema": {
              "type": "file"
            }
          },
          {
            "description": "Show link to create/view merge request when pushing from the command line",
            "in": "formData",
            "name": "override_params[printing_merge_request_link_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The merge method used when merging merge requests",
            "in": "formData",
            "name": "override_params[merge_method]",
            "required": false,
            "schema": {
              "enum": [
                "ff",
                "rebase_merge",
                "merge"
              ],
              "type": "string"
            }
          },
          {
            "description": "The commit message used to apply merge request suggestions",
            "in": "formData",
            "name": "override_params[suggestion_commit_message]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Template used to create merge commit message",
            "in": "formData",
            "name": "override_params[merge_commit_template]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Template used to create squash commit message",
            "in": "formData",
            "name": "override_params[squash_commit_template]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Template used to create a branch from an issue",
            "in": "formData",
            "name": "override_params[issue_branch_template]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Flag indication if Auto DevOps is enabled",
            "in": "formData",
            "name": "override_params[auto_devops_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Auto Deploy strategy",
            "in": "formData",
            "name": "override_params[auto_devops_deploy_strategy]",
            "required": false,
            "schema": {
              "enum": [
                "continuous",
                "manual",
                "timed_incremental"
              ],
              "type": "string"
            }
          },
          {
            "description": "Flag indication if referenced issues auto-closing is enabled",
            "in": "formData",
            "name": "override_params[autoclose_referenced_issues]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Which storage shard the repository is on. Available only to admins",
            "in": "formData",
            "name": "override_params[repository_storage]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Enable project packages feature",
            "in": "formData",
            "name": "override_params[packages_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Squash default for project. One of `never`, `always`, `default_on`, or `default_off`.",
            "in": "formData",
            "name": "override_params[squash_option]",
            "required": false,
            "schema": {
              "enum": [
                "never",
                "always",
                "default_on",
                "default_off"
              ],
              "type": "string"
            }
          },
          {
            "description": "Merge requests of this forked project targets itself by default",
            "in": "formData",
            "name": "override_params[mr_default_target_self]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Blocks merge requests from merging unless all status checks have passed",
            "in": "formData",
            "name": "override_params[only_allow_merge_if_all_status_checks_passed]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "How many approvers should approve merge request by default",
            "in": "formData",
            "name": "override_params[approvals_before_merge]",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "[Deprecated] Enables pull mirroring in a project",
            "in": "formData",
            "name": "override_params[mirror]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "[Deprecated] Pull mirroring triggers builds",
            "in": "formData",
            "name": "override_params[mirror_trigger_builds]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The classification label for the project",
            "in": "formData",
            "name": "override_params[external_authorization_classification_label]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Requirements feature access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[requirements_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Require an associated issue from Jira",
            "in": "formData",
            "name": "override_params[prevent_merge_without_jira_issue]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Path to locally stored body (generated by Workhorse)",
            "in": "formData",
            "name": "file.path",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Real filename as send in Content-Disposition (generated by Workhorse)",
            "in": "formData",
            "name": "file.name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Real content type as send in Content-Type (generated by Workhorse)",
            "in": "formData",
            "name": "file.type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Real size of file (generated by Workhorse)",
            "in": "formData",
            "name": "file.size",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "MD5 checksum of the file (generated by Workhorse)",
            "in": "formData",
            "name": "file.md5",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "SHA1 checksum of the file (generated by Workhorse)",
            "in": "formData",
            "name": "file.sha1",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "SHA256 checksum of the file (generated by Workhorse)",
            "in": "formData",
            "name": "file.sha256",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Etag of the file (generated by Workhorse)",
            "in": "formData",
            "name": "file.etag",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Remote_id of the file (generated by Workhorse)",
            "in": "formData",
            "name": "file.remote_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Remote_url of the file (generated by Workhorse)",
            "in": "formData",
            "name": "file.remote_url",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a new project import",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProjectImportStatus"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "summary": "Create a new project import",
        "tags": [
          "project_import"
        ]
      }
    },
    "/api/v4/projects/import-relation": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "This feature was introduced in GitLab 16.11.",
        "operationId": "projects/postApiV4ProjectsImportRelation",
        "parameters": [
          {
            "description": "The project path and name",
            "in": "formData",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The project export file from which to extract the relation.",
            "in": "formData",
            "name": "file",
            "required": true,
            "schema": {
              "type": "file"
            }
          },
          {
            "description": "The relation to import. Must be one of issues, merge_requests, ci_pipelines, or milestones.",
            "in": "formData",
            "name": "relation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Path to locally stored body (generated by Workhorse)",
            "in": "formData",
            "name": "file.path",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Real filename as sent in Content-Disposition (generated by Workhorse)",
            "in": "formData",
            "name": "file.name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Real content type as send in Content-Type (generated by Workhorse)",
            "in": "formData",
            "name": "file.type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Real size of file (generated by Workhorse)",
            "in": "formData",
            "name": "file.size",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "MD5 checksum of the file (generated by Workhorse)",
            "in": "formData",
            "name": "file.md5",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "SHA1 checksum of the file (generated by Workhorse)",
            "in": "formData",
            "name": "file.sha1",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "SHA256 checksum of the file (generated by Workhorse)",
            "in": "formData",
            "name": "file.sha256",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Etag of the file (generated by Workhorse)",
            "in": "formData",
            "name": "file.etag",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Remote_id of the file (generated by Workhorse)",
            "in": "formData",
            "name": "file.remote_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Remote_url of the file (generated by Workhorse)",
            "in": "formData",
            "name": "file.remote_url",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Re-import a relation into a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_RelationImportTracker"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "summary": "Re-import a relation into a project",
        "tags": [
          "project_import"
        ]
      }
    },
    "/api/v4/projects/import-relation/authorize": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 16.11",
        "operationId": "projects/postApiV4ProjectsImportRelationAuthorize",
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Workhorse authorize the project relation import upload"
          }
        },
        "summary": "Workhorse authorize the project relation import upload",
        "tags": [
          "project_import"
        ]
      }
    },
    "/api/v4/projects/import/authorize": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 12.9",
        "operationId": "projects/postApiV4ProjectsImportAuthorize",
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Workhorse authorize the project import upload"
          }
        },
        "summary": "Workhorse authorize the project import upload",
        "tags": [
          "project_import"
        ]
      }
    },
    "/api/v4/projects/remote-import": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "This feature was introduced in GitLab 13.2.",
        "operationId": "projects/postApiV4ProjectsRemoteImport",
        "parameters": [
          {
            "description": "The URL for the file.",
            "in": "formData",
            "name": "url",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The new project path and name",
            "in": "formData",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the project to be imported. Defaults to the path of the project if not provided.",
            "in": "formData",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID or name of the namespace that the project will be imported into. Defaults to the current user's namespace.",
            "in": "formData",
            "name": "namespace",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If there is a project in the same namespace and with the same name overwrite it",
            "in": "formData",
            "name": "overwrite",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "The description of the project",
            "in": "formData",
            "name": "override_params[description]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Git strategy. Defaults to `fetch`",
            "in": "formData",
            "name": "override_params[build_git_strategy]",
            "required": false,
            "schema": {
              "enum": [
                "fetch",
                "clone"
              ],
              "type": "string"
            }
          },
          {
            "description": "Build timeout",
            "in": "formData",
            "name": "override_params[build_timeout]",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Auto-cancel pending pipelines",
            "in": "formData",
            "name": "override_params[auto_cancel_pending_pipelines]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "The path to CI config file. Defaults to `.gitlab-ci.yml`",
            "in": "formData",
            "name": "override_params[ci_config_path]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Disable or enable the service desk",
            "in": "formData",
            "name": "override_params[service_desk_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if the issue tracker is enabled",
            "in": "formData",
            "name": "override_params[issues_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if merge requests are enabled",
            "in": "formData",
            "name": "override_params[merge_requests_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if the wiki is enabled",
            "in": "formData",
            "name": "override_params[wiki_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if jobs are enabled",
            "in": "formData",
            "name": "override_params[jobs_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if snippets are enabled",
            "in": "formData",
            "name": "override_params[snippets_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Issues access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[issues_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Repository access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[repository_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Merge requests access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[merge_requests_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Forks access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[forking_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Wiki access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[wiki_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Builds access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[builds_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Snippets access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[snippets_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Pages access level. One of `disabled`, `private`, `enabled` or `public`",
            "in": "formData",
            "name": "override_params[pages_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled",
                "public"
              ],
              "type": "string"
            }
          },
          {
            "description": "Analytics access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[analytics_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Controls visibility of the container registry. One of `disabled`, `private` or `enabled`. `private` will make the container registry accessible only to project members (reporter role and above). `enabled` will make the container registry accessible to everyone who has access to the project. `disabled` will disable the container registry",
            "in": "formData",
            "name": "override_params[container_registry_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Security and compliance access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[security_and_compliance_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Releases access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[releases_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Environments access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[environments_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Feature flags access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[feature_flags_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Infrastructure access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[infrastructure_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Monitor access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[monitor_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Model experiments access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[model_experiments_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Model registry access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[model_registry_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Deprecated: Use emails_enabled instead.",
            "in": "formData",
            "name": "override_params[emails_disabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Enable email notifications",
            "in": "formData",
            "name": "override_params[emails_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Show default award emojis",
            "in": "formData",
            "name": "override_params[show_default_award_emojis]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Include the code diff preview in merge request notification emails",
            "in": "formData",
            "name": "override_params[show_diff_preview_in_email]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Warn about potentially unwanted characters",
            "in": "formData",
            "name": "override_params[warn_about_potentially_unwanted_characters]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Enforce auth check on uploads",
            "in": "formData",
            "name": "override_params[enforce_auth_checks_on_uploads]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if shared runners are enabled for that project",
            "in": "formData",
            "name": "override_params[shared_runners_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if group runners are enabled for that project",
            "in": "formData",
            "name": "override_params[group_runners_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Automatically resolve merge request diff threads on lines changed with a push",
            "in": "formData",
            "name": "override_params[resolve_outdated_diff_discussions]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Remove the source branch by default after merge",
            "in": "formData",
            "name": "override_params[remove_source_branch_after_merge]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Deprecated: Use :container_registry_access_level instead. Flag indication if the container registry is enabled for that project",
            "in": "formData",
            "name": "override_params[container_registry_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Container expiration policy cadence for recurring job",
            "in": "formData",
            "name": "override_params[container_expiration_policy_attributes][cadence]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Container expiration policy number of images to keep",
            "in": "formData",
            "name": "override_params[container_expiration_policy_attributes][keep_n]",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Container expiration policy remove images older than value",
            "in": "formData",
            "name": "override_params[container_expiration_policy_attributes][older_than]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Container expiration policy regex for image removal",
            "in": "formData",
            "name": "override_params[container_expiration_policy_attributes][name_regex]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Container expiration policy regex for image retention",
            "in": "formData",
            "name": "override_params[container_expiration_policy_attributes][name_regex_keep]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Flag indication if container expiration policy is enabled",
            "in": "formData",
            "name": "override_params[container_expiration_policy_attributes][enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if Git LFS is enabled for that project",
            "in": "formData",
            "name": "override_params[lfs_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The visibility of the project.",
            "in": "formData",
            "name": "override_params[visibility]",
            "required": false,
            "schema": {
              "enum": [
                "private",
                "internal",
                "public"
              ],
              "type": "string"
            }
          },
          {
            "description": "Deprecated: Use public_jobs instead.",
            "in": "formData",
            "name": "override_params[public_builds]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Perform public builds",
            "in": "formData",
            "name": "override_params[public_jobs]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Allow users to request member access",
            "in": "formData",
            "name": "override_params[request_access_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only allow to merge if builds succeed",
            "in": "formData",
            "name": "override_params[only_allow_merge_if_pipeline_succeeds]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Allow to merge if pipeline is skipped",
            "in": "formData",
            "name": "override_params[allow_merge_on_skipped_pipeline]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only allow to merge if all threads are resolved",
            "in": "formData",
            "name": "override_params[only_allow_merge_if_all_discussions_are_resolved]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Deprecated: Use :topics instead",
            "in": "formData",
            "name": "override_params[tag_list]",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The list of topics for a project",
            "in": "formData",
            "name": "override_params[topics]",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Avatar image for project",
            "in": "formData",
            "name": "override_params[avatar]",
            "required": false,
            "schema": {
              "type": "file"
            }
          },
          {
            "description": "Show link to create/view merge request when pushing from the command line",
            "in": "formData",
            "name": "override_params[printing_merge_request_link_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The merge method used when merging merge requests",
            "in": "formData",
            "name": "override_params[merge_method]",
            "required": false,
            "schema": {
              "enum": [
                "ff",
                "rebase_merge",
                "merge"
              ],
              "type": "string"
            }
          },
          {
            "description": "The commit message used to apply merge request suggestions",
            "in": "formData",
            "name": "override_params[suggestion_commit_message]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Template used to create merge commit message",
            "in": "formData",
            "name": "override_params[merge_commit_template]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Template used to create squash commit message",
            "in": "formData",
            "name": "override_params[squash_commit_template]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Template used to create a branch from an issue",
            "in": "formData",
            "name": "override_params[issue_branch_template]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Flag indication if Auto DevOps is enabled",
            "in": "formData",
            "name": "override_params[auto_devops_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Auto Deploy strategy",
            "in": "formData",
            "name": "override_params[auto_devops_deploy_strategy]",
            "required": false,
            "schema": {
              "enum": [
                "continuous",
                "manual",
                "timed_incremental"
              ],
              "type": "string"
            }
          },
          {
            "description": "Flag indication if referenced issues auto-closing is enabled",
            "in": "formData",
            "name": "override_params[autoclose_referenced_issues]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Which storage shard the repository is on. Available only to admins",
            "in": "formData",
            "name": "override_params[repository_storage]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Enable project packages feature",
            "in": "formData",
            "name": "override_params[packages_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Squash default for project. One of `never`, `always`, `default_on`, or `default_off`.",
            "in": "formData",
            "name": "override_params[squash_option]",
            "required": false,
            "schema": {
              "enum": [
                "never",
                "always",
                "default_on",
                "default_off"
              ],
              "type": "string"
            }
          },
          {
            "description": "Merge requests of this forked project targets itself by default",
            "in": "formData",
            "name": "override_params[mr_default_target_self]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Blocks merge requests from merging unless all status checks have passed",
            "in": "formData",
            "name": "override_params[only_allow_merge_if_all_status_checks_passed]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "How many approvers should approve merge request by default",
            "in": "formData",
            "name": "override_params[approvals_before_merge]",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "[Deprecated] Enables pull mirroring in a project",
            "in": "formData",
            "name": "override_params[mirror]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "[Deprecated] Pull mirroring triggers builds",
            "in": "formData",
            "name": "override_params[mirror_trigger_builds]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The classification label for the project",
            "in": "formData",
            "name": "override_params[external_authorization_classification_label]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Requirements feature access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[requirements_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Require an associated issue from Jira",
            "in": "formData",
            "name": "override_params[prevent_merge_without_jira_issue]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a new project import using a remote object storage path",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProjectImportStatus"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "429": {
            "description": "Too many requests"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "summary": "Create a new project import using a remote object storage path",
        "tags": [
          "project_import"
        ]
      }
    },
    "/api/v4/projects/remote-import-s3": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "This feature was introduced in GitLab 14.9.",
        "operationId": "projects/postApiV4ProjectsRemoteImportS3",
        "parameters": [
          {
            "description": "AWS region",
            "in": "formData",
            "name": "region",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Bucket name",
            "in": "formData",
            "name": "bucket_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "File key",
            "in": "formData",
            "name": "file_key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Access key id",
            "in": "formData",
            "name": "access_key_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Secret access key",
            "in": "formData",
            "name": "secret_access_key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The new project path and name",
            "in": "formData",
            "name": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the project to be imported. Defaults to the path of the project if not provided.",
            "in": "formData",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID or name of the namespace that the project will be imported into. Defaults to the current user's namespace.",
            "in": "formData",
            "name": "namespace",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If there is a project in the same namespace and with the same name overwrite it",
            "in": "formData",
            "name": "overwrite",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "The description of the project",
            "in": "formData",
            "name": "override_params[description]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Git strategy. Defaults to `fetch`",
            "in": "formData",
            "name": "override_params[build_git_strategy]",
            "required": false,
            "schema": {
              "enum": [
                "fetch",
                "clone"
              ],
              "type": "string"
            }
          },
          {
            "description": "Build timeout",
            "in": "formData",
            "name": "override_params[build_timeout]",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Auto-cancel pending pipelines",
            "in": "formData",
            "name": "override_params[auto_cancel_pending_pipelines]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "The path to CI config file. Defaults to `.gitlab-ci.yml`",
            "in": "formData",
            "name": "override_params[ci_config_path]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Disable or enable the service desk",
            "in": "formData",
            "name": "override_params[service_desk_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if the issue tracker is enabled",
            "in": "formData",
            "name": "override_params[issues_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if merge requests are enabled",
            "in": "formData",
            "name": "override_params[merge_requests_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if the wiki is enabled",
            "in": "formData",
            "name": "override_params[wiki_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if jobs are enabled",
            "in": "formData",
            "name": "override_params[jobs_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if snippets are enabled",
            "in": "formData",
            "name": "override_params[snippets_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Issues access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[issues_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Repository access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[repository_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Merge requests access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[merge_requests_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Forks access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[forking_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Wiki access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[wiki_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Builds access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[builds_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Snippets access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[snippets_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Pages access level. One of `disabled`, `private`, `enabled` or `public`",
            "in": "formData",
            "name": "override_params[pages_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled",
                "public"
              ],
              "type": "string"
            }
          },
          {
            "description": "Analytics access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[analytics_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Controls visibility of the container registry. One of `disabled`, `private` or `enabled`. `private` will make the container registry accessible only to project members (reporter role and above). `enabled` will make the container registry accessible to everyone who has access to the project. `disabled` will disable the container registry",
            "in": "formData",
            "name": "override_params[container_registry_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Security and compliance access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[security_and_compliance_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Releases access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[releases_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Environments access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[environments_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Feature flags access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[feature_flags_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Infrastructure access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[infrastructure_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Monitor access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[monitor_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Model experiments access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[model_experiments_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Model registry access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[model_registry_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Deprecated: Use emails_enabled instead.",
            "in": "formData",
            "name": "override_params[emails_disabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Enable email notifications",
            "in": "formData",
            "name": "override_params[emails_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Show default award emojis",
            "in": "formData",
            "name": "override_params[show_default_award_emojis]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Include the code diff preview in merge request notification emails",
            "in": "formData",
            "name": "override_params[show_diff_preview_in_email]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Warn about potentially unwanted characters",
            "in": "formData",
            "name": "override_params[warn_about_potentially_unwanted_characters]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Enforce auth check on uploads",
            "in": "formData",
            "name": "override_params[enforce_auth_checks_on_uploads]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if shared runners are enabled for that project",
            "in": "formData",
            "name": "override_params[shared_runners_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if group runners are enabled for that project",
            "in": "formData",
            "name": "override_params[group_runners_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Automatically resolve merge request diff threads on lines changed with a push",
            "in": "formData",
            "name": "override_params[resolve_outdated_diff_discussions]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Remove the source branch by default after merge",
            "in": "formData",
            "name": "override_params[remove_source_branch_after_merge]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Deprecated: Use :container_registry_access_level instead. Flag indication if the container registry is enabled for that project",
            "in": "formData",
            "name": "override_params[container_registry_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Container expiration policy cadence for recurring job",
            "in": "formData",
            "name": "override_params[container_expiration_policy_attributes][cadence]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Container expiration policy number of images to keep",
            "in": "formData",
            "name": "override_params[container_expiration_policy_attributes][keep_n]",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Container expiration policy remove images older than value",
            "in": "formData",
            "name": "override_params[container_expiration_policy_attributes][older_than]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Container expiration policy regex for image removal",
            "in": "formData",
            "name": "override_params[container_expiration_policy_attributes][name_regex]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Container expiration policy regex for image retention",
            "in": "formData",
            "name": "override_params[container_expiration_policy_attributes][name_regex_keep]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Flag indication if container expiration policy is enabled",
            "in": "formData",
            "name": "override_params[container_expiration_policy_attributes][enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Flag indication if Git LFS is enabled for that project",
            "in": "formData",
            "name": "override_params[lfs_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The visibility of the project.",
            "in": "formData",
            "name": "override_params[visibility]",
            "required": false,
            "schema": {
              "enum": [
                "private",
                "internal",
                "public"
              ],
              "type": "string"
            }
          },
          {
            "description": "Deprecated: Use public_jobs instead.",
            "in": "formData",
            "name": "override_params[public_builds]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Perform public builds",
            "in": "formData",
            "name": "override_params[public_jobs]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Allow users to request member access",
            "in": "formData",
            "name": "override_params[request_access_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only allow to merge if builds succeed",
            "in": "formData",
            "name": "override_params[only_allow_merge_if_pipeline_succeeds]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Allow to merge if pipeline is skipped",
            "in": "formData",
            "name": "override_params[allow_merge_on_skipped_pipeline]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only allow to merge if all threads are resolved",
            "in": "formData",
            "name": "override_params[only_allow_merge_if_all_discussions_are_resolved]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Deprecated: Use :topics instead",
            "in": "formData",
            "name": "override_params[tag_list]",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The list of topics for a project",
            "in": "formData",
            "name": "override_params[topics]",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Avatar image for project",
            "in": "formData",
            "name": "override_params[avatar]",
            "required": false,
            "schema": {
              "type": "file"
            }
          },
          {
            "description": "Show link to create/view merge request when pushing from the command line",
            "in": "formData",
            "name": "override_params[printing_merge_request_link_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The merge method used when merging merge requests",
            "in": "formData",
            "name": "override_params[merge_method]",
            "required": false,
            "schema": {
              "enum": [
                "ff",
                "rebase_merge",
                "merge"
              ],
              "type": "string"
            }
          },
          {
            "description": "The commit message used to apply merge request suggestions",
            "in": "formData",
            "name": "override_params[suggestion_commit_message]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Template used to create merge commit message",
            "in": "formData",
            "name": "override_params[merge_commit_template]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Template used to create squash commit message",
            "in": "formData",
            "name": "override_params[squash_commit_template]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Template used to create a branch from an issue",
            "in": "formData",
            "name": "override_params[issue_branch_template]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Flag indication if Auto DevOps is enabled",
            "in": "formData",
            "name": "override_params[auto_devops_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Auto Deploy strategy",
            "in": "formData",
            "name": "override_params[auto_devops_deploy_strategy]",
            "required": false,
            "schema": {
              "enum": [
                "continuous",
                "manual",
                "timed_incremental"
              ],
              "type": "string"
            }
          },
          {
            "description": "Flag indication if referenced issues auto-closing is enabled",
            "in": "formData",
            "name": "override_params[autoclose_referenced_issues]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Which storage shard the repository is on. Available only to admins",
            "in": "formData",
            "name": "override_params[repository_storage]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Enable project packages feature",
            "in": "formData",
            "name": "override_params[packages_enabled]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Squash default for project. One of `never`, `always`, `default_on`, or `default_off`.",
            "in": "formData",
            "name": "override_params[squash_option]",
            "required": false,
            "schema": {
              "enum": [
                "never",
                "always",
                "default_on",
                "default_off"
              ],
              "type": "string"
            }
          },
          {
            "description": "Merge requests of this forked project targets itself by default",
            "in": "formData",
            "name": "override_params[mr_default_target_self]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Blocks merge requests from merging unless all status checks have passed",
            "in": "formData",
            "name": "override_params[only_allow_merge_if_all_status_checks_passed]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "How many approvers should approve merge request by default",
            "in": "formData",
            "name": "override_params[approvals_before_merge]",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "[Deprecated] Enables pull mirroring in a project",
            "in": "formData",
            "name": "override_params[mirror]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "[Deprecated] Pull mirroring triggers builds",
            "in": "formData",
            "name": "override_params[mirror_trigger_builds]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The classification label for the project",
            "in": "formData",
            "name": "override_params[external_authorization_classification_label]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Requirements feature access level. One of `disabled`, `private` or `enabled`",
            "in": "formData",
            "name": "override_params[requirements_access_level]",
            "required": false,
            "schema": {
              "enum": [
                "disabled",
                "private",
                "enabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Require an associated issue from Jira",
            "in": "formData",
            "name": "override_params[prevent_merge_without_jira_issue]",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a new project import using a file from AWS S3",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProjectImportStatus"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "429": {
            "description": "Too many requests"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "summary": "Create a new project import using a file from AWS S3",
        "tags": [
          "project_import"
        ]
      }
    },
    "/api/v4/projects/user/{user_id}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create new project for a specified user. Only available to admin users.",
        "operationId": "projects/postApiV4ProjectsUserUserId",
        "parameters": [
          {
            "description": "The ID of a user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsUserUserId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsUserUserId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create new project for a specified user. Only available to admin users.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Project"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id_}/terraform/state/{name}": {
      "delete": {
        "description": "Delete a Terraform state of a certain name",
        "operationId": "projects_terraform/deleteApiV4ProjectsIdTerraformStateName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id_",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a Terraform state of a certain name"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation failure"
          }
        },
        "summary": "Delete a Terraform state of a certain name",
        "tags": [
          "terraform_state"
        ]
      },
      "get": {
        "description": "Get a Terraform state by its name",
        "operationId": "projects_terraform/getApiV4ProjectsIdTerraformStateName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id_",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of a Terraform state",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Terraform state lock ID",
            "in": "query",
            "name": "ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a Terraform state by its name"
          },
          "204": {
            "description": "Empty state"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation failure"
          }
        },
        "summary": "Get a Terraform state by its name",
        "tags": [
          "terraform_state"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Add a new Terraform state or update an existing one",
        "operationId": "projects_terraform/postApiV4ProjectsIdTerraformStateName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id_",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Add a new Terraform state or update an existing one"
          },
          "204": {
            "description": "No data provided"
          },
          "403": {
            "description": "Forbidden"
          },
          "413": {
            "description": "Request Entity Too Large"
          },
          "422": {
            "description": "Validation failure"
          }
        },
        "summary": "Add a new Terraform state or update an existing one",
        "tags": [
          "terraform_state"
        ]
      }
    },
    "/api/v4/projects/{id_}/terraform/state/{name}/lock": {
      "delete": {
        "description": "Unlock a Terraform state of a certain name",
        "operationId": "projects_terraform/deleteApiV4ProjectsIdTerraformStateNameLock",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id_",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Terraform state lock ID",
            "in": "query",
            "name": "ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Unlock a Terraform state of a certain name"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Validation failure"
          }
        },
        "summary": "Unlock a Terraform state of a certain name",
        "tags": [
          "terraform_state"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Lock a Terraform state of a certain name",
        "operationId": "projects_terraform/postApiV4ProjectsIdTerraformStateNameLock",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id_",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdTerraformStateNameLock",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdTerraformStateNameLock"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Lock a Terraform state of a certain name"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Validation failure"
          }
        },
        "summary": "Lock a Terraform state of a certain name",
        "tags": [
          "terraform_state"
        ]
      }
    },
    "/api/v4/projects/{id}": {
      "delete": {
        "description": "Delete a project",
        "operationId": "projects/deleteApiV4ProjectsId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Delete a project"
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "Get a single project",
        "operationId": "projects/getApiV4ProjectsId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include project statistics",
            "in": "query",
            "name": "statistics",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include custom attributes in the response",
            "in": "query",
            "name": "with_custom_attributes",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include project license data",
            "in": "query",
            "name": "license",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API_Entities_ProjectWithAccess"
                }
              }
            },
            "description": "Get a single project"
          },
          "404": {}
        },
        "tags": [
          "projects"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update an existing project",
        "operationId": "projects/putApiV4ProjectsId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update an existing project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Project"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Unauthenticated"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/access_requests": {
      "get": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "projects_access_requests/getApiV4ProjectsIdAccessRequests",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets a list of access requests for a project.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AccessRequester"
            }
          }
        },
        "summary": "Gets a list of access requests for a project.",
        "tags": [
          "access_requests"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "projects_access_requests/postApiV4ProjectsIdAccessRequests",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "successfull_response": {
                "access_level": 20,
                "created_at": "2012-10-22T14:13:35Z",
                "id": 1,
                "name": "Raymond Smith",
                "state": "active",
                "username": "raymond_smith"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AccessRequester"
            }
          }
        },
        "summary": "Requests access for the authenticated user to a project.",
        "tags": [
          "access_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/access_requests/{user_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "projects_access_requests/deleteApiV4ProjectsIdAccessRequestsUserId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the access requester",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Denies an access request for the given user."
          }
        },
        "summary": "Denies an access request for the given user.",
        "tags": [
          "access_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/access_requests/{user_id}/approve": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "projects_access_requests/putApiV4ProjectsIdAccessRequestsUserIdApprove",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the access requester",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdAccessRequestsUserIdApprove",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdAccessRequestsUserIdApprove"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "examples": {
              "successfull_response": {
                "access_level": 20,
                "created_at": "2012-10-22T14:13:35Z",
                "id": 1,
                "name": "Raymond Smith",
                "state": "active",
                "username": "raymond_smith"
              }
            },
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AccessRequester"
            }
          }
        },
        "summary": "Approves an access request for the given user.",
        "tags": [
          "access_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/access_tokens": {
      "get": {
        "description": "This feature was introduced in GitLab 13.9.",
        "operationId": "projects_access_tokens/getApiV4ProjectsIdAccessTokens",
        "parameters": [
          {
            "description": "ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter tokens which are either active or inactive",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "enum": [
                "active",
                "inactive"
              ],
              "example": "active",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get list of all access tokens for the specified resource",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_ResourceAccessToken"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get list of all access tokens for the specified resource",
        "tags": [
          "project_access_tokens"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 13.9.",
        "operationId": "projects_access_tokens/postApiV4ProjectsIdAccessTokens",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 2,
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdAccessTokens",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdAccessTokens"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a resource access token",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ResourceAccessTokenWithToken"
            }
          }
        },
        "summary": "Create a resource access token",
        "tags": [
          "project_access_tokens"
        ]
      }
    },
    "/api/v4/projects/{id}/access_tokens/self/rotate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Rotates a resource access token by passing it to the API in a header",
        "operationId": "projects_access_tokens/postApiV4ProjectsIdAccessTokensSelfRotate",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdAccessTokensSelfRotate",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdAccessTokensSelfRotate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Rotate a resource access token",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ResourceAccessTokenWithToken"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "405": {
            "description": "Method not allowed"
          }
        },
        "summary": "Rotate a resource access token",
        "tags": [
          "personal_access_tokens"
        ]
      }
    },
    "/api/v4/projects/{id}/access_tokens/{token_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 13.9.",
        "operationId": "projects_access_tokens/deleteApiV4ProjectsIdAccessTokensTokenId",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the token",
            "in": "path",
            "name": "token_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Revoke a resource access token"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Revoke a resource access token",
        "tags": [
          "project_access_tokens"
        ]
      },
      "get": {
        "description": "This feature was introduced in GitLab 14.10.",
        "operationId": "projects_access_tokens/getApiV4ProjectsIdAccessTokensTokenId",
        "parameters": [
          {
            "description": "ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the token",
            "in": "path",
            "name": "token_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get an access token for the specified resource by ID",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ResourceAccessToken"
            }
          }
        },
        "summary": "Get an access token for the specified resource by ID",
        "tags": [
          "project_access_tokens"
        ]
      }
    },
    "/api/v4/projects/{id}/access_tokens/{token_id}/rotate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 16.0.",
        "operationId": "projects_access_tokens/postApiV4ProjectsIdAccessTokensTokenIdRotate",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the token",
            "in": "path",
            "name": "token_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdAccessTokensTokenIdRotate",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdAccessTokensTokenIdRotate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Rotate a resource access token",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ResourceAccessTokenWithToken"
            }
          }
        },
        "summary": "Rotate a resource access token",
        "tags": [
          "project_access_tokens"
        ]
      }
    },
    "/api/v4/projects/{id}/alert_management_alerts/{alert_iid}/metric_images": {
      "get": {
        "description": "Metric Images for alert",
        "operationId": "projects_alert_management_alerts/getApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImages",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 17,
              "type": "string"
            }
          },
          {
            "description": "The IID of the Alert",
            "in": "path",
            "name": "alert_iid",
            "required": true,
            "schema": {
              "example": 23,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Metric Images for alert",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_MetricImage"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "alert_management"
        ]
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Upload a metric image for an alert",
        "operationId": "projects_alert_management_alerts/postApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImages",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 17,
              "type": "string"
            }
          },
          {
            "description": "The IID of the Alert",
            "in": "path",
            "name": "alert_iid",
            "required": true,
            "schema": {
              "example": 23,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The image file to be uploaded",
            "in": "formData",
            "name": "file",
            "required": true,
            "schema": {
              "type": "file"
            }
          },
          {
            "description": "The url to view more metric info",
            "in": "formData",
            "name": "url",
            "required": false,
            "schema": {
              "example": "https://example.com/metric",
              "type": "string"
            }
          },
          {
            "description": "A description of the image or URL",
            "in": "formData",
            "name": "url_text",
            "required": false,
            "schema": {
              "example": "An example metric",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Upload a metric image for an alert",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_MetricImage"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "alert_management"
        ]
      }
    },
    "/api/v4/projects/{id}/alert_management_alerts/{alert_iid}/metric_images/authorize": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Workhorse authorize metric image file upload",
        "operationId": "projects_alert_management_alerts/postApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesAuthorize",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 17,
              "type": "string"
            }
          },
          {
            "description": "The IID of the Alert",
            "in": "path",
            "name": "alert_iid",
            "required": true,
            "schema": {
              "example": 23,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Workhorse authorize metric image file upload"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "alert_management"
        ]
      }
    },
    "/api/v4/projects/{id}/alert_management_alerts/{alert_iid}/metric_images/{metric_image_id}": {
      "delete": {
        "description": "Remove a metric image for an alert",
        "operationId": "projects_alert_management_alerts/deleteApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 17,
              "type": "string"
            }
          },
          {
            "description": "The IID of the Alert",
            "in": "path",
            "name": "alert_iid",
            "required": true,
            "schema": {
              "example": 23,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of metric image",
            "in": "path",
            "name": "metric_image_id",
            "required": true,
            "schema": {
              "example": 42,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Remove a metric image for an alert",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_MetricImage"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "tags": [
          "alert_management"
        ]
      },
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Update a metric image for an alert",
        "operationId": "projects_alert_management_alerts/putApiV4ProjectsIdAlertManagementAlertsAlertIidMetricImagesMetricImageId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 17,
              "type": "string"
            }
          },
          {
            "description": "The IID of the Alert",
            "in": "path",
            "name": "alert_iid",
            "required": true,
            "schema": {
              "example": 23,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of metric image",
            "in": "path",
            "name": "metric_image_id",
            "required": true,
            "schema": {
              "example": 42,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The url to view more metric info",
            "in": "formData",
            "name": "url",
            "required": false,
            "schema": {
              "example": "https://example.com/metric",
              "type": "string"
            }
          },
          {
            "description": "A description of the image or URL",
            "in": "formData",
            "name": "url_text",
            "required": false,
            "schema": {
              "example": "An example metric",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update a metric image for an alert",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_MetricImage"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "tags": [
          "alert_management"
        ]
      }
    },
    "/api/v4/projects/{id}/archive": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Archive a project",
        "operationId": "projects_archive/postApiV4ProjectsIdArchive",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Archive a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Project"
            }
          },
          "403": {
            "description": "Unauthenticated"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/artifacts": {
      "delete": {
        "description": "Expire the artifacts files from a project",
        "operationId": "projects_artifacts/deleteApiV4ProjectsIdArtifacts",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Expire the artifacts files from a project"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/audit_events": {
      "get": {
        "description": "Get a list of audit events in this project.",
        "operationId": "projects_audit_events/getApiV4ProjectsIdAuditEvents",
        "parameters": [
          {
            "description": "Return audit events created after the specified time",
            "in": "query",
            "name": "created_after",
            "required": false,
            "schema": {
              "example": "2016-01-19T09:05:50.355Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Return audit events created before the specified time",
            "in": "query",
            "name": "created_before",
            "required": false,
            "schema": {
              "example": "2016-01-19T09:05:50.355Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of audit events in this project.",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/EE_API_Entities_AuditEvent"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/audit_events/{audit_event_id}": {
      "get": {
        "description": "Get a specific audit event in this project.",
        "operationId": "projects_audit_events/getApiV4ProjectsIdAuditEventsAuditEventId",
        "parameters": [
          {
            "description": "The ID of the audit event",
            "in": "path",
            "name": "audit_event_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a specific audit event in this project.",
            "schema": {
              "$ref": "#/components/schemas/EE_API_Entities_AuditEvent"
            }
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/avatar": {
      "get": {
        "description": "This feature was introduced in GitLab 16.9",
        "operationId": "projects_avatar/getApiV4ProjectsIdAvatar",
        "parameters": [
          {
            "description": "ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download a project avatar"
          }
        },
        "summary": "Download a project avatar",
        "tags": [
          "project_avatar"
        ]
      }
    },
    "/api/v4/projects/{id}/badges": {
      "get": {
        "description": "This feature was introduced in GitLab 10.6.",
        "operationId": "projects_badges/getApiV4ProjectsIdBadges",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Name for the badge",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets a list of project badges viewable by the authenticated user.",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Badge"
              },
              "type": "array"
            }
          }
        },
        "summary": "Gets a list of project badges viewable by the authenticated user.",
        "tags": [
          "badges"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 10.6.",
        "operationId": "projects_badges/postApiV4ProjectsIdBadges",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdBadges",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdBadges"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Adds a badge to a project.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Badge"
            }
          }
        },
        "summary": "Adds a badge to a project.",
        "tags": [
          "badges"
        ]
      }
    },
    "/api/v4/projects/{id}/badges/render": {
      "get": {
        "description": "This feature was introduced in GitLab 10.6.",
        "operationId": "projects_badges/getApiV4ProjectsIdBadgesRender",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "URL of the badge link",
            "in": "query",
            "name": "link_url",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "URL of the badge image",
            "in": "query",
            "name": "image_url",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Preview a badge from a project.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_BasicBadgeDetails"
            }
          }
        },
        "summary": "Preview a badge from a project.",
        "tags": [
          "badges"
        ]
      }
    },
    "/api/v4/projects/{id}/badges/{badge_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 10.6.",
        "operationId": "projects_badges/deleteApiV4ProjectsIdBadgesBadgeId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The badge ID",
            "in": "path",
            "name": "badge_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Removes a badge from the project."
          }
        },
        "summary": "Removes a badge from the project.",
        "tags": [
          "badges"
        ]
      },
      "get": {
        "description": "This feature was introduced in GitLab 10.6.",
        "operationId": "projects_badges/getApiV4ProjectsIdBadgesBadgeId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The badge ID",
            "in": "path",
            "name": "badge_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets a badge of a project.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Badge"
            }
          }
        },
        "summary": "Gets a badge of a project.",
        "tags": [
          "badges"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 10.6.",
        "operationId": "projects_badges/putApiV4ProjectsIdBadgesBadgeId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "badge_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdBadgesBadgeId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdBadgesBadgeId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Updates a badge of a project.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Badge"
            }
          }
        },
        "summary": "Updates a badge of a project.",
        "tags": [
          "badges"
        ]
      }
    },
    "/api/v4/projects/{id}/catalog/publish": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Publishes a release of a catalog resource as version to the CI/CD catalog.",
        "operationId": "projects_catalog/postApiV4ProjectsIdCatalogPublish",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdCatalogPublish",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdCatalogPublish"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Publish a new component project release as version to the CI/CD catalog",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Catalog_Resources_Version"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Publish a new component project release as version to the CI/CD catalog",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/ci/lint": {
      "get": {
        "description": "Checks if a project’s .gitlab-ci.yml configuration in a given commit (by default HEAD of the\n        project’s default branch) is valid",
        "operationId": "projects_ci/getApiV4ProjectsIdCiLint",
        "parameters": [
          {
            "description": "Deprecated: Use content_ref instead",
            "in": "query",
            "name": "sha",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The CI/CD configuration content is taken from this commit SHA, branch or tag. Defaults to the HEAD of the project's default branch",
            "in": "query",
            "name": "content_ref",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Run pipeline creation simulation, or only do static check. This is false by default",
            "in": "query",
            "name": "dry_run",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "If the list of jobs that would exist in a static check or pipeline\n        simulation should be included in the response. This is false by default",
            "in": "query",
            "name": "include_jobs",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Deprecated: Use dry_run_ref instead",
            "in": "query",
            "name": "ref",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Branch or tag used as context when executing a dry run. Defaults to the default branch of the project. Only used when dry_run is true",
            "in": "query",
            "name": "dry_run_ref",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Validates a CI YAML configuration with a namespace",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Lint_Result"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Validates a CI YAML configuration with a namespace",
        "tags": [
          "ci_lint"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Checks if CI/CD YAML configuration is valid. This endpoint has namespace specific context",
        "operationId": "projects_ci/postApiV4ProjectsIdCiLint",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdCiLint",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdCiLint"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Validate a CI YAML configuration with a namespace",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Lint_Result"
            }
          }
        },
        "summary": "Validate a CI YAML configuration with a namespace",
        "tags": [
          "ci_lint"
        ]
      }
    },
    "/api/v4/projects/{id}/cluster_agents": {
      "get": {
        "description": "This feature was introduced in GitLab 14.10. Returns the list of agents registered for the project.",
        "operationId": "projects_cluster_agents/getApiV4ProjectsIdClusterAgents",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List the agents for a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Clusters_Agent"
            }
          }
        },
        "summary": "List the agents for a project",
        "tags": [
          "cluster_agents"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 14.10. Registers an agent to the project.",
        "operationId": "projects_cluster_agents/postApiV4ProjectsIdClusterAgents",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdClusterAgents",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdClusterAgents"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Register an agent with a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Clusters_Agent"
            }
          }
        },
        "summary": "Register an agent with a project",
        "tags": [
          "cluster_agents"
        ]
      }
    },
    "/api/v4/projects/{id}/cluster_agents/{agent_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 14.10. Deletes an existing agent registration.",
        "operationId": "projects_cluster_agents/deleteApiV4ProjectsIdClusterAgentsAgentId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of an agent",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a registered agent"
          }
        },
        "summary": "Delete a registered agent",
        "tags": [
          "cluster_agents"
        ]
      },
      "get": {
        "description": "This feature was introduced in GitLab 14.10. Gets a single agent details.",
        "operationId": "projects_cluster_agents/getApiV4ProjectsIdClusterAgentsAgentId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of an agent",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get details about an agent",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Clusters_Agent"
            }
          }
        },
        "summary": "Get details about an agent",
        "tags": [
          "cluster_agents"
        ]
      }
    },
    "/api/v4/projects/{id}/cluster_agents/{agent_id}/tokens": {
      "get": {
        "description": "This feature was introduced in GitLab 15.0. Returns a list of tokens for an agent.",
        "operationId": "projects_cluster_agents/getApiV4ProjectsIdClusterAgentsAgentIdTokens",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of an agent",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List tokens for an agent",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Clusters_AgentTokenBasic"
            }
          }
        },
        "summary": "List tokens for an agent",
        "tags": [
          "cluster_agents"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 15.0. Creates a new token for an agent.",
        "operationId": "projects_cluster_agents/postApiV4ProjectsIdClusterAgentsAgentIdTokens",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of an agent",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdClusterAgentsAgentIdTokens",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdClusterAgentsAgentIdTokens"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create an agent token",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Clusters_AgentTokenWithToken"
            }
          }
        },
        "summary": "Create an agent token",
        "tags": [
          "cluster_agents"
        ]
      }
    },
    "/api/v4/projects/{id}/cluster_agents/{agent_id}/tokens/{token_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 15.0. Revokes an agent token.",
        "operationId": "projects_cluster_agents/deleteApiV4ProjectsIdClusterAgentsAgentIdTokensTokenId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of an agent",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the agent token",
            "in": "path",
            "name": "token_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Revoke an agent token"
          }
        },
        "summary": "Revoke an agent token",
        "tags": [
          "cluster_agents"
        ]
      },
      "get": {
        "description": "This feature was introduced in GitLab 15.0. Gets a single agent token.",
        "operationId": "projects_cluster_agents/getApiV4ProjectsIdClusterAgentsAgentIdTokensTokenId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of an agent",
            "in": "path",
            "name": "agent_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the agent token",
            "in": "path",
            "name": "token_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single agent token",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Clusters_AgentToken"
            }
          }
        },
        "summary": "Get a single agent token",
        "tags": [
          "cluster_agents"
        ]
      }
    },
    "/api/v4/projects/{id}/clusters": {
      "get": {
        "description": "This feature was introduced in GitLab 11.7. Returns a list of project clusters.",
        "operationId": "projects_clusters/getApiV4ProjectsIdClusters",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List project clusters",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Cluster"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "summary": "List project clusters",
        "tags": [
          "clusters"
        ]
      }
    },
    "/api/v4/projects/{id}/clusters/user": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 11.7. Adds an existing Kubernetes cluster to the project.",
        "operationId": "projects_clusters/postApiV4ProjectsIdClustersUser",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdClustersUser",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdClustersUser"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add existing cluster to project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ClusterProject"
            }
          },
          "400": {
            "description": "Validation error"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Add existing cluster to project",
        "tags": [
          "clusters"
        ]
      }
    },
    "/api/v4/projects/{id}/clusters/{cluster_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 11.7. Deletes an existing project cluster. Does not remove existing resources within the connected Kubernetes cluster.",
        "operationId": "projects_clusters/deleteApiV4ProjectsIdClustersClusterId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Cluster ID",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete project cluster",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ClusterProject"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Delete project cluster",
        "tags": [
          "clusters"
        ]
      },
      "get": {
        "description": "This feature was introduced in GitLab 11.7. Gets a single project cluster.",
        "operationId": "projects_clusters/getApiV4ProjectsIdClustersClusterId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The cluster ID",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single project cluster",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ClusterProject"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get a single project cluster",
        "tags": [
          "clusters"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 11.7. Updates an existing project cluster.",
        "operationId": "projects_clusters/putApiV4ProjectsIdClustersClusterId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The cluster ID",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdClustersClusterId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdClustersClusterId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Edit project cluster",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ClusterProject"
            }
          },
          "400": {
            "description": "Validation error"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Edit project cluster",
        "tags": [
          "clusters"
        ]
      }
    },
    "/api/v4/projects/{id}/create_ci_config": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates merge request for missing ci config in project",
        "operationId": "projects_create_ci_config/postApiV4ProjectsIdCreateCiConfig",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Creates merge request for missing ci config in project"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/custom_attributes": {
      "get": {
        "description": "Get all custom attributes on a project",
        "operationId": "projects_custom_attributes/getApiV4ProjectsIdCustomAttributes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get all custom attributes on a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_CustomAttribute"
            }
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/custom_attributes/{key}": {
      "delete": {
        "description": "Delete a custom attribute on a project",
        "operationId": "projects_custom_attributes/deleteApiV4ProjectsIdCustomAttributesKey",
        "parameters": [
          {
            "description": "The key of the custom attribute",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a custom attribute on a project"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "Get a custom attribute on a project",
        "operationId": "projects_custom_attributes/getApiV4ProjectsIdCustomAttributesKey",
        "parameters": [
          {
            "description": "The key of the custom attribute",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a custom attribute on a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_CustomAttribute"
            }
          }
        },
        "tags": [
          "projects"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set a custom attribute on a project",
        "operationId": "projects_custom_attributes/putApiV4ProjectsIdCustomAttributesKey",
        "parameters": [
          {
            "description": "The key of the custom attribute",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdCustomAttributesKey",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdCustomAttributesKey"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Set a custom attribute on a project"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/debian_distributions": {
      "get": {
        "description": "This feature was introduced in 14.0",
        "operationId": "projects_debian_distributions/getApiV4ProjectsIdDebianDistributions",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The Debian Codename",
            "in": "query",
            "name": "codename",
            "required": false,
            "schema": {
              "example": "sid",
              "type": "string"
            }
          },
          {
            "description": "The Debian Suite",
            "in": "query",
            "name": "suite",
            "required": false,
            "schema": {
              "example": "unstable",
              "type": "string"
            }
          },
          {
            "description": "The Debian Origin",
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "example": "Grep",
              "type": "string"
            }
          },
          {
            "description": "The Debian Label",
            "in": "query",
            "name": "label",
            "required": false,
            "schema": {
              "example": "grep.be",
              "type": "string"
            }
          },
          {
            "description": "The Debian Version",
            "in": "query",
            "name": "version",
            "required": false,
            "schema": {
              "example": "12",
              "type": "string"
            }
          },
          {
            "description": "The Debian Description",
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "example": "My description",
              "type": "string"
            }
          },
          {
            "description": "The duration before the Release file should be considered expired by the client",
            "in": "query",
            "name": "valid_time_duration_seconds",
            "required": false,
            "schema": {
              "example": 604800,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The list of Components",
            "in": "query",
            "name": "components",
            "required": false,
            "schema": {
              "example": "main",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The list of Architectures",
            "in": "query",
            "name": "architectures",
            "required": false,
            "schema": {
              "example": "amd64",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of Debian Distributions",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Packages_Debian_Distribution"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get a list of Debian Distributions",
        "tags": [
          "debian_distribution"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in 14.0",
        "operationId": "projects_debian_distributions/postApiV4ProjectsIdDebianDistributions",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdDebianDistributions",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdDebianDistributions"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a Debian Distribution",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Packages_Debian_Distribution"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Create a Debian Distribution",
        "tags": [
          "debian_distribution"
        ]
      }
    },
    "/api/v4/projects/{id}/debian_distributions/{codename}": {
      "delete": {
        "description": "This feature was introduced in 14.0",
        "operationId": "projects_debian_distributions/deleteApiV4ProjectsIdDebianDistributionsCodename",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename",
            "in": "path",
            "name": "codename",
            "required": true,
            "schema": {
              "example": "sid",
              "type": "string"
            }
          },
          {
            "description": "The Debian Suite",
            "in": "query",
            "name": "suite",
            "required": false,
            "schema": {
              "example": "unstable",
              "type": "string"
            }
          },
          {
            "description": "The Debian Origin",
            "in": "query",
            "name": "origin",
            "required": false,
            "schema": {
              "example": "Grep",
              "type": "string"
            }
          },
          {
            "description": "The Debian Label",
            "in": "query",
            "name": "label",
            "required": false,
            "schema": {
              "example": "grep.be",
              "type": "string"
            }
          },
          {
            "description": "The Debian Version",
            "in": "query",
            "name": "version",
            "required": false,
            "schema": {
              "example": "12",
              "type": "string"
            }
          },
          {
            "description": "The Debian Description",
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "example": "My description",
              "type": "string"
            }
          },
          {
            "description": "The duration before the Release file should be considered expired by the client",
            "in": "query",
            "name": "valid_time_duration_seconds",
            "required": false,
            "schema": {
              "example": 604800,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The list of Components",
            "in": "query",
            "name": "components",
            "required": false,
            "schema": {
              "example": "main",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The list of Architectures",
            "in": "query",
            "name": "architectures",
            "required": false,
            "schema": {
              "example": "amd64",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Delete a Debian Distribution"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Delete a Debian Distribution",
        "tags": [
          "debian_distribution"
        ]
      },
      "get": {
        "description": "This feature was introduced in 14.0",
        "operationId": "projects_debian_distributions/getApiV4ProjectsIdDebianDistributionsCodename",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename",
            "in": "path",
            "name": "codename",
            "required": true,
            "schema": {
              "example": "sid",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a Debian Distribution",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Packages_Debian_Distribution"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get a Debian Distribution",
        "tags": [
          "debian_distribution"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in 14.0",
        "operationId": "projects_debian_distributions/putApiV4ProjectsIdDebianDistributionsCodename",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename",
            "in": "path",
            "name": "codename",
            "required": true,
            "schema": {
              "example": "sid",
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdDebianDistributionsCodename",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdDebianDistributionsCodename"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update a Debian Distribution",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Packages_Debian_Distribution"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Update a Debian Distribution",
        "tags": [
          "debian_distribution"
        ]
      }
    },
    "/api/v4/projects/{id}/debian_distributions/{codename}/key.asc": {
      "get": {
        "description": "This feature was introduced in 14.4",
        "operationId": "projects_debian_distributions/getApiV4ProjectsIdDebianDistributionsCodenameKeyAsc",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename",
            "in": "path",
            "name": "codename",
            "required": true,
            "schema": {
              "example": "sid",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a Debian Distribution Key",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Packages_Debian_Distribution"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get a Debian Distribution Key",
        "tags": [
          "debian_distribution"
        ]
      }
    },
    "/api/v4/projects/{id}/deploy_keys": {
      "get": {
        "description": "Get a list of a project's deploy keys.",
        "operationId": "projects_deploy_keys/getApiV4ProjectsIdDeployKeys",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List deploy keys for project",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_DeployKeysProject"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "List deploy keys for project",
        "tags": [
          "deploy_keys"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates a new deploy key for a project. If the deploy key already exists in another project, it's joined to the current project only if the original one is accessible by the same user.",
        "operationId": "projects_deploy_keys/postApiV4ProjectsIdDeployKeys",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdDeployKeys",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdDeployKeys"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add deploy key",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_DeployKeysProject"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Add deploy key",
        "tags": [
          "deploy_keys"
        ]
      }
    },
    "/api/v4/projects/{id}/deploy_keys/{key_id}": {
      "delete": {
        "description": "Removes a deploy key from the project. If the deploy key is used only for this project, it's deleted from the system.",
        "operationId": "projects_deploy_keys/deleteApiV4ProjectsIdDeployKeysKeyId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete deploy key"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Delete deploy key",
        "tags": [
          "deploy_keys"
        ]
      },
      "get": {
        "description": "Get a single key.",
        "operationId": "projects_deploy_keys/getApiV4ProjectsIdDeployKeysKeyId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single deploy key",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_DeployKeysProject"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get a single deploy key",
        "tags": [
          "deploy_keys"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates a deploy key for a project.",
        "operationId": "projects_deploy_keys/putApiV4ProjectsIdDeployKeysKeyId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdDeployKeysKeyId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdDeployKeysKeyId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update deploy key",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_DeployKey"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Update deploy key",
        "tags": [
          "deploy_keys"
        ]
      }
    },
    "/api/v4/projects/{id}/deploy_keys/{key_id}/enable": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Enables a deploy key for a project so this can be used. Returns the enabled key, with a status code 201 when successful. This feature was added in GitLab 8.11.",
        "operationId": "projects_deploy_keys/postApiV4ProjectsIdDeployKeysKeyIdEnable",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the deploy key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Enable a deploy key",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_DeployKey"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Enable a deploy key",
        "tags": [
          "deploy_keys"
        ]
      }
    },
    "/api/v4/projects/{id}/deploy_tokens": {
      "get": {
        "description": "Get a list of a project's deploy tokens. This feature was introduced in GitLab 12.9.",
        "operationId": "projects_deploy_tokens/getApiV4ProjectsIdDeployTokens",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Limit by active status",
            "in": "query",
            "name": "active",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List project deploy tokens",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_DeployToken"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "List project deploy tokens",
        "tags": [
          "deploy_tokens"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates a new deploy token for a project. This feature was introduced in GitLab 12.9.",
        "operationId": "projects_deploy_tokens/postApiV4ProjectsIdDeployTokens",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdDeployTokens",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdDeployTokens"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a project deploy token",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_DeployTokenWithToken"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Create a project deploy token",
        "tags": [
          "deploy_tokens"
        ]
      }
    },
    "/api/v4/projects/{id}/deploy_tokens/{token_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 12.9.",
        "operationId": "projects_deploy_tokens/deleteApiV4ProjectsIdDeployTokensTokenId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the deploy token",
            "in": "path",
            "name": "token_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a project deploy token"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Delete a project deploy token",
        "tags": [
          "deploy_tokens"
        ]
      },
      "get": {
        "description": "Get a single project's deploy token by ID. This feature was introduced in GitLab 14.9.",
        "operationId": "projects_deploy_tokens/getApiV4ProjectsIdDeployTokensTokenId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the deploy token",
            "in": "path",
            "name": "token_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a project deploy token",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_DeployToken"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get a project deploy token",
        "tags": [
          "deploy_tokens"
        ]
      }
    },
    "/api/v4/projects/{id}/deployments": {
      "get": {
        "description": "Get a list of deployments in a project. This feature was introduced in GitLab 8.11.",
        "operationId": "projects_deployments/getApiV4ProjectsIdDeployments",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return deployments ordered by either one of `id`, `iid`, `created_at`, `updated_at` or `ref` fields. Default is `id`",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "id",
              "enum": [
                "id",
                "iid",
                "created_at",
                "updated_at",
                "finished_at"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return deployments sorted in `asc` or `desc` order. Default is `asc`",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return deployments updated after the specified date. Expected in ISO 8601 format (`2019-03-15T08:00:00Z`)",
            "in": "query",
            "name": "updated_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Return deployments updated before the specified date. Expected in ISO 8601 format (`2019-03-15T08:00:00Z`)",
            "in": "query",
            "name": "updated_before",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Return deployments finished after the specified date. Expected in ISO 8601 format (`2019-03-15T08:00:00Z`)",
            "in": "query",
            "name": "finished_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Return deployments finished before the specified date. Expected in ISO 8601 format (`2019-03-15T08:00:00Z`)",
            "in": "query",
            "name": "finished_before",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The name of the environment to filter deployments by",
            "in": "query",
            "name": "environment",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The status to filter deployments by. One of `created`, `running`, `success`, `failed`, `canceled`, or `blocked`",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "created",
                "running",
                "success",
                "failed",
                "canceled",
                "skipped",
                "blocked"
              ],
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List project deployments",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Deployment"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "List project deployments",
        "tags": [
          "deployments"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 12.4.",
        "operationId": "projects_deployments/postApiV4ProjectsIdDeployments",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdDeployments",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdDeployments"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a deployment",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_DeploymentExtended"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Create a deployment",
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/v4/projects/{id}/deployments/{deployment_id}": {
      "delete": {
        "description": "Delete a specific deployment that is not currently the last deployment for an environment or in a running state. This feature was introduced in GitLab 15.3.",
        "operationId": "projects_deployments/deleteApiV4ProjectsIdDeploymentsDeploymentId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the deployment",
            "in": "path",
            "name": "deployment_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Deployment destroyed"
          },
          "400": {
            "description": "\"Cannot destroy running deployment\" or \"Deployment currently deployed to environment\""
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "summary": "Delete a specific deployment",
        "tags": [
          "deployments"
        ]
      },
      "get": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "projects_deployments/getApiV4ProjectsIdDeploymentsDeploymentId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the deployment",
            "in": "path",
            "name": "deployment_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a specific deployment",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_DeploymentExtended"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get a specific deployment",
        "tags": [
          "deployments"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 12.4.",
        "operationId": "projects_deployments/putApiV4ProjectsIdDeploymentsDeploymentId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "deployment_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdDeploymentsDeploymentId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdDeploymentsDeploymentId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update a deployment",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_DeploymentExtended"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Update a deployment",
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/v4/projects/{id}/deployments/{deployment_id}/approval": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 14.8.",
        "operationId": "projects_deployments/postApiV4ProjectsIdDeploymentsDeploymentIdApproval",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the deployment",
            "in": "path",
            "name": "deployment_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdDeploymentsDeploymentIdApproval",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdDeploymentsDeploymentIdApproval"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Approve or reject a blocked deployment",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Deployments_Approval"
            }
          }
        },
        "summary": "Approve or reject a blocked deployment",
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/v4/projects/{id}/deployments/{deployment_id}/merge_requests": {
      "get": {
        "description": "Retrieves the list of merge requests shipped with a given deployment. This feature was introduced in GitLab 12.7.",
        "operationId": "projects_deployments/getApiV4ProjectsIdDeploymentsDeploymentIdMergeRequests",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the deployment",
            "in": "path",
            "name": "deployment_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns merge requests created by the given user `id`. Mutually exclusive with `author_username`. Combine with `scope=all` or `scope=assigned_to_me`.",
            "in": "query",
            "name": "author_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
            "in": "query",
            "name": "author_username",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests assigned to the given user `id`. `None` returns unassigned merge requests. `Any` returns merge requests with an assignee.",
            "in": "query",
            "name": "assignee_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
            "in": "query",
            "name": "assignee_username",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Returns merge requests which have the user as a reviewer with the given `username`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_id`. Introduced in GitLab 13.8.",
            "in": "query",
            "name": "reviewer_username",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests matching a comma-separated list of labels. `None` lists all merge requests with no labels. `Any` lists all merge requests with at least one label. Predefined names are case-insensitive.",
            "in": "query",
            "name": "labels",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Returns merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.",
            "in": "query",
            "name": "milestone",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests reacted by the authenticated user by the given `emoji`. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.",
            "in": "query",
            "name": "my_reaction_emoji",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests which have the user as a reviewer with the given user `id`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_username`.",
            "in": "query",
            "name": "reviewer_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns `all` merge requests or just those that are `opened`, `closed`, `locked`, or `merged`.",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "default": "all",
              "enum": [
                "opened",
                "closed",
                "locked",
                "merged",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests ordered by `created_at`, `label_priority`, `milestone_due`, `popularity`, `priority`, `title`, `updated_at` or `merged_at` fields. Introduced in GitLab 14.8.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "created_at",
                "label_priority",
                "milestone_due",
                "popularity",
                "priority",
                "title",
                "updated_at",
                "merged_at"
              ],
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests sorted in `asc` or `desc` order.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "If `true`, response returns more details for each label in labels field: `:name`,`:color`, `:description`, `:description_html`, `:text_color`",
            "in": "query",
            "name": "with_labels_details",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "If `true`, this projection requests (but does not guarantee) that the `merge_status` field be recalculated asynchronously. Introduced in GitLab 13.0.",
            "in": "query",
            "name": "with_merge_status_recheck",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Returns merge requests created on or after the given time. Expected in ISO 8601 format.",
            "in": "query",
            "name": "created_after",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests created on or before the given time. Expected in ISO 8601 format.",
            "in": "query",
            "name": "created_before",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests updated on or after the given time. Expected in ISO 8601 format.",
            "in": "query",
            "name": "updated_after",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests updated on or before the given time. Expected in ISO 8601 format.",
            "in": "query",
            "name": "updated_before",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "If simple, returns the `iid`, URL, title, description, and basic state of merge request",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": {
              "enum": [
                "simple"
              ],
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests for the given scope: `created_by_me`, `assigned_to_me` or `all`",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "created-by-me",
                "assigned-to-me",
                "created_by_me",
                "assigned_to_me",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests with the given source branch",
            "in": "query",
            "name": "source_branch",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests with the given source project id",
            "in": "query",
            "name": "source_project_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns merge requests with the given target branch",
            "in": "query",
            "name": "target_branch",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search merge requests against their `title` and `description`.",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Modify the scope of the search attribute. `title`, `description`, or a string joining them with comma.",
            "in": "query",
            "name": "in",
            "required": false,
            "schema": {
              "example": "title,description",
              "type": "string"
            }
          },
          {
            "description": "Filter merge requests against their `wip` status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.",
            "in": "query",
            "name": "wip",
            "required": false,
            "schema": {
              "enum": [
                "yes",
                "no"
              ],
              "type": "string"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests created by the given user `id`. Mutually exclusive with `author_username`. Combine with `scope=all` or `scope=assigned_to_me`.",
            "in": "query",
            "name": "not[author_id]",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
            "in": "query",
            "name": "not[author_username]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests assigned to the given user `id`. `None` returns unassigned merge requests. `Any` returns merge requests with an assignee.",
            "in": "query",
            "name": "not[assignee_id]",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
            "in": "query",
            "name": "not[assignee_username]",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests which have the user as a reviewer with the given `username`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_id`. Introduced in GitLab 13.8.",
            "in": "query",
            "name": "not[reviewer_username]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests matching a comma-separated list of labels. `None` lists all merge requests with no labels. `Any` lists all merge requests with at least one label. Predefined names are case-insensitive.",
            "in": "query",
            "name": "not[labels]",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.",
            "in": "query",
            "name": "not[milestone]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests reacted by the authenticated user by the given `emoji`. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.",
            "in": "query",
            "name": "not[my_reaction_emoji]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests which have the user as a reviewer with the given user `id`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_username`.",
            "in": "query",
            "name": "not[reviewer_id]",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns merge requests deployed before the given date/time. Expected in ISO 8601 format.",
            "in": "query",
            "name": "deployed_before",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests deployed after the given date/time. Expected in ISO 8601 format",
            "in": "query",
            "name": "deployed_after",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests deployed to the given environment",
            "in": "query",
            "name": "environment",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "type": "string"
            }
          },
          {
            "description": "Filters merge requests by their `approved` status. `yes` returns only approved merge requests. `no` returns only non-approved merge requests.",
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "enum": [
                "yes",
                "no"
              ],
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests which have been merged by the user with the given user `id`. Mutually exclusive with `merge_user_username`.",
            "in": "query",
            "name": "merge_user_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns merge requests which have been merged by the user with the given `username`. Mutually exclusive with `merge_user_id`.",
            "in": "query",
            "name": "merge_user_username",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of merge requests associated with a deployment",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_MergeRequestBasic"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "List of merge requests associated with a deployment",
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/v4/projects/{id}/environments": {
      "get": {
        "description": "Get all environments for a given project. This feature was introduced in GitLab 8.11.",
        "operationId": "projects_environments/getApiV4ProjectsIdEnvironments",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return the environment with this name. Mutually exclusive with search",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return list of environments matching the search criteria. Mutually exclusive with name. Must be at least 3 characters.",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "List all environments that match a specific state. Accepted values: `available`, `stopping`, or `stopped`. If no state value given, returns all environments",
            "in": "query",
            "name": "states",
            "required": false,
            "schema": {
              "enum": [
                "stopped",
                "stopping",
                "available"
              ],
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List environments",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Environment"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "List environments",
        "tags": [
          "environments"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates a new environment with the given name and `external_url`. It returns `201` if the environment was successfully created, `400` for wrong parameters. This feature was introduced in GitLab 8.11.",
        "operationId": "projects_environments/postApiV4ProjectsIdEnvironments",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdEnvironments",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdEnvironments"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a new environment",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Environment"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Create a new environment",
        "tags": [
          "environments"
        ]
      }
    },
    "/api/v4/projects/{id}/environments/review_apps": {
      "delete": {
        "description": "It schedules for deletion multiple environments that have already been stopped and are in the review app folder. The actual deletion is performed after 1 week from the time of execution. By default, it only deletes environments 30 days or older. You can change this default using the `before` parameter.",
        "operationId": "projects_environments/deleteApiV4ProjectsIdEnvironmentsReviewApps",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The date before which environments can be deleted. Defaults to 30 days ago. Expected in ISO 8601 format (`YYYY-MM-DDTHH:MM:SSZ`)",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Maximum number of environments to delete. Defaults to 100",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": 100,
              "format": "int32",
              "maximum": 1000,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Defaults to true for safety reasons. It performs a dry run where no actual deletion will be performed. Set to false to actually delete the environment",
            "in": "query",
            "name": "dry_run",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete multiple stopped review apps",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_EnvironmentBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "summary": "Delete multiple stopped review apps",
        "tags": [
          "environments"
        ]
      }
    },
    "/api/v4/projects/{id}/environments/stop_stale": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "It returns `200` if stale environment check was scheduled successfully",
        "operationId": "projects_environments/postApiV4ProjectsIdEnvironmentsStopStale",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdEnvironmentsStopStale",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdEnvironmentsStopStale"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Stop stale environments"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "Stop stale environments",
        "tags": [
          "environments"
        ]
      }
    },
    "/api/v4/projects/{id}/environments/{environment_id}": {
      "delete": {
        "description": "It returns 204 if the environment was successfully deleted, and 404 if the environment does not exist. This feature was introduced in GitLab 8.11.",
        "operationId": "projects_environments/deleteApiV4ProjectsIdEnvironmentsEnvironmentId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the environment",
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete an environment",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Environment"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Delete an environment",
        "tags": [
          "environments"
        ]
      },
      "get": {
        "description": "Get a specific environment",
        "operationId": "projects_environments/getApiV4ProjectsIdEnvironmentsEnvironmentId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the environment",
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a specific environment",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Environment"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "environments"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates an existing environment name and/or `external_url`. It returns `200` if the environment was successfully updated. In case of an error, a status code `400` is returned. This feature was introduced in GitLab 8.11.",
        "operationId": "projects_environments/putApiV4ProjectsIdEnvironmentsEnvironmentId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the environment",
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdEnvironmentsEnvironmentId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdEnvironmentsEnvironmentId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update an existing environment",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Environment"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Update an existing environment",
        "tags": [
          "environments"
        ]
      }
    },
    "/api/v4/projects/{id}/environments/{environment_id}/stop": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "It returns 200 if the environment was successfully stopped, and 404 if the environment does not exist.",
        "operationId": "projects_environments/postApiV4ProjectsIdEnvironmentsEnvironmentIdStop",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the environment",
            "in": "path",
            "name": "environment_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdEnvironmentsEnvironmentIdStop",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdEnvironmentsEnvironmentIdStop"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Stop an environment",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Environment"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Stop an environment",
        "tags": [
          "environments"
        ]
      }
    },
    "/api/v4/projects/{id}/error_tracking/client_keys": {
      "get": {
        "description": "List all client keys. This feature was introduced in GitLab 14.3.",
        "operationId": "projects_error_tracking/getApiV4ProjectsIdErrorTrackingClientKeys",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List project client keys",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_ErrorTracking_ClientKey"
              },
              "type": "array"
            }
          }
        },
        "summary": "List project client keys",
        "tags": [
          "error_tracking_client_keys"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates a new client key for a project. The public key attribute is generated automatically.This feature was introduced in GitLab 14.3.",
        "operationId": "projects_error_tracking/postApiV4ProjectsIdErrorTrackingClientKeys",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a client key",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ErrorTracking_ClientKey"
            }
          }
        },
        "summary": "Create a client key",
        "tags": [
          "error_tracking_client_keys"
        ]
      }
    },
    "/api/v4/projects/{id}/error_tracking/client_keys/{key_id}": {
      "delete": {
        "description": "Removes a client key from the project. This feature was introduced in GitLab 14.3.",
        "operationId": "projects_error_tracking/deleteApiV4ProjectsIdErrorTrackingClientKeysKeyId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Delete a client key",
        "tags": [
          "error_tracking_client_keys"
        ]
      }
    },
    "/api/v4/projects/{id}/error_tracking/settings": {
      "get": {
        "description": "Get error tracking settings for the project. This feature was introduced in GitLab 12.7.",
        "operationId": "projects_error_tracking/getApiV4ProjectsIdErrorTrackingSettings",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get Error Tracking settings",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ErrorTracking_ProjectSetting"
            }
          }
        },
        "summary": "Get Error Tracking settings",
        "tags": [
          "error_tracking_project_settings"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "The API allows you to enable or disable the Error Tracking settings for a project.Only for users with the Maintainer role for the project.",
        "operationId": "projects_error_tracking/patchApiV4ProjectsIdErrorTrackingSettings",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "patchApiV4ProjectsIdErrorTrackingSettings",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/patchApiV4ProjectsIdErrorTrackingSettings"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Enable or disable the Error Tracking project settings",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ErrorTracking_ProjectSetting"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Enable or disable the Error Tracking project settings",
        "tags": [
          "error_tracking_project_settings"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update Error Tracking settings for a project. Only for users with Maintainer role for the project.",
        "operationId": "projects_error_tracking/putApiV4ProjectsIdErrorTrackingSettings",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdErrorTrackingSettings",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdErrorTrackingSettings"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update Error Tracking project settings. Available in GitLab 15.10 and later.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ErrorTracking_ProjectSetting"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Update Error Tracking project settings. Available in GitLab 15.10 and later.",
        "tags": [
          "error_tracking_project_settings"
        ]
      }
    },
    "/api/v4/projects/{id}/events": {
      "get": {
        "description": "List a project's visible events",
        "operationId": "projects_events/getApiV4ProjectsIdEvents",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Event action to filter on",
            "in": "query",
            "name": "action",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Event target type to filter on",
            "in": "query",
            "name": "target_type",
            "required": false,
            "schema": {
              "enum": [
                "issue",
                "milestone",
                "merge_request",
                "note",
                "project",
                "snippet",
                "user",
                "wiki",
                "design"
              ],
              "type": "string"
            }
          },
          {
            "description": "Include only events created before this date",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Include only events created after this date",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Return events sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List a project's visible events",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Event"
            }
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/export": {
      "get": {
        "description": "This feature was introduced in GitLab 10.6.",
        "operationId": "projects_export/getApiV4ProjectsIdExport",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get export status",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProjectExportStatus"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "summary": "Get export status",
        "tags": [
          "project_export"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 10.6.",
        "operationId": "projects_export/postApiV4ProjectsIdExport",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdExport",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdExport"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Start export"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "429": {
            "description": "Too many requests"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "summary": "Start export",
        "tags": [
          "project_export"
        ]
      }
    },
    "/api/v4/projects/{id}/export/download": {
      "get": {
        "description": "This feature was introduced in GitLab 10.6.",
        "operationId": "projects_export/getApiV4ProjectsIdExportDownload",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/octet-stream",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download export"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "summary": "Download export",
        "tags": [
          "project_export"
        ]
      }
    },
    "/api/v4/projects/{id}/export_relations": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 14.4",
        "operationId": "projects_export_relations/postApiV4ProjectsIdExportRelations",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdExportRelations",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdExportRelations"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Start relations export"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "summary": "Start relations export",
        "tags": [
          "project_export"
        ]
      }
    },
    "/api/v4/projects/{id}/export_relations/download": {
      "get": {
        "description": "This feature was introduced in GitLab 14.4",
        "operationId": "projects_export_relations/getApiV4ProjectsIdExportRelationsDownload",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Project relation name",
            "in": "query",
            "name": "relation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Whether to download in batches",
            "in": "query",
            "name": "batched",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Batch number to download",
            "in": "query",
            "name": "batch_number",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/octet-stream",
          "application/gzip",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download relations export"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "summary": "Download relations export",
        "tags": [
          "project_export"
        ]
      }
    },
    "/api/v4/projects/{id}/export_relations/status": {
      "get": {
        "description": "This feature was introduced in GitLab 14.4",
        "operationId": "projects_export_relations/getApiV4ProjectsIdExportRelationsStatus",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Project relation name",
            "in": "query",
            "name": "relation",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Relations export status",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_BulkImports_ExportStatus"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "summary": "Relations export status",
        "tags": [
          "project_export"
        ]
      }
    },
    "/api/v4/projects/{id}/feature_flags": {
      "get": {
        "description": "Gets all feature flags of the requested project. This feature was introduced in GitLab 12.5.",
        "operationId": "projects_feature_flags/getApiV4ProjectsIdFeatureFlags",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The scope of feature flags, one of: `enabled`, `disabled`",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "enabled",
                "disabled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List feature flags for a project",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_FeatureFlag"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "List feature flags for a project",
        "tags": [
          "feature_flags"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates a new feature flag. This feature was introduced in GitLab 12.5.",
        "operationId": "projects_feature_flags/postApiV4ProjectsIdFeatureFlags",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdFeatureFlags",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdFeatureFlags"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a new feature flag",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_FeatureFlag"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "summary": "Create a new feature flag",
        "tags": [
          "feature_flags"
        ]
      }
    },
    "/api/v4/projects/{id}/feature_flags/{feature_flag_name}": {
      "delete": {
        "description": "Deletes a feature flag. This feature was introduced in GitLab 12.5.",
        "operationId": "projects_feature_flags/deleteApiV4ProjectsIdFeatureFlagsFeatureFlagName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the feature flag",
            "in": "path",
            "name": "feature_flag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Delete a feature flag",
        "tags": [
          "feature_flags"
        ]
      },
      "get": {
        "description": "Gets a single feature flag. This feature was introduced in GitLab 12.5.",
        "operationId": "projects_feature_flags/getApiV4ProjectsIdFeatureFlagsFeatureFlagName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the feature flag",
            "in": "path",
            "name": "feature_flag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single feature flag",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_FeatureFlag"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get a single feature flag",
        "tags": [
          "feature_flags"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates a feature flag. This feature was introduced in GitLab 13.2.",
        "operationId": "projects_feature_flags/putApiV4ProjectsIdFeatureFlagsFeatureFlagName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the feature flag",
            "in": "path",
            "name": "feature_flag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdFeatureFlagsFeatureFlagName",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdFeatureFlagsFeatureFlagName"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update a feature flag",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_FeatureFlag"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Update a feature flag",
        "tags": [
          "feature_flags"
        ]
      }
    },
    "/api/v4/projects/{id}/feature_flags_user_lists": {
      "get": {
        "description": "Gets all feature flag user lists for the requested project. This feature was introduced in GitLab 12.10.",
        "operationId": "projects_feature_flags_user_lists/getApiV4ProjectsIdFeatureFlagsUserLists",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return user lists matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List all feature flag user lists for a project",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_FeatureFlag_UserList"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "List all feature flag user lists for a project",
        "tags": [
          "feature_flags_user_lists"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates a feature flag user list. This feature was introduced in GitLab 12.10.",
        "operationId": "projects_feature_flags_user_lists/postApiV4ProjectsIdFeatureFlagsUserLists",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdFeatureFlagsUserLists",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdFeatureFlagsUserLists"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a feature flag user list",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_FeatureFlag_UserList"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Create a feature flag user list",
        "tags": [
          "feature_flags_user_lists"
        ]
      }
    },
    "/api/v4/projects/{id}/feature_flags_user_lists/{iid}": {
      "delete": {
        "description": "Deletes a feature flag user list. This feature was introduced in GitLab 12.10.",
        "operationId": "projects_feature_flags_user_lists/deleteApiV4ProjectsIdFeatureFlagsUserListsIid",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The internal ID of the project's feature flag user list",
            "in": "path",
            "name": "iid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete feature flag user list"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "summary": "Delete feature flag user list",
        "tags": [
          "feature_flags_user_lists"
        ]
      },
      "get": {
        "description": "Gets a feature flag user list. This feature was introduced in GitLab 12.10.",
        "operationId": "projects_feature_flags_user_lists/getApiV4ProjectsIdFeatureFlagsUserListsIid",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The internal ID of the project's feature flag user list",
            "in": "path",
            "name": "iid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a feature flag user list",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_FeatureFlag_UserList"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get a feature flag user list",
        "tags": [
          "feature_flags_user_lists"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates a feature flag user list. This feature was introduced in GitLab 12.10.",
        "operationId": "projects_feature_flags_user_lists/putApiV4ProjectsIdFeatureFlagsUserListsIid",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The internal ID of the project's feature flag user list",
            "in": "path",
            "name": "iid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdFeatureFlagsUserListsIid",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdFeatureFlagsUserListsIid"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update a feature flag user list",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_FeatureFlag_UserList"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Update a feature flag user list",
        "tags": [
          "feature_flags_user_lists"
        ]
      }
    },
    "/api/v4/projects/{id}/fork": {
      "delete": {
        "description": "Remove a forked_from relationship",
        "operationId": "projects_fork/deleteApiV4ProjectsIdFork",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Remove a forked_from relationship"
          },
          "304": {
            "description": "Not modified"
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Fork new project for the current user or provided namespace.",
        "operationId": "projects_fork/postApiV4ProjectsIdFork",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdFork",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdFork"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Fork new project for the current user or provided namespace.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Project"
            }
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/fork/{forked_from_id}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Mark this project as forked from another",
        "operationId": "projects_fork/postApiV4ProjectsIdForkForkedFromId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the project it was forked from",
            "in": "path",
            "name": "forked_from_id",
            "required": true,
            "schema": {
              "example": "gitlab",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Mark this project as forked from another",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Project"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/forks": {
      "get": {
        "description": "List forks of this project",
        "operationId": "projects_forks/getApiV4ProjectsIdForks",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return projects ordered by field. storage_size, repository_size, wiki_size, packages_size are only available to admins. Similarity is available when searching and is limited to projects the user has access to.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at",
                "similarity",
                "star_count",
                "storage_size",
                "repository_size",
                "wiki_size",
                "packages_size"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Limit by archived status",
            "in": "query",
            "name": "archived",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "enum": [
                "private",
                "internal",
                "public"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return list of projects matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include ancestor namespaces when matching search criteria",
            "in": "query",
            "name": "search_namespaces",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by owned by authenticated user",
            "in": "query",
            "name": "owned",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by starred status",
            "in": "query",
            "name": "starred",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by imported by authenticated user",
            "in": "query",
            "name": "imported",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by projects that the current user is a member of",
            "in": "query",
            "name": "membership",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by enabled issues feature",
            "in": "query",
            "name": "with_issues_enabled",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by enabled merge requests feature",
            "in": "query",
            "name": "with_merge_requests_enabled",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit to repositories which use the given programming language",
            "in": "query",
            "name": "with_programming_language",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit by minimum access level of authenticated user",
            "in": "query",
            "name": "min_access_level",
            "required": false,
            "schema": {
              "enum": [
                10,
                15,
                20,
                30,
                40,
                50
              ],
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Limit results to projects with IDs greater than the specified ID",
            "in": "query",
            "name": "id_after",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Limit results to projects with IDs less than the specified ID",
            "in": "query",
            "name": "id_before",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Limit results to projects with last_activity after specified time. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
            "in": "query",
            "name": "last_activity_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Limit results to projects with last_activity before specified time. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
            "in": "query",
            "name": "last_activity_before",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Which storage shard the repository is on. Available only to admins",
            "in": "query",
            "name": "repository_storage",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Comma-separated list of topics. Limit results to projects having all topics",
            "in": "query",
            "name": "topic",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Limit results to projects with the assigned topic given by the topic ID",
            "in": "query",
            "name": "topic_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return projects updated before the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
            "in": "query",
            "name": "updated_before",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Return projects updated after the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
            "in": "query",
            "name": "updated_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Include projects in pending delete state. Can only be set by admins",
            "in": "query",
            "name": "include_pending_delete",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by projects where wiki checksum is failed",
            "in": "query",
            "name": "wiki_checksum_failed",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by projects where repository checksum is failed",
            "in": "query",
            "name": "repository_checksum_failed",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include hidden projects. Can only be set by admins",
            "in": "query",
            "name": "include_hidden",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Date when the project was marked for deletion",
            "in": "query",
            "name": "marked_for_deletion_on",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return only the ID, URL, name, and path of each project",
            "in": "query",
            "name": "simple",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include custom attributes in the response",
            "in": "query",
            "name": "with_custom_attributes",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List forks of this project",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Project"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/freeze_periods": {
      "get": {
        "description": "Paginated list of Freeze Periods, sorted by created_at in ascending order. This feature was introduced in GitLab 13.0.",
        "operationId": "projects_freeze_periods/getApiV4ProjectsIdFreezePeriods",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List freeze periods",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_FreezePeriod"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "List freeze periods",
        "tags": [
          "freeze_periods"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates a freeze period. This feature was introduced in GitLab 13.0.",
        "operationId": "projects_freeze_periods/postApiV4ProjectsIdFreezePeriods",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdFreezePeriods",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdFreezePeriods"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a freeze period",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_FreezePeriod"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "Create a freeze period",
        "tags": [
          "freeze_periods"
        ]
      }
    },
    "/api/v4/projects/{id}/freeze_periods/{freeze_period_id}": {
      "delete": {
        "description": "Deletes a freeze period for the given `freeze_period_id`. This feature was introduced in GitLab 13.0.",
        "operationId": "projects_freeze_periods/deleteApiV4ProjectsIdFreezePeriodsFreezePeriodId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the freeze period",
            "in": "path",
            "name": "freeze_period_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a freeze period",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_FreezePeriod"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "Delete a freeze period",
        "tags": [
          "freeze_periods"
        ]
      },
      "get": {
        "description": "Get a freeze period for the given `freeze_period_id`. This feature was introduced in GitLab 13.0.",
        "operationId": "projects_freeze_periods/getApiV4ProjectsIdFreezePeriodsFreezePeriodId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the freeze period",
            "in": "path",
            "name": "freeze_period_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a freeze period",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_FreezePeriod"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get a freeze period",
        "tags": [
          "freeze_periods"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates a freeze period for the given `freeze_period_id`. This feature was introduced in GitLab 13.0.",
        "operationId": "projects_freeze_periods/putApiV4ProjectsIdFreezePeriodsFreezePeriodId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "freeze_period_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdFreezePeriodsFreezePeriodId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdFreezePeriodsFreezePeriodId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update a freeze period",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_FreezePeriod"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "Update a freeze period",
        "tags": [
          "freeze_periods"
        ]
      }
    },
    "/api/v4/projects/{id}/groups": {
      "get": {
        "description": "Get ancestor and shared groups for a project",
        "operationId": "projects_groups/getApiV4ProjectsIdGroups",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return list of groups matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "example": "group",
              "type": "string"
            }
          },
          {
            "description": "Array of group ids to exclude from list",
            "in": "query",
            "name": "skip_groups",
            "required": false,
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Include shared groups",
            "in": "query",
            "name": "with_shared",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit to shared groups user has access to",
            "in": "query",
            "name": "shared_visible_only",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit returned shared groups by minimum access level to the project",
            "in": "query",
            "name": "shared_min_access_level",
            "required": false,
            "schema": {
              "enum": [
                10,
                15,
                20,
                30,
                40,
                50
              ],
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get ancestor and shared groups for a project",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_PublicGroupDetails"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/hooks": {
      "get": {
        "description": "Get a list of project hooks",
        "operationId": "projects_hooks/getApiV4ProjectsIdHooks",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List project hooks",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_ProjectHook"
              },
              "type": "array"
            }
          }
        },
        "summary": "List project hooks",
        "tags": [
          "project_hooks"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Adds a hook to a specified project",
        "operationId": "projects_hooks/postApiV4ProjectsIdHooks",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV4ProjectsIdHooks"
              }
            }
          }
        },
        "responses": {
          "201": {
            "contents": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API_Entities_ProjectHook"
                }
              }
            },
            "description": "Add project hook"
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Add project hook",
        "tags": [
          "project_hooks"
        ]
      }
    },
    "/api/v4/projects/{id}/hooks/{hook_id}": {
      "delete": {
        "description": "Removes a hook from a project. This is an idempotent method and can be called multiple times. Either the hook is available or not.",
        "operationId": "projects_hooks/deleteApiV4ProjectsIdHooksHookId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the project hook",
            "in": "path",
            "name": "hook_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Not found"
          }
        },
        "summary": "Delete a project hook",
        "tags": [
          "project_hooks"
        ]
      },
      "get": {
        "description": "Get a specific hook for a project",
        "operationId": "projects_hooks/getApiV4ProjectsIdHooksHookId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project hook",
            "in": "path",
            "name": "hook_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get project hook",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProjectHook"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get project hook",
        "tags": [
          "project_hooks"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Edits a hook for a specified project.",
        "operationId": "projects_hooks/putApiV4ProjectsIdHooksHookId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the project hook",
            "in": "path",
            "name": "hook_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdHooksHookId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdHooksHookId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Edit project hook",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProjectHook"
            }
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Edit project hook",
        "tags": [
          "project_hooks"
        ]
      }
    },
    "/api/v4/projects/{id}/hooks/{hook_id}/custom_headers/{key}": {
      "delete": {
        "description": "Un-Set a custom header",
        "operationId": "projects_hooks/deleteApiV4ProjectsIdHooksHookIdCustomHeadersKey",
        "parameters": [
          {
            "description": "The ID of the hook",
            "in": "path",
            "name": "hook_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The key of the custom header",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Un-Set a custom header"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set a custom header",
        "operationId": "projects_hooks/putApiV4ProjectsIdHooksHookIdCustomHeadersKey",
        "parameters": [
          {
            "description": "The ID of the hook",
            "in": "path",
            "name": "hook_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The key of the custom header",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdHooksHookIdCustomHeadersKey",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdHooksHookIdCustomHeadersKey"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Set a custom header"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/hooks/{hook_id}/events": {
      "get": {
        "description": "List web hook logs by hook id",
        "operationId": "projects_hooks/getApiV4ProjectsIdHooksHookIdEvents",
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "100",
                  "101",
                  "102",
                  "103",
                  "200",
                  "201",
                  "202",
                  "203",
                  "204",
                  "205",
                  "206",
                  "207",
                  "208",
                  "226",
                  "300",
                  "301",
                  "302",
                  "303",
                  "304",
                  "305",
                  "306",
                  "307",
                  "308",
                  "400",
                  "401",
                  "402",
                  "403",
                  "404",
                  "405",
                  "406",
                  "407",
                  "408",
                  "409",
                  "410",
                  "411",
                  "412",
                  "413",
                  "414",
                  "415",
                  "416",
                  "417",
                  "421",
                  "422",
                  "423",
                  "424",
                  "425",
                  "426",
                  "428",
                  "429",
                  "431",
                  "451",
                  "500",
                  "501",
                  "502",
                  "503",
                  "504",
                  "505",
                  "506",
                  "507",
                  "508",
                  "509",
                  "510",
                  "511",
                  "successful",
                  "client_failure",
                  "server_failure"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "maximum": 20,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "hook_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get events for a given hook id"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get events for a given hook id",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/hooks/{hook_id}/events/{hook_log_id}/resend": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Resend a webhook event",
        "operationId": "projects_hooks/postApiV4ProjectsIdHooksHookIdEventsHookLogIdResend",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "hook_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "hook_log_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Resend a webhook event"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "summary": "Resend a webhook event",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/hooks/{hook_id}/test/{trigger}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Triggers a hook test",
        "operationId": "projects_hooks/postApiV4ProjectsIdHooksHookIdTestTrigger",
        "parameters": [
          {
            "description": "The ID of the hook",
            "in": "path",
            "name": "hook_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The type of trigger hook",
            "in": "path",
            "name": "trigger",
            "required": true,
            "schema": {
              "enum": [
                "confidential_issues_events",
                "confidential_note_events",
                "deployment_events",
                "emoji_events",
                "feature_flag_events",
                "issues_events",
                "job_events",
                "merge_requests_events",
                "note_events",
                "pipeline_events",
                "push_events",
                "releases_events",
                "resource_access_token_events",
                "tag_push_events",
                "wiki_page_events",
                "vulnerability_events"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Triggers a hook test"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "429": {
            "description": "Too many requests"
          }
        },
        "summary": "Triggers a hook test",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/hooks/{hook_id}/url_variables/{key}": {
      "delete": {
        "description": "Un-Set a url variable",
        "operationId": "projects_hooks/deleteApiV4ProjectsIdHooksHookIdUrlVariablesKey",
        "parameters": [
          {
            "description": "The ID of the hook",
            "in": "path",
            "name": "hook_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The key of the variable",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Un-Set a url variable"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set a url variable",
        "operationId": "projects_hooks/putApiV4ProjectsIdHooksHookIdUrlVariablesKey",
        "parameters": [
          {
            "description": "The ID of the hook",
            "in": "path",
            "name": "hook_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The key of the variable",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdHooksHookIdUrlVariablesKey",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdHooksHookIdUrlVariablesKey"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Set a url variable"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/housekeeping": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 9.0.",
        "operationId": "projects_housekeeping/postApiV4ProjectsIdHousekeeping",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdHousekeeping",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdHousekeeping"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Start the housekeeping task for a project"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Unauthenticated"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "summary": "Start the housekeeping task for a project",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/import": {
      "get": {
        "description": "This feature was introduced in GitLab 10.6.",
        "operationId": "projects_import/getApiV4ProjectsIdImport",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a project import status",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProjectImportStatus"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "summary": "Get a project import status",
        "tags": [
          "project_import"
        ]
      }
    },
    "/api/v4/projects/{id}/import_project_members/{project_id}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 14.2",
        "operationId": "projects_import_project_members/postApiV4ProjectsIdImportProjectMembersProjectId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the source project to import the members from.",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Import members from another project"
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Project Not Found"
          },
          "422": {
            "description": "Import failed"
          }
        },
        "summary": "Import members from another project",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations": {
      "get": {
        "description": "Get a list of all active integrations.",
        "operationId": "projects_integrations/getApiV4ProjectsIdIntegrations",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List all active integrations",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "List all active integrations",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/apple-app-store": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Apple App Store integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsAppleAppStore",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsAppleAppStore",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsAppleAppStore"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Apple App Store integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Apple App Store integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/asana": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Asana integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsAsana",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsAsana",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsAsana"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Asana integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Asana integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/assembla": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Assembla integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsAssembla",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsAssembla",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsAssembla"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Assembla integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Assembla integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/bamboo": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Bamboo integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsBamboo",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsBamboo",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsBamboo"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Bamboo integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Bamboo integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/bugzilla": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Bugzilla integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsBugzilla",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsBugzilla",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsBugzilla"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Bugzilla integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Bugzilla integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/buildkite": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Buildkite integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsBuildkite",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsBuildkite",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsBuildkite"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Buildkite integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Buildkite integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/campfire": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Campfire integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsCampfire",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsCampfire",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsCampfire"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Campfire integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Campfire integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/clickup": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Clickup integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsClickup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsClickup",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsClickup"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Clickup integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Clickup integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/confluence": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Confluence integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsConfluence",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsConfluence",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsConfluence"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Confluence integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Confluence integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/custom-issue-tracker": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Custom Issue Tracker integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsCustomIssueTracker",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsCustomIssueTracker",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsCustomIssueTracker"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Custom Issue Tracker integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Custom Issue Tracker integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/datadog": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Datadog integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsDatadog",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsDatadog",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsDatadog"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Datadog integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Datadog integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/diffblue-cover": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Diffblue Cover integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsDiffblueCover",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsDiffblueCover",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsDiffblueCover"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Diffblue Cover integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Diffblue Cover integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/discord": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Discord integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsDiscord",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsDiscord",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsDiscord"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Discord integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Discord integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/drone-ci": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Drone Ci integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsDroneCi",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsDroneCi",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsDroneCi"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Drone Ci integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Drone Ci integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/emails-on-push": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Emails On Push integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsEmailsOnPush",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsEmailsOnPush",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsEmailsOnPush"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Emails On Push integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Emails On Push integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/ewm": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Ewm integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsEwm",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsEwm",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsEwm"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Ewm integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Ewm integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/external-wiki": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set External Wiki integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsExternalWiki",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsExternalWiki",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsExternalWiki"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit External Wiki integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit External Wiki integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/git-guardian": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Git Guardian integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsGitGuardian",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsGitGuardian",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsGitGuardian"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Git Guardian integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Git Guardian integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/github": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Github integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsGithub",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsGithub",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsGithub"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Github integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Github integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/gitlab-slack-application": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Gitlab Slack Application integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsGitlabSlackApplication",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsGitlabSlackApplication",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsGitlabSlackApplication"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Gitlab Slack Application integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Gitlab Slack Application integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/google-cloud-platform-artifact-registry": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Google Cloud Platform Artifact Registry integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsGoogleCloudPlatformArtifactRegistry",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsGoogleCloudPlatformArtifactRegistry",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsGoogleCloudPlatformArtifactRegistry"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Google Cloud Platform Artifact Registry integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Google Cloud Platform Artifact Registry integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/google-cloud-platform-workload-identity-federation": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Google Cloud Platform Workload Identity Federation integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederation",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsGoogleCloudPlatformWorkloadIdentityFederation"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Google Cloud Platform Workload Identity Federation integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Google Cloud Platform Workload Identity Federation integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/google-play": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Google Play integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsGooglePlay",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsGooglePlay",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsGooglePlay"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Google Play integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Google Play integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/hangouts-chat": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Hangouts Chat integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsHangoutsChat",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsHangoutsChat",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsHangoutsChat"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Hangouts Chat integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Hangouts Chat integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/harbor": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Harbor integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsHarbor",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsHarbor",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsHarbor"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Harbor integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Harbor integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/irker": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Irker integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsIrker",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsIrker",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsIrker"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Irker integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Irker integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/jenkins": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Jenkins integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsJenkins",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsJenkins",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsJenkins"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Jenkins integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Jenkins integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/jira": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Jira integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsJira",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsJira",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsJira"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Jira integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Jira integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/jira-cloud-app": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Jira Cloud App integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsJiraCloudApp",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsJiraCloudApp",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsJiraCloudApp"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Jira Cloud App integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Jira Cloud App integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/matrix": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Matrix integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsMatrix",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsMatrix",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsMatrix"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Matrix integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Matrix integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/mattermost": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Mattermost integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsMattermost",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsMattermost",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsMattermost"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Mattermost integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Mattermost integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/mattermost-slash-commands": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Mattermost Slash Commands integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsMattermostSlashCommands",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsMattermostSlashCommands",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsMattermostSlashCommands"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Mattermost Slash Commands integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Mattermost Slash Commands integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/mattermost_slash_commands/trigger": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Added in GitLab 8.13",
        "operationId": "projects_integrations/postApiV4ProjectsIdIntegrationsMattermostSlashCommandsTrigger",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdIntegrationsMattermostSlashCommandsTrigger",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdIntegrationsMattermostSlashCommandsTrigger"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Trigger a slash command for mattermost-slash-commands"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Trigger a slash command for mattermost-slash-commands",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/microsoft-teams": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Microsoft Teams integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsMicrosoftTeams",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsMicrosoftTeams",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsMicrosoftTeams"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Microsoft Teams integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Microsoft Teams integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/mock-ci": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Mock Ci integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsMockCi",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsMockCi",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsMockCi"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Mock Ci integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Mock Ci integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/mock-monitoring": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Mock Monitoring integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsMockMonitoring",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsMockMonitoring",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsMockMonitoring"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Mock Monitoring integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Mock Monitoring integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/packagist": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Packagist integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsPackagist",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsPackagist",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsPackagist"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Packagist integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Packagist integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/phorge": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Phorge integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsPhorge",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsPhorge",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsPhorge"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Phorge integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Phorge integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/pipelines-email": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Pipelines Email integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsPipelinesEmail",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsPipelinesEmail",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsPipelinesEmail"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Pipelines Email integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Pipelines Email integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/pivotaltracker": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Pivotaltracker integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsPivotaltracker",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsPivotaltracker",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsPivotaltracker"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Pivotaltracker integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Pivotaltracker integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/pumble": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Pumble integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsPumble",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsPumble",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsPumble"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Pumble integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Pumble integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/pushover": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Pushover integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsPushover",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsPushover",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsPushover"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Pushover integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Pushover integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/redmine": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Redmine integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsRedmine",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsRedmine",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsRedmine"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Redmine integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Redmine integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/slack": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Slack integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsSlack",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsSlack",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsSlack"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Slack integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Slack integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/slack-slash-commands": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Slack Slash Commands integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsSlackSlashCommands",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsSlackSlashCommands",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsSlackSlashCommands"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Slack Slash Commands integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Slack Slash Commands integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/slack_slash_commands/trigger": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Added in GitLab 8.13",
        "operationId": "projects_integrations/postApiV4ProjectsIdIntegrationsSlackSlashCommandsTrigger",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdIntegrationsSlackSlashCommandsTrigger",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdIntegrationsSlackSlashCommandsTrigger"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Trigger a slash command for slack-slash-commands"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Trigger a slash command for slack-slash-commands",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/squash-tm": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Squash Tm integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsSquashTm",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsSquashTm",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsSquashTm"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Squash Tm integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Squash Tm integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/teamcity": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Teamcity integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsTeamcity",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsTeamcity",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsTeamcity"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Teamcity integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Teamcity integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/telegram": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Telegram integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsTelegram",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsTelegram",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsTelegram"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Telegram integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Telegram integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/unify-circuit": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Unify Circuit integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsUnifyCircuit",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsUnifyCircuit",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsUnifyCircuit"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Unify Circuit integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Unify Circuit integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/webex-teams": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Webex Teams integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsWebexTeams",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsWebexTeams",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsWebexTeams"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Webex Teams integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Webex Teams integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/youtrack": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Youtrack integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsYoutrack",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsYoutrack",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsYoutrack"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Youtrack integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Youtrack integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/zentao": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Zentao integration.",
        "operationId": "projects_integrations/putApiV4ProjectsIdIntegrationsZentao",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdIntegrationsZentao",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdIntegrationsZentao"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Zentao integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Zentao integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/integrations/{slug}": {
      "delete": {
        "description": "Disable the integration. Integration settings are preserved.",
        "operationId": "projects_integrations/deleteApiV4ProjectsIdIntegrationsSlug",
        "parameters": [
          {
            "description": "The name of the integration",
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "enum": [
                "apple-app-store",
                "asana",
                "assembla",
                "bamboo",
                "bugzilla",
                "buildkite",
                "campfire",
                "confluence",
                "custom-issue-tracker",
                "datadog",
                "diffblue-cover",
                "discord",
                "drone-ci",
                "emails-on-push",
                "external-wiki",
                "gitlab-slack-application",
                "google-play",
                "hangouts-chat",
                "harbor",
                "irker",
                "jenkins",
                "jira",
                "jira-cloud-app",
                "matrix",
                "mattermost-slash-commands",
                "slack-slash-commands",
                "packagist",
                "phorge",
                "pipelines-email",
                "pivotaltracker",
                "pumble",
                "pushover",
                "redmine",
                "ewm",
                "youtrack",
                "clickup",
                "slack",
                "microsoft-teams",
                "mattermost",
                "teamcity",
                "telegram",
                "unify-circuit",
                "webex-teams",
                "zentao",
                "squash-tm",
                "github",
                "git-guardian",
                "google-cloud-platform-artifact-registry",
                "google-cloud-platform-workload-identity-federation",
                "mock-ci",
                "mock-monitoring"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Disable an integration"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Disable an integration",
        "tags": [
          "integrations"
        ]
      },
      "get": {
        "description": "Get the integration settings.",
        "operationId": "projects_integrations/getApiV4ProjectsIdIntegrationsSlug",
        "parameters": [
          {
            "description": "The name of the integration",
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "enum": [
                "apple-app-store",
                "asana",
                "assembla",
                "bamboo",
                "bugzilla",
                "buildkite",
                "campfire",
                "confluence",
                "custom-issue-tracker",
                "datadog",
                "diffblue-cover",
                "discord",
                "drone-ci",
                "emails-on-push",
                "external-wiki",
                "gitlab-slack-application",
                "google-play",
                "hangouts-chat",
                "harbor",
                "irker",
                "jenkins",
                "jira",
                "jira-cloud-app",
                "matrix",
                "mattermost-slash-commands",
                "slack-slash-commands",
                "packagist",
                "phorge",
                "pipelines-email",
                "pivotaltracker",
                "pumble",
                "pushover",
                "redmine",
                "ewm",
                "youtrack",
                "clickup",
                "slack",
                "microsoft-teams",
                "mattermost",
                "teamcity",
                "telegram",
                "unify-circuit",
                "webex-teams",
                "zentao",
                "squash-tm",
                "github",
                "git-guardian",
                "google-cloud-platform-artifact-registry",
                "google-cloud-platform-workload-identity-federation",
                "mock-ci",
                "mock-monitoring"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get an integration settings",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Integration"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get an integration settings",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/invitations": {
      "get": {
        "description": "This feature was introduced in GitLab 13.6",
        "operationId": "projects_invitations/getApiV4ProjectsIdInvitations",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "A query string to search for members",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of group or project invitations viewable by the authenticated user",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Invitation"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get a list of group or project invitations viewable by the authenticated user",
        "tags": [
          "invitations"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 13.6",
        "operationId": "projects_invitations/postApiV4ProjectsIdInvitations",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdInvitations",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdInvitations"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Invite non-members by email address to a group or project.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Invitation"
            }
          }
        },
        "summary": "Invite non-members by email address to a group or project.",
        "tags": [
          "invitations"
        ]
      }
    },
    "/api/v4/projects/{id}/invitations/{email}": {
      "delete": {
        "description": "Removes an invitation from a group or project.",
        "operationId": "projects_invitations/deleteApiV4ProjectsIdInvitationsEmail",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The email address of the invitation",
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Removes an invitation from a group or project."
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Could not delete invitation"
          }
        },
        "tags": [
          "invitations"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates a group or project invitation.",
        "operationId": "projects_invitations/putApiV4ProjectsIdInvitationsEmail",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The email address of the invitation",
            "in": "path",
            "name": "email",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdInvitationsEmail",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdInvitationsEmail"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Updates a group or project invitation.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Invitation"
            }
          }
        },
        "tags": [
          "invitations"
        ]
      }
    },
    "/api/v4/projects/{id}/invited_groups": {
      "get": {
        "description": "Get a list of invited groups in this project",
        "operationId": "projects_invited_groups/getApiV4ProjectsIdInvitedGroups",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filter by group relation",
            "in": "query",
            "name": "relation",
            "required": false,
            "schema": {
              "items": {
                "enum": [
                  "direct",
                  "inherited"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Search for a specific group",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit by minimum access level of authenticated user",
            "in": "query",
            "name": "min_access_level",
            "required": false,
            "schema": {
              "enum": [
                10,
                15,
                20,
                30,
                40,
                50
              ],
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Include custom attributes in the response",
            "in": "query",
            "name": "with_custom_attributes",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of invited groups in this project",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Group"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/issues/{eventable_id}/resource_milestone_events": {
      "get": {
        "description": "Gets a list of all milestone events for a single Issue",
        "operationId": "projects_issues/getApiV4ProjectsIdIssuesEventableIdResourceMilestoneEvents",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the eventable",
            "in": "path",
            "name": "eventable_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List project Issue milestone events",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_ResourceMilestoneEvent"
              },
              "type": "array"
            }
          }
        },
        "summary": "List project Issue milestone events",
        "tags": [
          "resource_milestone_events"
        ]
      }
    },
    "/api/v4/projects/{id}/issues/{eventable_id}/resource_milestone_events/{event_id}": {
      "get": {
        "description": "Returns a single milestone event for a specific project Issue",
        "operationId": "projects_issues/getApiV4ProjectsIdIssuesEventableIdResourceMilestoneEventsEventId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a resource milestone event",
            "in": "path",
            "name": "event_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the eventable",
            "in": "path",
            "name": "eventable_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get single Issue milestone event",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ResourceMilestoneEvent"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get single Issue milestone event",
        "tags": [
          "resource_milestone_events"
        ]
      }
    },
    "/api/v4/projects/{id}/issues/{issue_iid}/award_emoji": {
      "get": {
        "description": "Get a list of all emoji reactions for a specified awardable. This feature was introduced in 8.9",
        "operationId": "projects_issues/getApiV4ProjectsIdIssuesIssueIidAwardEmoji",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID (`iid` for merge requests/issues/epics, `id` for snippets) of an awardable.",
            "in": "path",
            "name": "issue_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List an awardable's emoji reactions for projects",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_AwardEmoji"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "List an awardable's emoji reactions for projects",
        "tags": [
          "award_emoji"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Add an emoji reaction on the specified awardable. This feature was introduced in 8.9",
        "operationId": "projects_issues/postApiV4ProjectsIdIssuesIssueIidAwardEmoji",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "issue_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdIssuesIssueIidAwardEmoji",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdIssuesIssueIidAwardEmoji"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add a new emoji reaction",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AwardEmoji"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Add a new emoji reaction",
        "tags": [
          "award_emoji"
        ]
      }
    },
    "/api/v4/projects/{id}/issues/{issue_iid}/award_emoji/{award_id}": {
      "delete": {
        "description": "Only an administrator or the author of the reaction can delete an emoji reaction. This feature was introduced in 8.9",
        "operationId": "projects_issues/deleteApiV4ProjectsIdIssuesIssueIidAwardEmojiAwardId",
        "parameters": [
          {
            "description": "ID of an emoji reaction.",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "issue_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete an emoji reaction"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Delete an emoji reaction",
        "tags": [
          "award_emoji"
        ]
      },
      "get": {
        "description": "Get a single emoji reaction from an issue, snippet, or merge request. This feature was introduced in 8.9",
        "operationId": "projects_issues/getApiV4ProjectsIdIssuesIssueIidAwardEmojiAwardId",
        "parameters": [
          {
            "description": "ID of the emoji reaction.",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "issue_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single emoji reaction",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AwardEmoji"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get a single emoji reaction",
        "tags": [
          "award_emoji"
        ]
      }
    },
    "/api/v4/projects/{id}/issues/{issue_iid}/links": {
      "get": {
        "description": "Get a list of a given issue’s linked issues, sorted by the relationship creation datetime (ascending).Issues are filtered according to the user authorizations.",
        "operationId": "projects_issues/getApiV4ProjectsIdIssuesIssueIidLinks",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The internal ID of a project’s issue",
            "in": "path",
            "name": "issue_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List issue relations",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_RelatedIssue"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "List issue relations",
        "tags": [
          "issue_links"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates a two-way relation between two issues.The user must be allowed to update both issues to succeed.",
        "operationId": "projects_issues/postApiV4ProjectsIdIssuesIssueIidLinks",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The internal ID of a project’s issue",
            "in": "path",
            "name": "issue_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdIssuesIssueIidLinks",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdIssuesIssueIidLinks"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create an issue link",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IssueLink"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "Create an issue link",
        "tags": [
          "issue_links"
        ]
      }
    },
    "/api/v4/projects/{id}/issues/{issue_iid}/links/{issue_link_id}": {
      "delete": {
        "description": "Deletes an issue link, thus removes the two-way relationship.",
        "operationId": "projects_issues/deleteApiV4ProjectsIdIssuesIssueIidLinksIssueLinkId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The internal ID of a project’s issue",
            "in": "path",
            "name": "issue_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of an issue relationship",
            "in": "path",
            "name": "issue_link_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete an issue link",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IssueLink"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Delete an issue link",
        "tags": [
          "issue_links"
        ]
      },
      "get": {
        "description": "Gets details about an issue link. This feature was introduced in GitLab 15.1.",
        "operationId": "projects_issues/getApiV4ProjectsIdIssuesIssueIidLinksIssueLinkId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The internal ID of a project’s issue",
            "in": "path",
            "name": "issue_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "ID of an issue relationship",
            "in": "path",
            "name": "issue_link_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get an issue link",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IssueLink"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get an issue link",
        "tags": [
          "issue_links"
        ]
      }
    },
    "/api/v4/projects/{id}/issues/{issue_iid}/notes/{note_id}/award_emoji": {
      "get": {
        "description": "Get a list of all emoji reactions for a specified awardable. This feature was introduced in 8.9",
        "operationId": "projects_issues/getApiV4ProjectsIdIssuesIssueIidNotesNoteIdAwardEmoji",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "issue_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List an awardable's emoji reactions for projects",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_AwardEmoji"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "List an awardable's emoji reactions for projects",
        "tags": [
          "award_emoji"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Add an emoji reaction on the specified awardable. This feature was introduced in 8.9",
        "operationId": "projects_issues/postApiV4ProjectsIdIssuesIssueIidNotesNoteIdAwardEmoji",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "issue_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdIssuesIssueIidNotesNoteIdAwardEmoji",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdIssuesIssueIidNotesNoteIdAwardEmoji"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add a new emoji reaction",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AwardEmoji"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Add a new emoji reaction",
        "tags": [
          "award_emoji"
        ]
      }
    },
    "/api/v4/projects/{id}/issues/{issue_iid}/notes/{note_id}/award_emoji/{award_id}": {
      "delete": {
        "description": "Only an administrator or the author of the reaction can delete an emoji reaction. This feature was introduced in 8.9",
        "operationId": "projects_issues/deleteApiV4ProjectsIdIssuesIssueIidNotesNoteIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "ID of an emoji reaction.",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "issue_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete an emoji reaction"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Delete an emoji reaction",
        "tags": [
          "award_emoji"
        ]
      },
      "get": {
        "description": "Get a single emoji reaction from an issue, snippet, or merge request. This feature was introduced in 8.9",
        "operationId": "projects_issues/getApiV4ProjectsIdIssuesIssueIidNotesNoteIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "ID of the emoji reaction.",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "issue_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single emoji reaction",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AwardEmoji"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get a single emoji reaction",
        "tags": [
          "award_emoji"
        ]
      }
    },
    "/api/v4/projects/{id}/job_token_scope": {
      "get": {
        "description": "Fetch CI_JOB_TOKEN access settings.",
        "operationId": "projects_job_token_scope/getApiV4ProjectsIdJobTokenScope",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Fetch CI_JOB_TOKEN access settings.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProjectJobTokenScope"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects_job_token_scope"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Patch CI_JOB_TOKEN access settings.",
        "operationId": "projects_job_token_scope/patchApiV4ProjectsIdJobTokenScope",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "patchApiV4ProjectsIdJobTokenScope",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/patchApiV4ProjectsIdJobTokenScope"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Patch CI_JOB_TOKEN access settings."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects_job_token_scope"
        ]
      }
    },
    "/api/v4/projects/{id}/job_token_scope/allowlist": {
      "get": {
        "description": "Fetch project inbound allowlist for CI_JOB_TOKEN access settings.",
        "operationId": "projects_job_token_scope/getApiV4ProjectsIdJobTokenScopeAllowlist",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Fetch project inbound allowlist for CI_JOB_TOKEN access settings.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_BasicProjectDetails"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects_job_token_scope"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Add target project to allowlist.",
        "operationId": "projects_job_token_scope/postApiV4ProjectsIdJobTokenScopeAllowlist",
        "parameters": [
          {
            "description": "ID of user project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdJobTokenScopeAllowlist",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdJobTokenScopeAllowlist"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add target project to allowlist.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_BasicProjectDetails"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "tags": [
          "projects_job_token_scope"
        ]
      }
    },
    "/api/v4/projects/{id}/job_token_scope/allowlist/{target_project_id}": {
      "delete": {
        "description": "Delete project from allowlist.",
        "operationId": "projects_job_token_scope/deleteApiV4ProjectsIdJobTokenScopeAllowlistTargetProjectId",
        "parameters": [
          {
            "description": "ID of user project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "ID of the project to be removed from the allowlist",
            "in": "path",
            "name": "target_project_id",
            "required": true,
            "schema": {
              "example": 2,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete project from allowlist."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects_job_token_scope"
        ]
      }
    },
    "/api/v4/projects/{id}/job_token_scope/groups_allowlist": {
      "get": {
        "description": "Fetch project groups allowlist for CI_JOB_TOKEN access settings.",
        "operationId": "projects_job_token_scope/getApiV4ProjectsIdJobTokenScopeGroupsAllowlist",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Fetch project groups allowlist for CI_JOB_TOKEN access settings.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_BasicProjectDetails"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects_job_token_scope"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Add target group to allowlist.",
        "operationId": "projects_job_token_scope/postApiV4ProjectsIdJobTokenScopeGroupsAllowlist",
        "parameters": [
          {
            "description": "ID of user project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdJobTokenScopeGroupsAllowlist",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdJobTokenScopeGroupsAllowlist"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add target group to allowlist.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_BasicGroupDetails"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "tags": [
          "projects_job_token_scope"
        ]
      }
    },
    "/api/v4/projects/{id}/job_token_scope/groups_allowlist/{target_group_id}": {
      "delete": {
        "description": "Delete target group from allowlist.",
        "operationId": "projects_job_token_scope/deleteApiV4ProjectsIdJobTokenScopeGroupsAllowlistTargetGroupId",
        "parameters": [
          {
            "description": "ID of user project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "ID of the group to be removed from the allowlist",
            "in": "path",
            "name": "target_group_id",
            "required": true,
            "schema": {
              "example": 2,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete target group from allowlist."
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects_job_token_scope"
        ]
      }
    },
    "/api/v4/projects/{id}/jobs": {
      "get": {
        "description": "Get a projects jobs",
        "operationId": "projects_jobs/getApiV4ProjectsIdJobs",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The scope of builds to show",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "example": [
                "pending",
                "running"
              ],
              "items": {
                "enum": [
                  "created",
                  "waiting_for_resource",
                  "preparing",
                  "waiting_for_callback",
                  "pending",
                  "running",
                  "success",
                  "failed",
                  "canceling",
                  "canceled",
                  "skipped",
                  "manual",
                  "scheduled"
                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a projects jobs",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Ci_Job"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/jobs/artifacts/{ref_name}/download": {
      "get": {
        "description": "This feature was introduced in GitLab 8.10",
        "operationId": "projects_jobs/getApiV4ProjectsIdJobsArtifactsRefNameDownload",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Branch or tag name in repository. `HEAD` or `SHA` references are not supported.",
            "in": "path",
            "name": "ref_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the job.",
            "in": "query",
            "name": "job",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "To be used with triggers for multi-project pipelines, available only on Premium and Ultimate tiers.",
            "in": "query",
            "name": "job_token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download the artifacts archive from a job"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Download the artifacts archive from a job",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/jobs/artifacts/{ref_name}/raw/*artifact_path": {
      "get": {
        "description": "This feature was introduced in GitLab 11.5",
        "operationId": "projects_jobs/getApiV4ProjectsIdJobsArtifactsRefNameRaw*artifactPath",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Branch or tag name in repository. `HEAD` or `SHA` references are not supported.",
            "in": "path",
            "name": "ref_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the job.",
            "in": "query",
            "name": "job",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Path to a file inside the artifacts archive.",
            "in": "query",
            "name": "artifact_path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "To be used with triggers for multi-project pipelines, available only on Premium and Ultimate tiers.",
            "in": "query",
            "name": "job_token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download a specific file from artifacts archive from a ref"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Download a specific file from artifacts archive from a ref",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/jobs/{job_id}": {
      "get": {
        "description": "Get a specific job of a project",
        "operationId": "projects_jobs/getApiV4ProjectsIdJobsJobId",
        "parameters": [
          {
            "description": "The ID of a job",
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "example": 88,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a specific job of a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Job"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/jobs/{job_id}/artifacts": {
      "delete": {
        "description": "This feature was introduced in GitLab 11.9",
        "operationId": "projects_jobs/deleteApiV4ProjectsIdJobsJobIdArtifacts",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a job",
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete the artifacts files from a job"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "summary": "Delete the artifacts files from a job",
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "This feature was introduced in GitLab 8.5",
        "operationId": "projects_jobs/getApiV4ProjectsIdJobsJobIdArtifacts",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a job",
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "To be used with triggers for multi-project pipelines, available only on Premium and Ultimate tiers.",
            "in": "query",
            "name": "job_token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download the artifacts archive from a job"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Download the artifacts archive from a job",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/jobs/{job_id}/artifacts/*artifact_path": {
      "get": {
        "description": "This feature was introduced in GitLab 10.0",
        "operationId": "projects_jobs/getApiV4ProjectsIdJobsJobIdArtifacts*artifactPath",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a job",
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Path to a file inside the artifacts archive.",
            "in": "query",
            "name": "artifact_path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "To be used with triggers for multi-project pipelines, available only on Premium and Ultimate tiers.",
            "in": "query",
            "name": "job_token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download a specific file from artifacts archive"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Download a specific file from artifacts archive",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/jobs/{job_id}/artifacts/keep": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Keep the artifacts to prevent them from being deleted",
        "operationId": "projects_jobs/postApiV4ProjectsIdJobsJobIdArtifactsKeep",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a job",
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Keep the artifacts to prevent them from being deleted",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Job"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/jobs/{job_id}/cancel": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Cancel a specific job of a project",
        "operationId": "projects_jobs/postApiV4ProjectsIdJobsJobIdCancel",
        "parameters": [
          {
            "description": "The ID of a job",
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "example": 88,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Cancel a specific job of a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Job"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/jobs/{job_id}/erase": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Erase job (remove artifacts and the trace)",
        "operationId": "projects_jobs/postApiV4ProjectsIdJobsJobIdErase",
        "parameters": [
          {
            "description": "The ID of a build",
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "example": 88,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Erase job (remove artifacts and the trace)",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Job"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/jobs/{job_id}/play": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was added in GitLab 8.11",
        "operationId": "projects_jobs/postApiV4ProjectsIdJobsJobIdPlay",
        "parameters": [
          {
            "description": "The ID of a Job",
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "example": 88,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdJobsJobIdPlay",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdJobsJobIdPlay"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Trigger an actionable job (manual, delayed, etc)",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_JobBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Trigger an actionable job (manual, delayed, etc)",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/jobs/{job_id}/retry": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Retry a specific job of a project",
        "operationId": "projects_jobs/postApiV4ProjectsIdJobsJobIdRetry",
        "parameters": [
          {
            "description": "The ID of a job",
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "example": 88,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Retry a specific job of a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Job"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/jobs/{job_id}/trace": {
      "get": {
        "description": "Get a trace of a specific job of a project",
        "operationId": "projects_jobs/getApiV4ProjectsIdJobsJobIdTrace",
        "parameters": [
          {
            "description": "The ID of a job",
            "in": "path",
            "name": "job_id",
            "required": true,
            "schema": {
              "example": 88,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a trace of a specific job of a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Job"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/languages": {
      "get": {
        "description": "Get languages in project repository",
        "operationId": "projects_languages/getApiV4ProjectsIdLanguages",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get languages in project repository"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/members": {
      "get": {
        "description": "Gets a list of group or project members viewable by the authenticated user.",
        "operationId": "projects_members/getApiV4ProjectsIdMembers",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A query string to search for members",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of user ids to look up for membership",
            "in": "query",
            "name": "user_ids",
            "required": false,
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Array of user ids to be skipped for membership",
            "in": "query",
            "name": "skip_users",
            "required": false,
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Show seat information for members",
            "in": "query",
            "name": "show_seat_info",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "List only members with linked SAML identity",
            "in": "query",
            "name": "with_saml_identity",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets a list of group or project members viewable by the authenticated user.",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Member"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Adds a member to a group or project.",
        "operationId": "projects_members/postApiV4ProjectsIdMembers",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdMembers",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdMembers"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Adds a member to a group or project.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Member"
            }
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/api/v4/projects/{id}/members/all": {
      "get": {
        "description": "Gets a list of group or project members viewable by the authenticated user, including those who gained membership through ancestor group.",
        "operationId": "projects_members/getApiV4ProjectsIdMembersAll",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A query string to search for members",
            "in": "query",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Array of user ids to look up for membership",
            "in": "query",
            "name": "user_ids",
            "required": false,
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Show seat information for members",
            "in": "query",
            "name": "show_seat_info",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Filter results by member state",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "enum": [
                "awaiting",
                "active"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets a list of group or project members viewable by the authenticated user, including those who gained membership through ancestor group.",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Member"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/api/v4/projects/{id}/members/all/{user_id}": {
      "get": {
        "description": "Gets a member of a group or project, including those who gained membership through ancestor group",
        "operationId": "projects_members/getApiV4ProjectsIdMembersAllUserId",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API_Entities_Member"
                }
              }
            },
            "description": "Gets a member of a group or project, including those who gained membership through ancestor group"
          },
          "404": {}
        },
        "tags": [
          "members"
        ]
      }
    },
    "/api/v4/projects/{id}/members/{user_id}": {
      "delete": {
        "description": "Removes a user from a group or project.",
        "operationId": "projects_members/deleteApiV4ProjectsIdMembersUserId",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Flag indicating if the deletion of direct memberships of the removed member in subgroups and projects should be skipped",
            "in": "query",
            "name": "skip_subresources",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Flag indicating if the removed member should be unassigned from any issues or merge requests within given group or project",
            "in": "query",
            "name": "unassign_issuables",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Removes a user from a group or project."
          }
        },
        "tags": [
          "members"
        ]
      },
      "get": {
        "description": "Gets a member of a group or project.",
        "operationId": "projects_members/getApiV4ProjectsIdMembersUserId",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets a member of a group or project.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Member"
            }
          }
        },
        "tags": [
          "members"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates a member of a group or project.",
        "operationId": "projects_members/putApiV4ProjectsIdMembersUserId",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The user ID of the new member",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdMembersUserId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdMembersUserId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Updates a member of a group or project.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Member"
            }
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests": {
      "get": {
        "description": "Get all merge requests for this project.",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequests",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests created by the given user `id`. Mutually exclusive with `author_username`. Combine with `scope=all` or `scope=assigned_to_me`.",
            "in": "query",
            "name": "author_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
            "in": "query",
            "name": "author_username",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests assigned to the given user `id`. `None` returns unassigned merge requests. `Any` returns merge requests with an assignee.",
            "in": "query",
            "name": "assignee_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
            "in": "query",
            "name": "assignee_username",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Returns merge requests which have the user as a reviewer with the given `username`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_id`. Introduced in GitLab 13.8.",
            "in": "query",
            "name": "reviewer_username",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests matching a comma-separated list of labels. `None` lists all merge requests with no labels. `Any` lists all merge requests with at least one label. Predefined names are case-insensitive.",
            "in": "query",
            "name": "labels",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Returns merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.",
            "in": "query",
            "name": "milestone",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests reacted by the authenticated user by the given `emoji`. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.",
            "in": "query",
            "name": "my_reaction_emoji",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests which have the user as a reviewer with the given user `id`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_username`.",
            "in": "query",
            "name": "reviewer_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns `all` merge requests or just those that are `opened`, `closed`, `locked`, or `merged`.",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "default": "all",
              "enum": [
                "opened",
                "closed",
                "locked",
                "merged",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests ordered by `created_at`, `label_priority`, `milestone_due`, `popularity`, `priority`, `title`, `updated_at` or `merged_at` fields. Introduced in GitLab 14.8.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "created_at",
                "label_priority",
                "milestone_due",
                "popularity",
                "priority",
                "title",
                "updated_at",
                "merged_at"
              ],
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests sorted in `asc` or `desc` order.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "If `true`, response returns more details for each label in labels field: `:name`,`:color`, `:description`, `:description_html`, `:text_color`",
            "in": "query",
            "name": "with_labels_details",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "If `true`, this projection requests (but does not guarantee) that the `merge_status` field be recalculated asynchronously. Introduced in GitLab 13.0.",
            "in": "query",
            "name": "with_merge_status_recheck",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Returns merge requests created on or after the given time. Expected in ISO 8601 format.",
            "in": "query",
            "name": "created_after",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests created on or before the given time. Expected in ISO 8601 format.",
            "in": "query",
            "name": "created_before",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests updated on or after the given time. Expected in ISO 8601 format.",
            "in": "query",
            "name": "updated_after",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests updated on or before the given time. Expected in ISO 8601 format.",
            "in": "query",
            "name": "updated_before",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "If simple, returns the `iid`, URL, title, description, and basic state of merge request",
            "in": "query",
            "name": "view",
            "required": false,
            "schema": {
              "enum": [
                "simple"
              ],
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests for the given scope: `created_by_me`, `assigned_to_me` or `all`",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "created-by-me",
                "assigned-to-me",
                "created_by_me",
                "assigned_to_me",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests with the given source branch",
            "in": "query",
            "name": "source_branch",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests with the given source project id",
            "in": "query",
            "name": "source_project_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns merge requests with the given target branch",
            "in": "query",
            "name": "target_branch",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search merge requests against their `title` and `description`.",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Modify the scope of the search attribute. `title`, `description`, or a string joining them with comma.",
            "in": "query",
            "name": "in",
            "required": false,
            "schema": {
              "example": "title,description",
              "type": "string"
            }
          },
          {
            "description": "Filter merge requests against their `wip` status. `yes` to return only draft merge requests, `no` to return non-draft merge requests.",
            "in": "query",
            "name": "wip",
            "required": false,
            "schema": {
              "enum": [
                "yes",
                "no"
              ],
              "type": "string"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests created by the given user `id`. Mutually exclusive with `author_username`. Combine with `scope=all` or `scope=assigned_to_me`.",
            "in": "query",
            "name": "not[author_id]",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
            "in": "query",
            "name": "not[author_username]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests assigned to the given user `id`. `None` returns unassigned merge requests. `Any` returns merge requests with an assignee.",
            "in": "query",
            "name": "not[assignee_id]",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests created by the given `username`. Mutually exclusive with `author_id`.",
            "in": "query",
            "name": "not[assignee_username]",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests which have the user as a reviewer with the given `username`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_id`. Introduced in GitLab 13.8.",
            "in": "query",
            "name": "not[reviewer_username]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests matching a comma-separated list of labels. `None` lists all merge requests with no labels. `Any` lists all merge requests with at least one label. Predefined names are case-insensitive.",
            "in": "query",
            "name": "not[labels]",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests for a specific milestone. `None` returns merge requests with no milestone. `Any` returns merge requests that have an assigned milestone.",
            "in": "query",
            "name": "not[milestone]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests reacted by the authenticated user by the given `emoji`. `None` returns issues not given a reaction. `Any` returns issues given at least one reaction.",
            "in": "query",
            "name": "not[my_reaction_emoji]",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "`<Negated>` Returns merge requests which have the user as a reviewer with the given user `id`. `None` returns merge requests with no reviewers. `Any` returns merge requests with any reviewer. Mutually exclusive with `reviewer_username`.",
            "in": "query",
            "name": "not[reviewer_id]",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns merge requests deployed before the given date/time. Expected in ISO 8601 format.",
            "in": "query",
            "name": "deployed_before",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests deployed after the given date/time. Expected in ISO 8601 format",
            "in": "query",
            "name": "deployed_after",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests deployed to the given environment",
            "in": "query",
            "name": "environment",
            "required": false,
            "schema": {
              "example": "2019-03-15T08:00:00Z",
              "type": "string"
            }
          },
          {
            "description": "Filters merge requests by their `approved` status. `yes` returns only approved merge requests. `no` returns only non-approved merge requests.",
            "in": "query",
            "name": "approved",
            "required": false,
            "schema": {
              "enum": [
                "yes",
                "no"
              ],
              "type": "string"
            }
          },
          {
            "description": "Returns merge requests which have been merged by the user with the given user `id`. Mutually exclusive with `merge_user_username`.",
            "in": "query",
            "name": "merge_user_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns merge requests which have been merged by the user with the given `username`. Mutually exclusive with `merge_user_id`.",
            "in": "query",
            "name": "merge_user_username",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return merge requests which have specified the users with the given IDs as an individual approver",
            "in": "query",
            "name": "approver_ids",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return merge requests which have been approved by the specified users with the given IDs",
            "in": "query",
            "name": "approved_by_ids",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return merge requests which have been approved by the specified users with the given\n            usernames",
            "in": "query",
            "name": "approved_by_usernames",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns the request having the given `iid`.",
            "in": "query",
            "name": "iids",
            "required": false,
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List project merge requests",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_MergeRequestBasic"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "List project merge requests",
        "tags": [
          "merge_requests"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new merge request.",
        "operationId": "projects_merge_requests/postApiV4ProjectsIdMergeRequests",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdMergeRequests",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdMergeRequests"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create merge request",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_MergeRequest"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create merge request",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{eventable_id}/resource_milestone_events": {
      "get": {
        "description": "Gets a list of all milestone events for a single Merge request",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsEventableIdResourceMilestoneEvents",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the eventable",
            "in": "path",
            "name": "eventable_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List project Merge request milestone events",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_ResourceMilestoneEvent"
              },
              "type": "array"
            }
          }
        },
        "summary": "List project Merge request milestone events",
        "tags": [
          "resource_milestone_events"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{eventable_id}/resource_milestone_events/{event_id}": {
      "get": {
        "description": "Returns a single milestone event for a specific project Merge request",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsEventableIdResourceMilestoneEventsEventId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a resource milestone event",
            "in": "path",
            "name": "event_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the eventable",
            "in": "path",
            "name": "eventable_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get single Merge request milestone event",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ResourceMilestoneEvent"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get single Merge request milestone event",
        "tags": [
          "resource_milestone_events"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}": {
      "delete": {
        "description": "Only for administrators and project owners. Deletes the merge request in question. ",
        "operationId": "projects_merge_requests/deleteApiV4ProjectsIdMergeRequestsMergeRequestIid",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The internal ID of the merge request.",
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a merge request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "412": {
            "description": "Precondition failed"
          }
        },
        "summary": "Delete a merge request",
        "tags": [
          "merge_requests"
        ]
      },
      "get": {
        "description": "Shows information about a single merge request. Note: the `changes_count` value in the response is a string, not an integer. This is because when an merge request has too many changes to display and store, it is capped at 1,000. In that case, the API returns the string `\"1000+\"` for the changes count.",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIid",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The internal ID of the merge request.",
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "If `true`, response includes rendered HTML for title and description.",
            "in": "query",
            "name": "render_html",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If `true`, response includes the commits behind the target branch.",
            "in": "query",
            "name": "include_diverged_commits_count",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "If `true`, response includes whether a rebase operation is in progress.",
            "in": "query",
            "name": "include_rebase_in_progress",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API_Entities_MergeRequest"
                }
              }
            },
            "description": "Get single merge request"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get single merge request",
        "tags": [
          "merge_requests"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates an existing merge request. You can change the target branch, title, or even close the merge request.",
        "operationId": "projects_merge_requests/putApiV4ProjectsIdMergeRequestsMergeRequestIid",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdMergeRequestsMergeRequestIid",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdMergeRequestsMergeRequestIid"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update merge request",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_MergeRequest"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Update merge request",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/add_spent_time": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Adds spent time for this merge_request.",
        "operationId": "projects_merge_requests/postApiV4ProjectsIdMergeRequestsMergeRequestIidAddSpentTime",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The internal ID of the merge_request.",
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdMergeRequestsMergeRequestIidAddSpentTime",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdMergeRequestsMergeRequestIidAddSpentTime"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add spent time for a merge_request",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IssuableTimeStats"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Add spent time for a merge_request",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/approval_state": {
      "get": {
        "description": "Get approval state of merge request",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidApprovalState",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The IID of a merge request",
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get approval state of merge request",
            "schema": {
              "$ref": "#/components/schemas/EE_API_Entities_MergeRequestApprovalState"
            }
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/approvals": {
      "get": {
        "description": "List approvals for merge request",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidApprovals",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List approvals for merge request",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_MergeRequestApprovals"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "deprecated": true,
        "description": "This feature was introduced in 10.6 and deprecated in 16.0",
        "operationId": "projects_merge_requests/postApiV4ProjectsIdMergeRequestsMergeRequestIidApprovals",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The IID of a merge request",
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdMergeRequestsMergeRequestIidApprovals",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdMergeRequestsMergeRequestIidApprovals"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Deprecated in 16.0: Use the merge request approvals API instead. Change approval-related configuration",
            "schema": {
              "$ref": "#/components/schemas/EE_API_Entities_ApprovalState"
            }
          }
        },
        "summary": "Deprecated in 16.0: Use the merge request approvals API instead. Change approval-related configuration",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/approve": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Approve a merge request",
        "operationId": "projects_merge_requests/postApiV4ProjectsIdMergeRequestsMergeRequestIidApprove",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdMergeRequestsMergeRequestIidApprove",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdMergeRequestsMergeRequestIidApprove"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Approve a merge request",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_MergeRequestApprovals"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/award_emoji": {
      "get": {
        "description": "Get a list of all emoji reactions for a specified awardable. This feature was introduced in 8.9",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidAwardEmoji",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID (`iid` for merge requests/issues/epics, `id` for snippets) of an awardable.",
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List an awardable's emoji reactions for projects",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_AwardEmoji"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "List an awardable's emoji reactions for projects",
        "tags": [
          "award_emoji"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Add an emoji reaction on the specified awardable. This feature was introduced in 8.9",
        "operationId": "projects_merge_requests/postApiV4ProjectsIdMergeRequestsMergeRequestIidAwardEmoji",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdMergeRequestsMergeRequestIidAwardEmoji",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdMergeRequestsMergeRequestIidAwardEmoji"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add a new emoji reaction",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AwardEmoji"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Add a new emoji reaction",
        "tags": [
          "award_emoji"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/award_emoji/{award_id}": {
      "delete": {
        "description": "Only an administrator or the author of the reaction can delete an emoji reaction. This feature was introduced in 8.9",
        "operationId": "projects_merge_requests/deleteApiV4ProjectsIdMergeRequestsMergeRequestIidAwardEmojiAwardId",
        "parameters": [
          {
            "description": "ID of an emoji reaction.",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete an emoji reaction"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Delete an emoji reaction",
        "tags": [
          "award_emoji"
        ]
      },
      "get": {
        "description": "Get a single emoji reaction from an issue, snippet, or merge request. This feature was introduced in 8.9",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidAwardEmojiAwardId",
        "parameters": [
          {
            "description": "ID of the emoji reaction.",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single emoji reaction",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AwardEmoji"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get a single emoji reaction",
        "tags": [
          "award_emoji"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/cancel_merge_when_pipeline_succeeds": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Cancel merge if \"Merge When Pipeline Succeeds\" is enabled",
        "operationId": "projects_merge_requests/postApiV4ProjectsIdMergeRequestsMergeRequestIidCancelMergeWhenPipelineSucceeds",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Cancel Merge When Pipeline Succeeds",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_MergeRequest"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "406": {
            "description": "Not acceptable"
          }
        },
        "summary": "Cancel Merge When Pipeline Succeeds",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/changes": {
      "get": {
        "description": "Shows information about the merge request including its files and changes.",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidChanges",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A diff in a Unified diff format",
            "in": "query",
            "name": "unidiff",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get single merge request changes",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_MergeRequestChanges"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get single merge request changes",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/closes_issues": {
      "get": {
        "description": "Get all the issues that would be closed by merging the provided merge request.",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidClosesIssues",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List issues that close on merge",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_MRNote"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "List issues that close on merge",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/commits": {
      "get": {
        "description": "Get a list of merge request commits.",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidCommits",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get single merge request commits",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Commit"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get single merge request commits",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/context_commits": {
      "delete": {
        "description": "Delete a list of merge request context commits.",
        "operationId": "projects_merge_requests/deleteApiV4ProjectsIdMergeRequestsMergeRequestIidContextCommits",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The context commits’ SHA.",
            "in": "query",
            "name": "commits",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete merge request context commits"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Delete merge request context commits",
        "tags": [
          "merge_requests"
        ]
      },
      "get": {
        "description": "Get a list of merge request context commits.",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidContextCommits",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List merge request context commits",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Commit"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "List merge request context commits",
        "tags": [
          "merge_requests"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a list of merge request context commits.",
        "operationId": "projects_merge_requests/postApiV4ProjectsIdMergeRequestsMergeRequestIidContextCommits",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdMergeRequestsMergeRequestIidContextCommits",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdMergeRequestsMergeRequestIidContextCommits"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create merge request context commits",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Commit"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Create merge request context commits",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/diffs": {
      "get": {
        "description": "Get a list of merge request diffs.",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidDiffs",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "A diff in a Unified diff format",
            "in": "query",
            "name": "unidiff",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/API_Entities_Diff"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Get the merge request diffs"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get the merge request diffs",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/draft_notes": {
      "get": {
        "description": "Get a list of merge request draft notes",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotes",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a merge request",
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of merge request draft notes",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_DraftNote"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new draft note",
        "operationId": "projects_merge_requests/postApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotes",
        "parameters": [
          {
            "description": "The ID of a project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a merge request.",
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotes",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotes"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a new draft note",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_DraftNote"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/draft_notes/bulk_publish": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Bulk publish all pending draft notes",
        "operationId": "projects_merge_requests/postApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotesBulkPublish",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a merge request",
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Bulk publish all pending draft notes"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/draft_notes/{draft_note_id}": {
      "delete": {
        "description": "Delete a draft note",
        "operationId": "projects_merge_requests/deleteApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotesDraftNoteId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a merge request",
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of a draft note",
            "in": "path",
            "name": "draft_note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "Get a single draft note",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotesDraftNoteId",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a merge request",
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of a draft note",
            "in": "path",
            "name": "draft_note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single draft note",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_DraftNote"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Modify an existing draft note",
        "operationId": "projects_merge_requests/putApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotesDraftNoteId",
        "parameters": [
          {
            "description": "The ID of a project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a merge request.",
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of a draft note",
            "in": "path",
            "name": "draft_note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotesDraftNoteId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotesDraftNoteId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Modify an existing draft note",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_DraftNote"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/draft_notes/{draft_note_id}/publish": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Publish a pending draft note",
        "operationId": "projects_merge_requests/putApiV4ProjectsIdMergeRequestsMergeRequestIidDraftNotesDraftNoteIdPublish",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a merge request",
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of a draft note",
            "in": "path",
            "name": "draft_note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Publish a pending draft note"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/merge": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Accept and merge changes submitted with the merge request using this API.",
        "operationId": "projects_merge_requests/putApiV4ProjectsIdMergeRequestsMergeRequestIidMerge",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API_Entities_MergeRequest"
                }
              }
            },
            "description": "Merge a merge request"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "405": {
            "description": "Method not allowed"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Merge a merge request",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/merge_ref": {
      "get": {
        "description": "Returns the up to date merge-ref HEAD commit",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidMergeRef",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "enum": [
                "created_at",
                "updated_at"
              ],
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returns the up to date merge-ref HEAD commit"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "summary": "Returns the up to date merge-ref HEAD commit",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/notes": {
      "get": {
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidNotes",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/API_Entities_Note"
                  },
                  "type": "array"
                }
              }
            }
          },
          "404": {}
        }
      },
      "post": {
        "operationId": "projects_merge_requests/postApiV4ProjectsIdMergeRequestsMergeRequestIidNotesNotesId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {},
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "id"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "404": {}
        }
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/notes/{note_id}": {
      "delete": {
        "operationId": "projects_merge_requests/deleteApiV4ProjectsIdMergeRequestsMergeRequestIidNotesNotesId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {},
          "404": {}
        }
      },
      "get": {
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidNotesNotesId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API_Entities_Note"
                }
              }
            }
          },
          "404": {}
        }
      },
      "put": {
        "operationId": "projects_merge_requests/putApiV4ProjectsIdMergeRequestsMergeRequestIidNotesNotesId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {},
          "404": {}
        }
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/notes/{note_id}/award_emoji": {
      "get": {
        "description": "Get a list of all emoji reactions for a specified awardable. This feature was introduced in 8.9",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidNotesNoteIdAwardEmoji",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List an awardable's emoji reactions for projects",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_AwardEmoji"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "List an awardable's emoji reactions for projects",
        "tags": [
          "award_emoji"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Add an emoji reaction on the specified awardable. This feature was introduced in 8.9",
        "operationId": "projects_merge_requests/postApiV4ProjectsIdMergeRequestsMergeRequestIidNotesNoteIdAwardEmoji",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API_Entities_AwardEmoji"
                }
              }
            },
            "description": "Add a new emoji reaction"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Add a new emoji reaction",
        "tags": [
          "award_emoji"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/notes/{note_id}/award_emoji/{award_id}": {
      "delete": {
        "description": "Only an administrator or the author of the reaction can delete an emoji reaction. This feature was introduced in 8.9",
        "operationId": "projects_merge_requests/deleteApiV4ProjectsIdMergeRequestsMergeRequestIidNotesNoteIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "ID of an emoji reaction.",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete an emoji reaction"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Delete an emoji reaction",
        "tags": [
          "award_emoji"
        ]
      },
      "get": {
        "description": "Get a single emoji reaction from an issue, snippet, or merge request. This feature was introduced in 8.9",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidNotesNoteIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "ID of the emoji reaction.",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single emoji reaction",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AwardEmoji"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get a single emoji reaction",
        "tags": [
          "award_emoji"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/participants": {
      "get": {
        "description": "Get a list of merge request participants.",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidParticipants",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get single merge request participants",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserBasic"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get single merge request participants",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/pipelines": {
      "get": {
        "description": "Get a list of merge request pipelines.",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidPipelines",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get single merge request pipelines",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_PipelineBasic"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get single merge request pipelines",
        "tags": [
          "merge_requests"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new pipeline for a merge request. A pipeline created via this endpoint doesn’t run a regular branch/tag pipeline. It requires `.gitlab-ci.yml` to be configured with `only: [merge_requests]` to create jobs.",
        "operationId": "projects_merge_requests/postApiV4ProjectsIdMergeRequestsMergeRequestIidPipelines",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdMergeRequestsMergeRequestIidPipelines",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdMergeRequestsMergeRequestIidPipelines"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create merge request pipeline",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Pipeline"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "405": {
            "description": "Method not allowed"
          }
        },
        "summary": "Create merge request pipeline",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/raw_diffs": {
      "get": {
        "description": "Get the raw diffs of a merge request that can used programmatically.",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidRawDiffs",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the merge request raw diffs"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get the merge request raw diffs",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/rebase": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Automatically rebase the `source_branch` of the merge request against its `target_branch`. This feature was added in GitLab 11.6",
        "operationId": "projects_merge_requests/putApiV4ProjectsIdMergeRequestsMergeRequestIidRebase",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdMergeRequestsMergeRequestIidRebase",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdMergeRequestsMergeRequestIidRebase"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Rebase a merge request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "summary": "Rebase a merge request",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/related_issues": {
      "get": {
        "description": "Get all the related issues from title, description, commits, comments and discussions of the merge request.",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidRelatedIssues",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List issues related to merge request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "List issues related to merge request",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/reset_approvals": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Clear all approvals of merge request. This feature was added in GitLab 15.4",
        "operationId": "projects_merge_requests/putApiV4ProjectsIdMergeRequestsMergeRequestIidResetApprovals",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Remove all merge request approvals"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Remove all merge request approvals",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/reset_spent_time": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Resets the total spent time for this merge_request to 0 seconds.",
        "operationId": "projects_merge_requests/postApiV4ProjectsIdMergeRequestsMergeRequestIidResetSpentTime",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The internal ID of the merge_request",
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Reset spent time for a merge_request",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IssuableTimeStats"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Reset spent time for a merge_request",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/reset_time_estimate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Resets the estimated time for this merge_request to 0 seconds.",
        "operationId": "projects_merge_requests/postApiV4ProjectsIdMergeRequestsMergeRequestIidResetTimeEstimate",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The internal ID of the merge_request.",
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Reset the time estimate for a project merge_request",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IssuableTimeStats"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Reset the time estimate for a project merge_request",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/reviewers": {
      "get": {
        "description": "Get a list of merge request reviewers.",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidReviewers",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get single merge request reviewers",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_MergeRequestReviewer"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get single merge request reviewers",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/time_estimate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Sets an estimated time of work for this merge_request.",
        "operationId": "projects_merge_requests/postApiV4ProjectsIdMergeRequestsMergeRequestIidTimeEstimate",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The internal ID of the merge_request.",
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdMergeRequestsMergeRequestIidTimeEstimate",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdMergeRequestsMergeRequestIidTimeEstimate"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Set a time estimate for a merge_request",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IssuableTimeStats"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Set a time estimate for a merge_request",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/time_stats": {
      "get": {
        "description": "Get time tracking stats",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidTimeStats",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The internal ID of the merge_request",
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get time tracking stats",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IssuableTimeStats"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get time tracking stats",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/unapprove": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Remove an approval from a merge request",
        "operationId": "projects_merge_requests/postApiV4ProjectsIdMergeRequestsMergeRequestIidUnapprove",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Remove an approval from a merge request",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_MergeRequestApprovals"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/versions": {
      "get": {
        "description": "This feature was introduced in GitLab 8.12.",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidVersions",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The internal ID of the merge request",
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of merge request diff versions",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_MergeRequestDiff"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get a list of merge request diff versions",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/merge_requests/{merge_request_iid}/versions/{version_id}": {
      "get": {
        "description": "This feature was introduced in GitLab 8.12.",
        "operationId": "projects_merge_requests/getApiV4ProjectsIdMergeRequestsMergeRequestIidVersionsVersionId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The internal ID of the merge request",
            "in": "path",
            "name": "merge_request_iid",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the merge request diff version",
            "in": "path",
            "name": "version_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "A diff in a Unified diff format",
            "in": "query",
            "name": "unidiff",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single merge request diff version",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_MergeRequestDiffFull"
            }
          }
        },
        "summary": "Get a single merge request diff version",
        "tags": [
          "merge_requests"
        ]
      }
    },
    "/api/v4/projects/{id}/packages": {
      "get": {
        "description": "This feature was introduced in GitLab 11.8",
        "operationId": "projects_packages/getApiV4ProjectsIdPackages",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return packages ordered by `created_at`, `name`, `version` or `type` fields.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "created_at",
                "name",
                "version",
                "type"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return packages sorted in `asc` or `desc` order.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return packages of a certain type",
            "in": "query",
            "name": "package_type",
            "required": false,
            "schema": {
              "enum": [
                "maven",
                "npm",
                "conan",
                "nuget",
                "pypi",
                "composer",
                "generic",
                "golang",
                "debian",
                "rubygems",
                "helm",
                "terraform_module",
                "rpm",
                "ml_model"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return packages with this name",
            "in": "query",
            "name": "package_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return packages with this version",
            "in": "query",
            "name": "package_version",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns packages without a version",
            "in": "query",
            "name": "include_versionless",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Return packages with specified status",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "default",
                "hidden",
                "processing",
                "error",
                "pending_destruction",
                "deprecated"
              ],
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of project packages",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Package"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Project Not Found"
          }
        },
        "summary": "Get a list of project packages",
        "tags": [
          "project_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/composer": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 13.1",
        "operationId": "projects_packages/postApiV4ProjectsIdPackagesComposer",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdPackagesComposer",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdPackagesComposer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Composer packages endpoint for registering packages"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Composer packages endpoint for registering packages",
        "tags": [
          "composer_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/composer/archives/*package_name": {
      "get": {
        "description": "This feature was introduced in GitLab 13.1",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesComposerArchives*packageName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Shasum of current json",
            "in": "query",
            "name": "sha",
            "required": true,
            "schema": {
              "example": "673594f85a55fe3c0eb45df7bd2fa9d95a1601ab",
              "type": "string"
            }
          },
          {
            "description": "The Composer package name",
            "in": "query",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my-composer-package",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Composer package endpoint to download a package archive"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Composer package endpoint to download a package archive",
        "tags": [
          "composer_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/conan/v1/conans/search": {
      "get": {
        "description": "This feature was introduced in GitLab 12.4",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesConanV1ConansSearch",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search query",
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "example": "Hello*",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Search for packages"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Search for packages",
        "tags": [
          "conan_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}": {
      "delete": {
        "description": "This feature was introduced in GitLab 12.5",
        "operationId": "projects_packages/deleteApiV4ProjectsIdPackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannel",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "path",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my-package",
              "type": "string"
            }
          },
          {
            "description": "Package version",
            "in": "path",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0",
              "type": "string"
            }
          },
          {
            "description": "Package username",
            "in": "path",
            "name": "package_username",
            "required": true,
            "schema": {
              "example": "my-group+my-project",
              "type": "string"
            }
          },
          {
            "description": "Package channel",
            "in": "path",
            "name": "package_channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete Package"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Delete Package",
        "tags": [
          "conan_packages"
        ]
      },
      "get": {
        "description": "This feature was introduced in GitLab 12.5",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannel",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "path",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my-package",
              "type": "string"
            }
          },
          {
            "description": "Package version",
            "in": "path",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0",
              "type": "string"
            }
          },
          {
            "description": "Package username",
            "in": "path",
            "name": "package_username",
            "required": true,
            "schema": {
              "example": "my-group+my-project",
              "type": "string"
            }
          },
          {
            "description": "Package channel",
            "in": "path",
            "name": "package_channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Recipe Snapshot",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ConanPackage_ConanRecipeSnapshot"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Recipe Snapshot",
        "tags": [
          "conan_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/digest": {
      "get": {
        "description": "This feature was introduced in GitLab 12.5",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelDigest",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "path",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my-package",
              "type": "string"
            }
          },
          {
            "description": "Package version",
            "in": "path",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0",
              "type": "string"
            }
          },
          {
            "description": "Package username",
            "in": "path",
            "name": "package_username",
            "required": true,
            "schema": {
              "example": "my-group+my-project",
              "type": "string"
            }
          },
          {
            "description": "Package channel",
            "in": "path",
            "name": "package_channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Recipe Digest",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ConanPackage_ConanRecipeManifest"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Recipe Digest",
        "tags": [
          "conan_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/download_urls": {
      "get": {
        "description": "This feature was introduced in GitLab 12.5",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelDownloadUrls",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "path",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my-package",
              "type": "string"
            }
          },
          {
            "description": "Package version",
            "in": "path",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0",
              "type": "string"
            }
          },
          {
            "description": "Package username",
            "in": "path",
            "name": "package_username",
            "required": true,
            "schema": {
              "example": "my-group+my-project",
              "type": "string"
            }
          },
          {
            "description": "Package channel",
            "in": "path",
            "name": "package_channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Recipe Download Urls",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ConanPackage_ConanRecipeManifest"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Recipe Download Urls",
        "tags": [
          "conan_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/packages/{conan_package_reference}": {
      "get": {
        "description": "This feature was introduced in GitLab 12.5",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelPackagesConanPackageReference",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "path",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my-package",
              "type": "string"
            }
          },
          {
            "description": "Package version",
            "in": "path",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0",
              "type": "string"
            }
          },
          {
            "description": "Package username",
            "in": "path",
            "name": "package_username",
            "required": true,
            "schema": {
              "example": "my-group+my-project",
              "type": "string"
            }
          },
          {
            "description": "Package channel",
            "in": "path",
            "name": "package_channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          },
          {
            "description": "Conan package ID",
            "in": "path",
            "name": "conan_package_reference",
            "required": true,
            "schema": {
              "example": "103f6067a947f366ef91fc1b7da351c588d1827f",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Package Snapshot",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ConanPackage_ConanPackageSnapshot"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Package Snapshot",
        "tags": [
          "conan_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/packages/{conan_package_reference}/digest": {
      "get": {
        "description": "This feature was introduced in GitLab 12.5",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelPackagesConanPackageReferenceDigest",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "path",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my-package",
              "type": "string"
            }
          },
          {
            "description": "Package version",
            "in": "path",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0",
              "type": "string"
            }
          },
          {
            "description": "Package username",
            "in": "path",
            "name": "package_username",
            "required": true,
            "schema": {
              "example": "my-group+my-project",
              "type": "string"
            }
          },
          {
            "description": "Package channel",
            "in": "path",
            "name": "package_channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          },
          {
            "description": "Conan package ID",
            "in": "path",
            "name": "conan_package_reference",
            "required": true,
            "schema": {
              "example": "103f6067a947f366ef91fc1b7da351c588d1827f",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Package Digest",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ConanPackage_ConanPackageManifest"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Package Digest",
        "tags": [
          "conan_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/packages/{conan_package_reference}/download_urls": {
      "get": {
        "description": "This feature was introduced in GitLab 12.5",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelPackagesConanPackageReferenceDownloadUrls",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "path",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my-package",
              "type": "string"
            }
          },
          {
            "description": "Package version",
            "in": "path",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0",
              "type": "string"
            }
          },
          {
            "description": "Package username",
            "in": "path",
            "name": "package_username",
            "required": true,
            "schema": {
              "example": "my-group+my-project",
              "type": "string"
            }
          },
          {
            "description": "Package channel",
            "in": "path",
            "name": "package_channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          },
          {
            "description": "Conan package ID",
            "in": "path",
            "name": "conan_package_reference",
            "required": true,
            "schema": {
              "example": "103f6067a947f366ef91fc1b7da351c588d1827f",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Package Download Urls",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ConanPackage_ConanPackageManifest"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Package Download Urls",
        "tags": [
          "conan_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/packages/{conan_package_reference}/upload_urls": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 12.4",
        "operationId": "projects_packages/postApiV4ProjectsIdPackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelPackagesConanPackageReferenceUploadUrls",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "path",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my-package",
              "type": "string"
            }
          },
          {
            "description": "Package version",
            "in": "path",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0",
              "type": "string"
            }
          },
          {
            "description": "Package username",
            "in": "path",
            "name": "package_username",
            "required": true,
            "schema": {
              "example": "my-group+my-project",
              "type": "string"
            }
          },
          {
            "description": "Package channel",
            "in": "path",
            "name": "package_channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          },
          {
            "description": "Conan package ID",
            "in": "path",
            "name": "conan_package_reference",
            "required": true,
            "schema": {
              "example": "103f6067a947f366ef91fc1b7da351c588d1827f",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Package Upload Urls",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ConanPackage_ConanUploadUrls"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Package Upload Urls",
        "tags": [
          "conan_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/conan/v1/conans/{package_name}/{package_version}/{package_username}/{package_channel}/upload_urls": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 12.4",
        "operationId": "projects_packages/postApiV4ProjectsIdPackagesConanV1ConansPackageNamePackageVersionPackageUsernamePackageChannelUploadUrls",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "path",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my-package",
              "type": "string"
            }
          },
          {
            "description": "Package version",
            "in": "path",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0",
              "type": "string"
            }
          },
          {
            "description": "Package username",
            "in": "path",
            "name": "package_username",
            "required": true,
            "schema": {
              "example": "my-group+my-project",
              "type": "string"
            }
          },
          {
            "description": "Package channel",
            "in": "path",
            "name": "package_channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Recipe Upload Urls",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ConanPackage_ConanUploadUrls"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Recipe Upload Urls",
        "tags": [
          "conan_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/conan/v1/files/{package_name}/{package_version}/{package_username}/{package_channel}/{recipe_revision}/export/{file_name}": {
      "get": {
        "description": "This feature was introduced in GitLab 12.6",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionExportFileName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "path",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my-package",
              "type": "string"
            }
          },
          {
            "description": "Package version",
            "in": "path",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0",
              "type": "string"
            }
          },
          {
            "description": "Package username",
            "in": "path",
            "name": "package_username",
            "required": true,
            "schema": {
              "example": "my-group+my-project",
              "type": "string"
            }
          },
          {
            "description": "Package channel",
            "in": "path",
            "name": "package_channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          },
          {
            "description": "Conan Recipe Revision",
            "in": "path",
            "name": "recipe_revision",
            "required": true,
            "schema": {
              "example": "0",
              "type": "string"
            }
          },
          {
            "description": "Package file name",
            "in": "path",
            "name": "file_name",
            "required": true,
            "schema": {
              "enum": [
                "conanfile.py",
                "conanmanifest.txt",
                "conan_sources.tgz",
                "conan_export.tgz",
                "conaninfo.txt",
                "conan_package.tgz"
              ],
              "example": "conanfile.py",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download recipe files"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Download recipe files",
        "tags": [
          "conan_packages"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 12.6",
        "operationId": "projects_packages/putApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionExportFileName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "path",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my-package",
              "type": "string"
            }
          },
          {
            "description": "Package version",
            "in": "path",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0",
              "type": "string"
            }
          },
          {
            "description": "Package username",
            "in": "path",
            "name": "package_username",
            "required": true,
            "schema": {
              "example": "my-group+my-project",
              "type": "string"
            }
          },
          {
            "description": "Package channel",
            "in": "path",
            "name": "package_channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          },
          {
            "description": "Conan Recipe Revision",
            "in": "path",
            "name": "recipe_revision",
            "required": true,
            "schema": {
              "example": "0",
              "type": "string"
            }
          },
          {
            "description": "Package file name",
            "in": "path",
            "name": "file_name",
            "required": true,
            "schema": {
              "enum": [
                "conanfile.py",
                "conanmanifest.txt",
                "conan_sources.tgz",
                "conan_export.tgz",
                "conaninfo.txt",
                "conan_package.tgz"
              ],
              "example": "conanfile.py",
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionExportFileName",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionExportFileName"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Upload recipe package files"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Upload recipe package files",
        "tags": [
          "conan_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/conan/v1/files/{package_name}/{package_version}/{package_username}/{package_channel}/{recipe_revision}/export/{file_name}/authorize": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 12.6",
        "operationId": "projects_packages/putApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionExportFileNameAuthorize",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "path",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my-package",
              "type": "string"
            }
          },
          {
            "description": "Package version",
            "in": "path",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0",
              "type": "string"
            }
          },
          {
            "description": "Package username",
            "in": "path",
            "name": "package_username",
            "required": true,
            "schema": {
              "example": "my-group+my-project",
              "type": "string"
            }
          },
          {
            "description": "Package channel",
            "in": "path",
            "name": "package_channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          },
          {
            "description": "Conan Recipe Revision",
            "in": "path",
            "name": "recipe_revision",
            "required": true,
            "schema": {
              "example": "0",
              "type": "string"
            }
          },
          {
            "description": "Package file name",
            "in": "path",
            "name": "file_name",
            "required": true,
            "schema": {
              "enum": [
                "conanfile.py",
                "conanmanifest.txt",
                "conan_sources.tgz",
                "conan_export.tgz",
                "conaninfo.txt",
                "conan_package.tgz"
              ],
              "example": "conanfile.py",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Workhorse authorize the conan recipe file"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Workhorse authorize the conan recipe file",
        "tags": [
          "conan_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/conan/v1/files/{package_name}/{package_version}/{package_username}/{package_channel}/{recipe_revision}/package/{conan_package_reference}/{package_revision}/{file_name}": {
      "get": {
        "description": "This feature was introduced in GitLab 12.5",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionPackageConanPackageReferencePackageRevisionFileName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "path",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my-package",
              "type": "string"
            }
          },
          {
            "description": "Package version",
            "in": "path",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0",
              "type": "string"
            }
          },
          {
            "description": "Package username",
            "in": "path",
            "name": "package_username",
            "required": true,
            "schema": {
              "example": "my-group+my-project",
              "type": "string"
            }
          },
          {
            "description": "Package channel",
            "in": "path",
            "name": "package_channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          },
          {
            "description": "Conan Recipe Revision",
            "in": "path",
            "name": "recipe_revision",
            "required": true,
            "schema": {
              "example": "0",
              "type": "string"
            }
          },
          {
            "description": "Conan Package ID",
            "in": "path",
            "name": "conan_package_reference",
            "required": true,
            "schema": {
              "example": "103f6067a947f366ef91fc1b7da351c588d1827f",
              "type": "string"
            }
          },
          {
            "description": "Conan Package Revision",
            "in": "path",
            "name": "package_revision",
            "required": true,
            "schema": {
              "example": "0",
              "type": "string"
            }
          },
          {
            "description": "Package file name",
            "in": "path",
            "name": "file_name",
            "required": true,
            "schema": {
              "enum": [
                "conanfile.py",
                "conanmanifest.txt",
                "conan_sources.tgz",
                "conan_export.tgz",
                "conaninfo.txt",
                "conan_package.tgz"
              ],
              "example": "conaninfo.txt",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download package files"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Download package files",
        "tags": [
          "conan_packages"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 12.6",
        "operationId": "projects_packages/putApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionPackageConanPackageReferencePackageRevisionFileName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "path",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my-package",
              "type": "string"
            }
          },
          {
            "description": "Package version",
            "in": "path",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0",
              "type": "string"
            }
          },
          {
            "description": "Package username",
            "in": "path",
            "name": "package_username",
            "required": true,
            "schema": {
              "example": "my-group+my-project",
              "type": "string"
            }
          },
          {
            "description": "Package channel",
            "in": "path",
            "name": "package_channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          },
          {
            "description": "Conan Recipe Revision",
            "in": "path",
            "name": "recipe_revision",
            "required": true,
            "schema": {
              "example": "0",
              "type": "string"
            }
          },
          {
            "description": "Conan Package ID",
            "in": "path",
            "name": "conan_package_reference",
            "required": true,
            "schema": {
              "example": "103f6067a947f366ef91fc1b7da351c588d1827f",
              "type": "string"
            }
          },
          {
            "description": "Conan Package Revision",
            "in": "path",
            "name": "package_revision",
            "required": true,
            "schema": {
              "example": "0",
              "type": "string"
            }
          },
          {
            "description": "Package file name",
            "in": "path",
            "name": "file_name",
            "required": true,
            "schema": {
              "enum": [
                "conanfile.py",
                "conanmanifest.txt",
                "conan_sources.tgz",
                "conan_export.tgz",
                "conaninfo.txt",
                "conan_package.tgz"
              ],
              "example": "conaninfo.txt",
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionPackageConanPackageReferencePackageRevisionFileName",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionPackageConanPackageReferencePackageRevisionFileName"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Upload package files"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Upload package files",
        "tags": [
          "conan_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/conan/v1/files/{package_name}/{package_version}/{package_username}/{package_channel}/{recipe_revision}/package/{conan_package_reference}/{package_revision}/{file_name}/authorize": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 12.6",
        "operationId": "projects_packages/putApiV4ProjectsIdPackagesConanV1FilesPackageNamePackageVersionPackageUsernamePackageChannelRecipeRevisionPackageConanPackageReferencePackageRevisionFileNameAuthorize",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "path",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my-package",
              "type": "string"
            }
          },
          {
            "description": "Package version",
            "in": "path",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0",
              "type": "string"
            }
          },
          {
            "description": "Package username",
            "in": "path",
            "name": "package_username",
            "required": true,
            "schema": {
              "example": "my-group+my-project",
              "type": "string"
            }
          },
          {
            "description": "Package channel",
            "in": "path",
            "name": "package_channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          },
          {
            "description": "Conan Recipe Revision",
            "in": "path",
            "name": "recipe_revision",
            "required": true,
            "schema": {
              "example": "0",
              "type": "string"
            }
          },
          {
            "description": "Conan Package ID",
            "in": "path",
            "name": "conan_package_reference",
            "required": true,
            "schema": {
              "example": "103f6067a947f366ef91fc1b7da351c588d1827f",
              "type": "string"
            }
          },
          {
            "description": "Conan Package Revision",
            "in": "path",
            "name": "package_revision",
            "required": true,
            "schema": {
              "example": "0",
              "type": "string"
            }
          },
          {
            "description": "Package file name",
            "in": "path",
            "name": "file_name",
            "required": true,
            "schema": {
              "enum": [
                "conanfile.py",
                "conanmanifest.txt",
                "conan_sources.tgz",
                "conan_export.tgz",
                "conaninfo.txt",
                "conan_package.tgz"
              ],
              "example": "conaninfo.txt",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Workhorse authorize the conan package file"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Workhorse authorize the conan package file",
        "tags": [
          "conan_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/conan/v1/ping": {
      "get": {
        "description": "This feature was introduced in GitLab 12.2",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesConanV1Ping",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Ping the Conan API"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Ping the Conan API",
        "tags": [
          "conan_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/conan/v1/users/authenticate": {
      "get": {
        "description": "This feature was introduced in GitLab 12.2",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesConanV1UsersAuthenticate",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Authenticate user against conan CLI"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Authenticate user against conan CLI",
        "tags": [
          "conan_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/conan/v1/users/check_credentials": {
      "get": {
        "description": "This feature was introduced in GitLab 12.4",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesConanV1UsersCheckCredentials",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Check for valid user credentials per conan CLI"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Check for valid user credentials per conan CLI",
        "tags": [
          "conan_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/conan/v2/conans/search": {
      "get": {
        "description": "This feature was introduced in GitLab 12.4",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesConanV2ConansSearch",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search query",
            "in": "query",
            "name": "q",
            "required": true,
            "schema": {
              "example": "Hello*",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Search for packages"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Search for packages",
        "tags": [
          "conan_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/conan/v2/conans/{package_name}/{package_version}/{package_username}/{package_channel}/revisions/{recipe_revision}/files/{file_name}": {
      "get": {
        "description": "This feature was introduced in GitLab 17.8",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesConanV2ConansPackageNamePackageVersionPackageUsernamePackageChannelRevisionsRecipeRevisionFilesFileName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "path",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my-package",
              "type": "string"
            }
          },
          {
            "description": "Package version",
            "in": "path",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0",
              "type": "string"
            }
          },
          {
            "description": "Package username",
            "in": "path",
            "name": "package_username",
            "required": true,
            "schema": {
              "example": "my-group+my-project",
              "type": "string"
            }
          },
          {
            "description": "Package channel",
            "in": "path",
            "name": "package_channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          },
          {
            "description": "Recipe revision",
            "in": "path",
            "name": "recipe_revision",
            "required": true,
            "schema": {
              "example": "df28fd816be3a119de5ce4d374436b25",
              "type": "string"
            }
          },
          {
            "description": "Package file name",
            "in": "path",
            "name": "file_name",
            "required": true,
            "schema": {
              "enum": [
                "conanfile.py",
                "conanmanifest.txt",
                "conan_sources.tgz",
                "conan_export.tgz",
                "conaninfo.txt",
                "conan_package.tgz"
              ],
              "example": "conanfile.py",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download recipe files"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Download recipe files",
        "tags": [
          "conan_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/conan/v2/users/check_credentials": {
      "get": {
        "description": "This feature was introduced in GitLab 12.4",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesConanV2UsersCheckCredentials",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Check for valid user credentials per conan CLI"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Check for valid user credentials per conan CLI",
        "tags": [
          "conan_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/debian/dists/*distribution/InRelease": {
      "get": {
        "description": "This feature was introduced in GitLab 13.5",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesDebianDists*distributionInrelease",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "query",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The signed Release file"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The signed Release file",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/debian/dists/*distribution/Release": {
      "get": {
        "description": "This feature was introduced in GitLab 13.5",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesDebianDists*distributionRelease",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "query",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The unsigned Release file"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The unsigned Release file",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/debian/dists/*distribution/Release.gpg": {
      "get": {
        "description": "This feature was introduced in GitLab 13.5",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesDebianDists*distributionReleaseGpg",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "query",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The Release file signature"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The Release file signature",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/debian/dists/*distribution/{component}/binary-{architecture}/Packages": {
      "get": {
        "description": "This feature was introduced in GitLab 13.5",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesDebianDists*distributionComponentBinary-ArchitecturePackages",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "query",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          },
          {
            "description": "The Debian Component",
            "in": "path",
            "name": "component",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          },
          {
            "description": "The Debian Architecture",
            "in": "path",
            "name": "architecture",
            "required": true,
            "schema": {
              "example": "binary-amd64",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The binary files index"
          },
          "202": {
            "description": "The binary files index"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The binary files index",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/debian/dists/*distribution/{component}/binary-{architecture}/by-hash/SHA256/{file_sha256}": {
      "get": {
        "description": "This feature was introduced in GitLab 15.4",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesDebianDists*distributionComponentBinaryArchitectureByHashSha256FileSha256",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "query",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          },
          {
            "description": "The Debian Component",
            "in": "path",
            "name": "component",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          },
          {
            "description": "The Debian Architecture",
            "in": "path",
            "name": "architecture",
            "required": true,
            "schema": {
              "example": "binary-amd64",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "file_sha256",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The binary files index by hash"
          },
          "202": {
            "description": "The binary files index by hash"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The binary files index by hash",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/debian/dists/*distribution/{component}/debian-installer/binary-{architecture}/Packages": {
      "get": {
        "description": "This feature was introduced in GitLab 15.4",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesDebianDists*distributionComponentDebianInstallerBinaryArchitecturePackages",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "query",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          },
          {
            "description": "The Debian Component",
            "in": "path",
            "name": "component",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          },
          {
            "description": "The Debian Architecture",
            "in": "path",
            "name": "architecture",
            "required": true,
            "schema": {
              "example": "binary-amd64",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The installer (udeb) binary files index"
          },
          "202": {
            "description": "The installer (udeb) binary files index"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The installer (udeb) binary files index",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/debian/dists/*distribution/{component}/debian-installer/binary-{architecture}/by-hash/SHA256/{file_sha256}": {
      "get": {
        "description": "This feature was introduced in GitLab 15.4",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesDebianDists*distributionComponentDebianInstallerBinaryArchitectureByHashSha256FileSha256",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "query",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          },
          {
            "description": "The Debian Component",
            "in": "path",
            "name": "component",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          },
          {
            "description": "The Debian Architecture",
            "in": "path",
            "name": "architecture",
            "required": true,
            "schema": {
              "example": "binary-amd64",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "file_sha256",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The installer (udeb) binary files index by hash"
          },
          "202": {
            "description": "The installer (udeb) binary files index by hash"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The installer (udeb) binary files index by hash",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/debian/dists/*distribution/{component}/source/Sources": {
      "get": {
        "description": "This feature was introduced in GitLab 15.4",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesDebianDists*distributionComponentSourceSources",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "query",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          },
          {
            "description": "The Debian Component",
            "in": "path",
            "name": "component",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The source files index"
          },
          "202": {
            "description": "The source files index"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The source files index",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/debian/dists/*distribution/{component}/source/by-hash/SHA256/{file_sha256}": {
      "get": {
        "description": "This feature was introduced in GitLab 15.4",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesDebianDists*distributionComponentSourceByHashSha256FileSha256",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "query",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          },
          {
            "description": "The Debian Component",
            "in": "path",
            "name": "component",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "file_sha256",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The source files index by hash"
          },
          "202": {
            "description": "The source files index by hash"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The source files index by hash",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/debian/pool/{distribution}/{letter}/{package_name}/{package_version}/{file_name}": {
      "get": {
        "description": "This feature was introduced in GitLab 14.2",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesDebianPoolDistributionLetterPackageNamePackageVersionFileName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Debian Codename or Suite",
            "in": "path",
            "name": "distribution",
            "required": true,
            "schema": {
              "example": "my-distro",
              "type": "string"
            }
          },
          {
            "description": "The Debian Classification (first-letter or lib-first-letter)",
            "in": "path",
            "name": "letter",
            "required": true,
            "schema": {
              "example": "a",
              "type": "string"
            }
          },
          {
            "description": "The Debian Source Package Name",
            "in": "path",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my-pkg",
              "type": "string"
            }
          },
          {
            "description": "The Debian Source Package Version",
            "in": "path",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0.0",
              "type": "string"
            }
          },
          {
            "description": "The Debian File Name",
            "in": "path",
            "name": "file_name",
            "required": true,
            "schema": {
              "example": "example_1.0.0~alpha2_amd64.deb",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download Debian package"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Download Debian package",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/debian/{file_name}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 14.0",
        "operationId": "projects_packages/putApiV4ProjectsIdPackagesDebianFileName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The filename",
            "in": "path",
            "name": "file_name",
            "required": true,
            "schema": {
              "example": "example_1.0.0~alpha2_amd64.deb",
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdPackagesDebianFileName",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdPackagesDebianFileName"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Upload Debian package"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Upload Debian package",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/debian/{file_name}/authorize": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 13.5",
        "operationId": "projects_packages/putApiV4ProjectsIdPackagesDebianFileNameAuthorize",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The filename",
            "in": "path",
            "name": "file_name",
            "required": true,
            "schema": {
              "example": "example_1.0.0~alpha2_amd64.deb",
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdPackagesDebianFileNameAuthorize",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdPackagesDebianFileNameAuthorize"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Authorize Debian package upload"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Authorize Debian package upload",
        "tags": [
          "debian_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/go/*module_name/@v/list": {
      "get": {
        "description": "Get all tagged versions for a given Go module.See `go help goproxy`, GET $GOPROXY/<module>/@v/list. This feature was introduced in GitLab 13.1.",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesGo*moduleName@vList",
        "parameters": [
          {
            "description": "The project ID or full path of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Go module",
            "in": "query",
            "name": "module_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List"
          }
        },
        "summary": "List",
        "tags": [
          "go_proxy"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/go/*module_name/@v/{module_version}.info": {
      "get": {
        "description": "Get all tagged versions for a given Go module.See `go help goproxy`, GET $GOPROXY/<module>/@v/<version>.info. This feature was introduced in GitLab 13.1",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesGo*moduleName@vModuleVersionInfo",
        "parameters": [
          {
            "description": "The project ID or full path of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Go module",
            "in": "query",
            "name": "module_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The version of the Go module",
            "in": "path",
            "name": "module_version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Version metadata",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_GoModuleVersion"
            }
          }
        },
        "summary": "Version metadata",
        "tags": [
          "go_proxy"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/go/*module_name/@v/{module_version}.mod": {
      "get": {
        "description": "Get the module file of a given module version.See `go help goproxy`, GET $GOPROXY/<module>/@v/<version>.mod. This feature was introduced in GitLab 13.1.",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesGo*moduleName@vModuleVersionMod",
        "parameters": [
          {
            "description": "The project ID or full path of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Go module",
            "in": "query",
            "name": "module_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The version of the Go module",
            "in": "path",
            "name": "module_version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download module file"
          }
        },
        "summary": "Download module file",
        "tags": [
          "go_proxy"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/go/*module_name/@v/{module_version}.zip": {
      "get": {
        "description": "Get a zip of the source of the given module version.See `go help goproxy`, GET $GOPROXY/<module>/@v/<version>.zip. This feature was introduced in GitLab 13.1.",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesGo*moduleName@vModuleVersionZip",
        "parameters": [
          {
            "description": "The project ID or full path of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the Go module",
            "in": "query",
            "name": "module_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The version of the Go module",
            "in": "path",
            "name": "module_version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download module source"
          }
        },
        "summary": "Download module source",
        "tags": [
          "go_proxy"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/helm/api/{channel}/charts": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 14.0",
        "operationId": "projects_packages/postApiV4ProjectsIdPackagesHelmApiChannelCharts",
        "parameters": [
          {
            "description": "The ID or full path of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Helm channel",
            "in": "path",
            "name": "channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdPackagesHelmApiChannelCharts",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdPackagesHelmApiChannelCharts"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Upload a chart"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Upload a chart",
        "tags": [
          "helm_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/helm/api/{channel}/charts/authorize": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 14.0",
        "operationId": "projects_packages/postApiV4ProjectsIdPackagesHelmApiChannelChartsAuthorize",
        "parameters": [
          {
            "description": "The ID or full path of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Helm channel",
            "in": "path",
            "name": "channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Authorize a chart upload from workhorse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Authorize a chart upload from workhorse",
        "tags": [
          "helm_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/helm/{channel}/charts/{file_name}.tgz": {
      "get": {
        "description": "This feature was introduced in GitLab 14.0",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesHelmChannelChartsFileNameTgz",
        "parameters": [
          {
            "description": "The ID or full path of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Helm channel",
            "in": "path",
            "name": "channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          },
          {
            "description": "Helm package file name",
            "in": "path",
            "name": "file_name",
            "required": true,
            "schema": {
              "example": "mychart",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download a chart"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Download a chart",
        "tags": [
          "helm_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/helm/{channel}/index.yaml": {
      "get": {
        "description": "This feature was introduced in GitLab 14.0",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesHelmChannelIndexYaml",
        "parameters": [
          {
            "description": "The ID or full path of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Helm channel",
            "in": "path",
            "name": "channel",
            "required": true,
            "schema": {
              "example": "stable",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download a chart index"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "summary": "Download a chart index",
        "tags": [
          "helm_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/maven/*path/{file_name}": {
      "get": {
        "description": "This feature was introduced in GitLab 11.3",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesMaven*pathFileName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package path",
            "in": "query",
            "name": "path",
            "required": true,
            "schema": {
              "example": "foo/bar/mypkg/1.0-SNAPSHOT",
              "type": "string"
            }
          },
          {
            "description": "Package file name",
            "in": "path",
            "name": "file_name",
            "required": true,
            "schema": {
              "example": "mypkg-1.0-SNAPSHOT.jar",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download the maven package file at a project level"
          },
          "302": {
            "description": "Download the maven package file at a project level"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Download the maven package file at a project level",
        "tags": [
          "maven_packages"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 11.3",
        "operationId": "projects_packages/putApiV4ProjectsIdPackagesMaven*pathFileName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package file name",
            "in": "path",
            "name": "file_name",
            "required": true,
            "schema": {
              "example": "mypkg-1.0-SNAPSHOT.pom",
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdPackagesMaven*pathFileName",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdPackagesMaven*pathFileName"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Upload the maven package file"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "summary": "Upload the maven package file",
        "tags": [
          "maven_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/maven/*path/{file_name}/authorize": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 11.3",
        "operationId": "projects_packages/putApiV4ProjectsIdPackagesMaven*pathFileNameAuthorize",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package file name",
            "in": "path",
            "name": "file_name",
            "required": true,
            "schema": {
              "example": "mypkg-1.0-SNAPSHOT.pom",
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdPackagesMaven*pathFileNameAuthorize",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdPackagesMaven*pathFileNameAuthorize"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Workhorse authorize the maven package file upload"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Workhorse authorize the maven package file upload",
        "tags": [
          "maven_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/npm/*package_name": {
      "get": {
        "description": "This feature was introduced in GitLab 11.8",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesNpm*packageName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "query",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "mypackage",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_NpmPackage"
            }
          },
          "302": {
            "description": "Found (redirect)"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "NPM registry metadata endpoint",
        "tags": [
          "npm_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/npm/*package_name/-/*file_name": {
      "get": {
        "description": "This feature was introduced in GitLab 11.8",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesNpm*packageName-*fileName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "query",
            "name": "package_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package file name",
            "in": "query",
            "name": "file_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download the NPM tarball"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Download the NPM tarball",
        "tags": [
          "npm_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/npm/-/npm/v1/security/advisories/bulk": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 15.6",
        "operationId": "projects_packages/postApiV4ProjectsIdPackagesNpmNpmV1SecurityAdvisoriesBulk",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "307": {
            "description": "Temporary Redirect"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "NPM registry bulk advisory endpoint",
        "tags": [
          "npm_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/npm/-/npm/v1/security/audits/quick": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 15.6",
        "operationId": "projects_packages/postApiV4ProjectsIdPackagesNpmNpmV1SecurityAuditsQuick",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Ok"
          },
          "307": {
            "description": "Temporary Redirect"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "NPM registry quick audit endpoint",
        "tags": [
          "npm_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/npm/-/package/*package_name/dist-tags": {
      "get": {
        "description": "This feature was introduced in GitLab 12.7",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesNpmPackage*packageNameDistTags",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "query",
            "name": "package_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get all tags for a given an NPM package",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_NpmPackageTag"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get all tags for a given an NPM package",
        "tags": [
          "npm_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/npm/-/package/*package_name/dist-tags/{tag}": {
      "delete": {
        "description": "This feature was introduced in GitLab 12.7",
        "operationId": "projects_packages/deleteApiV4ProjectsIdPackagesNpmPackage*packageNameDistTagsTag",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "query",
            "name": "package_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package dist-tag",
            "in": "path",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Deletes the given tag"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Deletes the given tag",
        "tags": [
          "npm_packages"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 12.7",
        "operationId": "projects_packages/putApiV4ProjectsIdPackagesNpmPackage*packageNameDistTagsTag",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package dist-tag",
            "in": "path",
            "name": "tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdPackagesNpmPackage*packageNameDistTagsTag",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdPackagesNpmPackage*packageNameDistTagsTag"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Create or Update the given tag for the given NPM package and version"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Create or Update the given tag for the given NPM package and version",
        "tags": [
          "npm_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/npm/{package_name}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Create was introduced in GitLab 11.8 & deprecate suppport was added in 16.0",
        "operationId": "projects_packages/putApiV4ProjectsIdPackagesNpmPackageName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Package name",
            "in": "path",
            "name": "package_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdPackagesNpmPackageName",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdPackagesNpmPackageName"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create or deprecate NPM package"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Create or deprecate NPM package",
        "tags": [
          "npm_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/nuget": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 12.6",
        "operationId": "projects_packages/putApiV4ProjectsIdPackagesNuget",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdPackagesNuget",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdPackagesNuget"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The NuGet V3 Feed Package Publish endpoint"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet V3 Feed Package Publish endpoint",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/nuget/*package_name/*package_version": {
      "delete": {
        "description": "This feature was introduced in GitLab 16.5",
        "operationId": "projects_packages/deleteApiV4ProjectsIdPackagesNuget*packageName*packageVersion",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The NuGet package name",
            "in": "query",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "mynugetpkg",
              "type": "string"
            }
          },
          {
            "description": "The NuGet package version",
            "in": "query",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0.1",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "The NuGet Package Delete endpoint"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet Package Delete endpoint",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/nuget/authorize": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 14.1",
        "operationId": "projects_packages/putApiV4ProjectsIdPackagesNugetAuthorize",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet Package Authorize endpoint"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet Package Authorize endpoint",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/nuget/download/*package_name/*package_version/*package_filename": {
      "get": {
        "description": "This feature was introduced in GitLab 12.8",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesNugetDownload*packageName*packageVersion*packageFilename",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The NuGet package name",
            "in": "query",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "mynugetpkg.1.3.0.17.nupkg",
              "type": "string"
            }
          },
          {
            "description": "The NuGet package version",
            "in": "query",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.3.0.17",
              "type": "string"
            }
          },
          {
            "description": "The NuGet package filename",
            "in": "query",
            "name": "package_filename",
            "required": true,
            "schema": {
              "example": "mynugetpkg.1.3.0.17.nupkg",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet Content Service - content request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet Content Service - content request",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/nuget/download/*package_name/index": {
      "get": {
        "description": "This feature was introduced in GitLab 12.8",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesNugetDownload*packageNameIndex",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The NuGet package name",
            "in": "query",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "mynugetpkg.1.3.0.17.nupkg",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet Content Service - index request",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Nuget_PackagesVersions"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet Content Service - index request",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/nuget/index": {
      "get": {
        "description": "This feature was introduced in GitLab 12.6",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesNugetIndex",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet V3 Feed Service Index",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Nuget_ServiceIndex"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet V3 Feed Service Index",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/nuget/metadata/*package_name/*package_version": {
      "get": {
        "description": "This feature was introduced in GitLab 12.8",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesNugetMetadata*packageName*packageVersion",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The NuGet package name",
            "in": "query",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "MyNuGetPkg",
              "type": "string"
            }
          },
          {
            "description": "The NuGet package version",
            "in": "query",
            "name": "package_version",
            "required": true,
            "schema": {
              "example": "1.0.0",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet Metadata Service - Package name and version level",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Nuget_PackageMetadata"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet Metadata Service - Package name and version level",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/nuget/metadata/*package_name/index": {
      "get": {
        "description": "This feature was introduced in GitLab 12.8",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesNugetMetadata*packageNameIndex",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The NuGet package name",
            "in": "query",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "MyNuGetPkg",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet Metadata Service - Package name level",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Nuget_PackagesMetadata"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet Metadata Service - Package name level",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/nuget/query": {
      "get": {
        "description": "This feature was introduced in GitLab 12.8",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesNugetQuery",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The search term",
            "in": "query",
            "name": "q",
            "required": false,
            "schema": {
              "example": "MyNuGet",
              "type": "string"
            }
          },
          {
            "description": "The number of results to skip",
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": 0,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of results to return",
            "in": "query",
            "name": "take",
            "required": false,
            "schema": {
              "default": 20,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Include prerelease versions",
            "in": "query",
            "name": "prerelease",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet Search Service",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Nuget_SearchResults"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet Search Service",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/nuget/symbolfiles/*file_name/*signature/*same_file_name": {
      "get": {
        "description": "This feature was introduced in GitLab 16.7",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesNugetSymbolfiles*fileName*signature*sameFileName",
        "parameters": [
          {
            "in": "header",
            "name": "Symbolchecksum",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The symbol file name",
            "in": "query",
            "name": "file_name",
            "required": true,
            "schema": {
              "example": "mynugetpkg.pdb",
              "type": "string"
            }
          },
          {
            "description": "The symbol file signature",
            "in": "query",
            "name": "signature",
            "required": true,
            "schema": {
              "example": "k813f89485474661234z7109cve5709eFFFFFFFF",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "same_file_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet Symbol File Download Endpoint"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet Symbol File Download Endpoint",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/nuget/symbolpackage": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 14.1",
        "operationId": "projects_packages/putApiV4ProjectsIdPackagesNugetSymbolpackage",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdPackagesNugetSymbolpackage",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdPackagesNugetSymbolpackage"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The NuGet Symbol Package Publish endpoint"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet Symbol Package Publish endpoint",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/nuget/symbolpackage/authorize": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 14.1",
        "operationId": "projects_packages/putApiV4ProjectsIdPackagesNugetSymbolpackageAuthorize",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet Symbol Package Authorize endpoint"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet Symbol Package Authorize endpoint",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/nuget/v2": {
      "get": {
        "description": "This feature was introduced in GitLab 16.2",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesNugetV2",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet V2 Feed Service Index"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet V2 Feed Service Index",
        "tags": [
          "nuget_packages"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 16.2",
        "operationId": "projects_packages/putApiV4ProjectsIdPackagesNugetV2",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdPackagesNugetV2",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdPackagesNugetV2"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The NuGet V2 Feed Package Publish endpoint"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet V2 Feed Package Publish endpoint",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/nuget/v2/$metadata": {
      "get": {
        "description": "This feature was introduced in GitLab 16.3",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesNugetV2$metadata",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet V2 Feed Package $metadata endpoint"
          }
        },
        "summary": "The NuGet V2 Feed Package $metadata endpoint",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/nuget/v2/authorize": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 16.2",
        "operationId": "projects_packages/putApiV4ProjectsIdPackagesNugetV2Authorize",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet V2 Feed Package Authorize endpoint"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet V2 Feed Package Authorize endpoint",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/protection/rules": {
      "get": {
        "description": "Get list of package protection rules for a project",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesProtectionRules",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get list of package protection rules for a project",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Projects_Packages_Protection_Rule"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a package protection rule for a project",
        "operationId": "projects_packages/postApiV4ProjectsIdPackagesProtectionRules",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdPackagesProtectionRules",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdPackagesProtectionRules"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a package protection rule for a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Projects_Packages_Protection_Rule"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/protection/rules/{package_protection_rule_id}": {
      "delete": {
        "description": "Delete package protection rule",
        "operationId": "projects_packages/deleteApiV4ProjectsIdPackagesProtectionRulesPackageProtectionRuleId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the package protection rule",
            "in": "path",
            "name": "package_protection_rule_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "204 No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a package protection rule for a project",
        "operationId": "projects_packages/patchApiV4ProjectsIdPackagesProtectionRulesPackageProtectionRuleId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the package protection rule",
            "in": "path",
            "name": "package_protection_rule_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "patchApiV4ProjectsIdPackagesProtectionRulesPackageProtectionRuleId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/patchApiV4ProjectsIdPackagesProtectionRulesPackageProtectionRuleId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update a package protection rule for a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Projects_Packages_Protection_Rule"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/pypi": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 12.10",
        "operationId": "projects_packages/postApiV4ProjectsIdPackagesPypi",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdPackagesPypi",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdPackagesPypi"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "The PyPi Package upload endpoint"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "summary": "The PyPi Package upload endpoint",
        "tags": [
          "pypi_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/pypi/authorize": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 12.10",
        "operationId": "projects_packages/postApiV4ProjectsIdPackagesPypiAuthorize",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Authorize the PyPi package upload from workhorse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Authorize the PyPi package upload from workhorse",
        "tags": [
          "pypi_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/pypi/files/{sha256}/*file_identifier": {
      "get": {
        "description": "This feature was introduced in GitLab 12.10",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesPypiFilesSha256*fileIdentifier",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The PyPi package file identifier",
            "in": "query",
            "name": "file_identifier",
            "required": true,
            "schema": {
              "example": "my.pypi.package-0.0.1.tar.gz",
              "type": "string"
            }
          },
          {
            "description": "The PyPi package sha256 check sum",
            "in": "path",
            "name": "sha256",
            "required": true,
            "schema": {
              "example": "5y57017232013c8ac80647f4ca153k3726f6cba62d055cd747844ed95b3c65ff",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The PyPi package download endpoint"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The PyPi package download endpoint",
        "tags": [
          "pypi_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/pypi/simple": {
      "get": {
        "description": "This feature was introduced in GitLab 15.1",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesPypiSimple",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The PyPi Simple Project Index Endpoint"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The PyPi Simple Project Index Endpoint",
        "tags": [
          "pypi_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/pypi/simple/*package_name": {
      "get": {
        "description": "This feature was introduced in GitLab 12.10",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesPypiSimple*packageName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The PyPi package name",
            "in": "query",
            "name": "package_name",
            "required": true,
            "schema": {
              "example": "my.pypi.package",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The PyPi Simple Project Package Endpoint"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The PyPi Simple Project Package Endpoint",
        "tags": [
          "pypi_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/rpm": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 15.7",
        "operationId": "projects_packages/postApiV4ProjectsIdPackagesRpm",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Upload a RPM package"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Upload a RPM package",
        "tags": [
          "rpm_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/rpm/*package_file_id/*file_name": {
      "get": {
        "description": "This feature was introduced in GitLab 15.7",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesRpm*packageFileId*fileName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "RPM package file id",
            "in": "query",
            "name": "package_file_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "RPM package file name",
            "in": "query",
            "name": "file_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download RPM package files"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Download RPM package files",
        "tags": [
          "rpm_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/rpm/authorize": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 15.7",
        "operationId": "projects_packages/postApiV4ProjectsIdPackagesRpmAuthorize",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Authorize package upload from workhorse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Authorize package upload from workhorse",
        "tags": [
          "rpm_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/rpm/repodata/*file_name": {
      "get": {
        "description": "This feature was introduced in GitLab 15.7",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesRpmRepodata*fileName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Repository metadata file name",
            "in": "query",
            "name": "file_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download repository metadata files"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Download repository metadata files",
        "tags": [
          "rpm_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/rubygems/api/v1/dependencies": {
      "get": {
        "description": "This feature was introduced in GitLab 13.9",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesRubygemsApiV1Dependencies",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Comma delimited gem names",
            "in": "query",
            "name": "gems",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Fetch a list of dependencies"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Fetch a list of dependencies",
        "tags": [
          "rubygem_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/rubygems/api/v1/gems": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 13.9",
        "operationId": "projects_packages/postApiV4ProjectsIdPackagesRubygemsApiV1Gems",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdPackagesRubygemsApiV1Gems",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdPackagesRubygemsApiV1Gems"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Upload a gem"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Upload a gem",
        "tags": [
          "rubygem_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/rubygems/api/v1/gems/authorize": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 13.9",
        "operationId": "projects_packages/postApiV4ProjectsIdPackagesRubygemsApiV1GemsAuthorize",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Authorize a gem upload from workhorse"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "summary": "Authorize a gem upload from workhorse",
        "tags": [
          "rubygem_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/rubygems/gems/{file_name}": {
      "get": {
        "description": "This feature was introduced in GitLab 13.9",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesRubygemsGemsFileName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Package file name",
            "in": "path",
            "name": "file_name",
            "required": true,
            "schema": {
              "type": "file"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download the .gem package"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Download the .gem package",
        "tags": [
          "rubygem_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/rubygems/quick/Marshal.4.8/{file_name}": {
      "get": {
        "description": "This feature was introduced in GitLab 13.9",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesRubygemsQuickMarshal48FileName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Gemspec file name",
            "in": "path",
            "name": "file_name",
            "required": true,
            "schema": {
              "type": "file"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download the gemspec file"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Download the gemspec file",
        "tags": [
          "rubygem_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/rubygems/{file_name}": {
      "get": {
        "description": "This feature was introduced in GitLab 13.9",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesRubygemsFileName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Spec file name",
            "in": "path",
            "name": "file_name",
            "required": true,
            "schema": {
              "type": "file"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download the spec index file"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Download the spec index file",
        "tags": [
          "rubygem_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/terraform/modules/{module_name}/{module_system}": {
      "get": {
        "description": "This feature was introduced in GitLab 16.7",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesTerraformModulesModuleNameModuleSystem",
        "parameters": [
          {
            "description": "The ID or full path of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Module name",
            "in": "path",
            "name": "module_name",
            "required": true,
            "schema": {
              "example": "infra-registry",
              "type": "string"
            }
          },
          {
            "description": "Module system",
            "in": "path",
            "name": "module_system",
            "required": true,
            "schema": {
              "example": "aws",
              "type": "string"
            }
          },
          {
            "description": "Terraform get redirection flag",
            "in": "query",
            "name": "terraform-get",
            "required": false,
            "schema": {
              "enum": [
                "1"
              ],
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Download the latest version of a module"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Download the latest version of a module",
        "tags": [
          "terraform_registry"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/terraform/modules/{module_name}/{module_system}/*module_version": {
      "get": {
        "description": "This feature was introduced in GitLab 16.7",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesTerraformModulesModuleNameModuleSystem*moduleVersion",
        "parameters": [
          {
            "description": "The ID or full path of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Module name",
            "in": "path",
            "name": "module_name",
            "required": true,
            "schema": {
              "example": "infra-registry",
              "type": "string"
            }
          },
          {
            "description": "Module system",
            "in": "path",
            "name": "module_system",
            "required": true,
            "schema": {
              "example": "aws",
              "type": "string"
            }
          },
          {
            "description": "Module version",
            "in": "query",
            "name": "module_version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Terraform get redirection flag",
            "in": "query",
            "name": "terraform-get",
            "required": false,
            "schema": {
              "enum": [
                "1"
              ],
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Download a specific version of a module"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Download a specific version of a module",
        "tags": [
          "terraform_registry"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/terraform/modules/{module_name}/{module_system}/*module_version/file": {
      "put": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "This feature was introduced in GitLab 13.11",
        "operationId": "projects_packages/putApiV4ProjectsIdPackagesTerraformModulesModuleNameModuleSystem*moduleVersionFile",
        "parameters": [
          {
            "description": "The ID or full path of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Module name",
            "in": "path",
            "name": "module_name",
            "required": true,
            "schema": {
              "example": "infra-registry",
              "type": "string"
            }
          },
          {
            "description": "Module system",
            "in": "path",
            "name": "module_system",
            "required": true,
            "schema": {
              "example": "aws",
              "type": "string"
            }
          },
          {
            "description": "Module version",
            "in": "formData",
            "name": "module_version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The package file to be published (generated by Multipart middleware)",
            "in": "formData",
            "name": "file",
            "required": true,
            "schema": {
              "type": "file"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Upload Terraform Module package file"
          },
          "400": {
            "description": "Invalid file"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Upload Terraform Module package file",
        "tags": [
          "terraform_registry"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/terraform/modules/{module_name}/{module_system}/*module_version/file/authorize": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 13.11",
        "operationId": "projects_packages/putApiV4ProjectsIdPackagesTerraformModulesModuleNameModuleSystem*moduleVersionFileAuthorize",
        "parameters": [
          {
            "description": "The ID or full path of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Module name",
            "in": "path",
            "name": "module_name",
            "required": true,
            "schema": {
              "example": "infra-registry",
              "type": "string"
            }
          },
          {
            "description": "Module system",
            "in": "path",
            "name": "module_system",
            "required": true,
            "schema": {
              "example": "aws",
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdPackagesTerraformModulesModuleNameModuleSystem*moduleVersionFileAuthorize",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdPackagesTerraformModulesModuleNameModuleSystem*moduleVersionFileAuthorize"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Workhorse authorize Terraform Module package file"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "summary": "Workhorse authorize Terraform Module package file",
        "tags": [
          "terraform_registry"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/{package_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 11.9",
        "operationId": "projects_packages/deleteApiV4ProjectsIdPackagesPackageId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a package",
            "in": "path",
            "name": "package_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a project package"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Delete a project package",
        "tags": [
          "project_packages"
        ]
      },
      "get": {
        "description": "This feature was introduced in GitLab 11.9",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesPackageId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a package",
            "in": "path",
            "name": "package_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single project package",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Package"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get a single project package",
        "tags": [
          "project_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/{package_id}/package_files": {
      "get": {
        "description": "Get a list of package files of a single package",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesPackageIdPackageFiles",
        "parameters": [
          {
            "description": "ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of a package",
            "in": "path",
            "name": "package_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List package files",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_PackageFile"
              },
              "type": "array"
            }
          }
        },
        "summary": "List package files",
        "tags": [
          "package_files"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/{package_id}/package_files/{package_file_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 13.12",
        "operationId": "projects_packages/deleteApiV4ProjectsIdPackagesPackageIdPackageFilesPackageFileId",
        "parameters": [
          {
            "description": "ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID of a package",
            "in": "path",
            "name": "package_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "ID of a package file",
            "in": "path",
            "name": "package_file_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a package file"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Delete a package file",
        "tags": [
          "package_files"
        ]
      }
    },
    "/api/v4/projects/{id}/packages/{package_id}/pipelines": {
      "get": {
        "description": "This feature was introduced in GitLab 16.1",
        "operationId": "projects_packages/getApiV4ProjectsIdPackagesPackageIdPipelines",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "maximum": 20,
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "description": "The ID of a package",
            "in": "path",
            "name": "package_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Cursor for obtaining the next set of records",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the pipelines for a single project package",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Package_Pipeline"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get the pipelines for a single project package",
        "tags": [
          "project_packages"
        ]
      }
    },
    "/api/v4/projects/{id}/pages": {
      "delete": {
        "description": "Remove pages. The user must have administrator access. This feature was introduced in GitLab 12.6",
        "operationId": "projects_pages/deleteApiV4ProjectsIdPages",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Unpublish pages"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Unpublish pages",
        "tags": [
          "pages"
        ]
      },
      "get": {
        "description": "Get pages URL and other settings. This feature was introduced in Gitlab 16.8",
        "operationId": "projects_pages/getApiV4ProjectsIdPages",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get pages settings"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get pages settings",
        "tags": [
          "pages"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Update page settings for a project. User must have administrative access.",
        "operationId": "projects_pages/patchApiV4ProjectsIdPages",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "patchApiV4ProjectsIdPages",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/patchApiV4ProjectsIdPages"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update pages settings"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Update pages settings",
        "tags": [
          "pages"
        ]
      }
    },
    "/api/v4/projects/{id}/pages/domains": {
      "get": {
        "description": "Get all pages domains",
        "operationId": "projects_pages/getApiV4ProjectsIdPagesDomains",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get all pages domains",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_PagesDomain"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "pages_domains"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new pages domain",
        "operationId": "projects_pages/postApiV4ProjectsIdPagesDomains",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdPagesDomains",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdPagesDomains"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a new pages domain",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_PagesDomain"
            }
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pages/domains/{domain}": {
      "delete": {
        "description": "Delete a pages domain",
        "operationId": "projects_pages/deleteApiV4ProjectsIdPagesDomainsDomain",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The domain",
            "in": "path",
            "name": "domain",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a pages domain"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "Get a single pages domain",
        "operationId": "projects_pages/getApiV4ProjectsIdPagesDomainsDomain",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The domain",
            "in": "path",
            "name": "domain",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single pages domain",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_PagesDomain"
            }
          }
        },
        "tags": [
          "projects"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates a pages domain",
        "operationId": "projects_pages/putApiV4ProjectsIdPagesDomainsDomain",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The domain",
            "in": "path",
            "name": "domain",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdPagesDomainsDomain",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdPagesDomainsDomain"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Updates a pages domain"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pages/domains/{domain}/verify": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Verify a pages domain",
        "operationId": "projects_pages/putApiV4ProjectsIdPagesDomainsDomainVerify",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The domain to verify",
            "in": "path",
            "name": "domain",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Verify a pages domain",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_PagesDomain"
            }
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pages_access": {
      "get": {
        "description": "Check pages access of this project",
        "operationId": "projects_pages_access/getApiV4ProjectsIdPagesAccess",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Check pages access of this project"
          },
          "403": {
            "description": "Unauthenticated"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pipeline": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 8.14",
        "operationId": "projects_pipeline/postApiV4ProjectsIdPipeline",
        "parameters": [
          {
            "description": "The project ID or URL-encoded path",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 11,
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV4ProjectsIdPipeline"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API_Entities_Ci_Pipeline"
                }
              }
            },
            "description": "Create a new pipeline"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": null
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": null
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": null
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": null
                }
              }
            },
            "description": "Not found"
          }
        },
        "summary": "Create a new pipeline",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pipeline_schedules": {
      "get": {
        "description": "Get all pipeline schedules",
        "operationId": "projects_pipeline_schedules/getApiV4ProjectsIdPipelineSchedules",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 18,
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The scope of pipeline schedules",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "active",
                "inactive"
              ],
              "example": "active",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get all pipeline schedules",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Ci_PipelineSchedule"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new pipeline schedule",
        "operationId": "projects_pipeline_schedules/postApiV4ProjectsIdPipelineSchedules",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 18,
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdPipelineSchedules",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdPipelineSchedules"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a new pipeline schedule",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_PipelineScheduleDetails"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pipeline_schedules/{pipeline_schedule_id}": {
      "delete": {
        "description": "Delete a pipeline schedule",
        "operationId": "projects_pipeline_schedules/deleteApiV4ProjectsIdPipelineSchedulesPipelineScheduleId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 18,
              "type": "string"
            }
          },
          {
            "description": "The pipeline schedule id",
            "in": "path",
            "name": "pipeline_schedule_id",
            "required": true,
            "schema": {
              "example": 13,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a pipeline schedule"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "412": {
            "description": "Precondition Failed"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "Get a single pipeline schedule",
        "operationId": "projects_pipeline_schedules/getApiV4ProjectsIdPipelineSchedulesPipelineScheduleId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 18,
              "type": "string"
            }
          },
          {
            "description": "The pipeline schedule id",
            "in": "path",
            "name": "pipeline_schedule_id",
            "required": true,
            "schema": {
              "example": 13,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single pipeline schedule",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_PipelineScheduleDetails"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Edit a pipeline schedule",
        "operationId": "projects_pipeline_schedules/putApiV4ProjectsIdPipelineSchedulesPipelineScheduleId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 18,
              "type": "string"
            }
          },
          {
            "description": "The pipeline schedule id",
            "in": "path",
            "name": "pipeline_schedule_id",
            "required": true,
            "schema": {
              "example": 13,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdPipelineSchedulesPipelineScheduleId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdPipelineSchedulesPipelineScheduleId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Edit a pipeline schedule",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_PipelineScheduleDetails"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pipeline_schedules/{pipeline_schedule_id}/pipelines": {
      "get": {
        "description": "Get all pipelines triggered from a pipeline schedule",
        "operationId": "projects_pipeline_schedules/getApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdPipelines",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 18,
              "type": "string"
            }
          },
          {
            "description": "The pipeline schedule ID",
            "in": "path",
            "name": "pipeline_schedule_id",
            "required": true,
            "schema": {
              "example": 13,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get all pipelines triggered from a pipeline schedule",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Ci_PipelineBasic"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pipeline_schedules/{pipeline_schedule_id}/play": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was added in GitLab 12.8",
        "operationId": "projects_pipeline_schedules/postApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdPlay",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 18,
              "type": "string"
            }
          },
          {
            "description": "The pipeline schedule id",
            "in": "path",
            "name": "pipeline_schedule_id",
            "required": true,
            "schema": {
              "example": 13,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Play a scheduled pipeline immediately"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Play a scheduled pipeline immediately",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pipeline_schedules/{pipeline_schedule_id}/take_ownership": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Take ownership of a pipeline schedule",
        "operationId": "projects_pipeline_schedules/postApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdTakeOwnership",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 18,
              "type": "string"
            }
          },
          {
            "description": "The pipeline schedule id",
            "in": "path",
            "name": "pipeline_schedule_id",
            "required": true,
            "schema": {
              "example": 13,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Take ownership of a pipeline schedule",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_PipelineScheduleDetails"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pipeline_schedules/{pipeline_schedule_id}/variables": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new pipeline schedule variable",
        "operationId": "projects_pipeline_schedules/postApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdVariables",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 18,
              "type": "string"
            }
          },
          {
            "description": "The pipeline schedule id",
            "in": "path",
            "name": "pipeline_schedule_id",
            "required": true,
            "schema": {
              "example": 13,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdVariables",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdVariables"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a new pipeline schedule variable",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Variable"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pipeline_schedules/{pipeline_schedule_id}/variables/{key}": {
      "delete": {
        "description": "Delete a pipeline schedule variable",
        "operationId": "projects_pipeline_schedules/deleteApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdVariablesKey",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 18,
              "type": "string"
            }
          },
          {
            "description": "The pipeline schedule id",
            "in": "path",
            "name": "pipeline_schedule_id",
            "required": true,
            "schema": {
              "example": 13,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The key of the variable",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "example": "NEW_VARIABLE",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "Delete a pipeline schedule variable",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Variable"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Edit a pipeline schedule variable",
        "operationId": "projects_pipeline_schedules/putApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdVariablesKey",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 18,
              "type": "string"
            }
          },
          {
            "description": "The pipeline schedule id",
            "in": "path",
            "name": "pipeline_schedule_id",
            "required": true,
            "schema": {
              "example": 13,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The key of the variable",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "example": "NEW_VARIABLE",
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdVariablesKey",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdPipelineSchedulesPipelineScheduleIdVariablesKey"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Edit a pipeline schedule variable",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Variable"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pipelines": {
      "get": {
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "projects_pipelines/getApiV4ProjectsIdPipelines",
        "parameters": [
          {
            "description": "The project ID or URL-encoded path",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 11,
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The scope of pipelines",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "running",
                "pending",
                "finished",
                "branches",
                "tags"
              ],
              "example": "pending",
              "type": "string"
            }
          },
          {
            "description": "The status of pipelines",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "created",
                "waiting_for_resource",
                "preparing",
                "waiting_for_callback",
                "pending",
                "running",
                "success",
                "failed",
                "canceling",
                "canceled",
                "skipped",
                "manual",
                "scheduled"
              ],
              "example": "pending",
              "type": "string"
            }
          },
          {
            "description": "The ref of pipelines",
            "in": "query",
            "name": "ref",
            "required": false,
            "schema": {
              "example": "develop",
              "type": "string"
            }
          },
          {
            "description": "The sha of pipelines",
            "in": "query",
            "name": "sha",
            "required": false,
            "schema": {
              "example": "a91957a858320c0e17f3a0eca7cfacbff50ea29a",
              "type": "string"
            }
          },
          {
            "description": "Returns pipelines with invalid configurations",
            "in": "query",
            "name": "yaml_errors",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The username of the user who triggered pipelines",
            "in": "query",
            "name": "username",
            "required": false,
            "schema": {
              "example": "root",
              "type": "string"
            }
          },
          {
            "description": "Return pipelines updated before the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
            "in": "query",
            "name": "updated_before",
            "required": false,
            "schema": {
              "example": "2015-12-24T15:51:21.880Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Return pipelines updated after the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
            "in": "query",
            "name": "updated_after",
            "required": false,
            "schema": {
              "example": "2015-12-24T15:51:21.880Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Order pipelines",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "id",
              "enum": [
                "id",
                "status",
                "ref",
                "updated_at",
                "user_id"
              ],
              "example": "status",
              "type": "string"
            }
          },
          {
            "description": "Sort pipelines",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "asc",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "source",
            "required": false,
            "schema": {
              "enum": [
                "unknown",
                "push",
                "web",
                "trigger",
                "schedule",
                "api",
                "external",
                "pipeline",
                "chat",
                "webide",
                "merge_request_event",
                "external_pull_request_event",
                "parent_pipeline",
                "ondemand_dast_scan",
                "ondemand_dast_validation",
                "security_orchestration_policy",
                "container_registry_push",
                "duo_workflow",
                "pipeline_execution_policy_schedule"
              ],
              "example": "push",
              "type": "string"
            }
          },
          {
            "description": "Filter pipelines by name",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "example": "Build pipeline",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get all Pipelines of the project",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Ci_PipelineBasic"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "summary": "Get all Pipelines of the project",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pipelines/latest": {
      "get": {
        "description": "This feature was introduced in GitLab 12.3",
        "operationId": "projects_pipelines/getApiV4ProjectsIdPipelinesLatest",
        "parameters": [
          {
            "description": "The project ID or URL-encoded path",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 11,
              "type": "string"
            }
          },
          {
            "description": "Branch ref of pipeline. Uses project default branch if not specified.",
            "in": "query",
            "name": "ref",
            "required": false,
            "schema": {
              "example": "develop",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets the latest pipeline for the project branch",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_PipelineWithMetadata"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Gets the latest pipeline for the project branch",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pipelines/{pipeline_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 11.6",
        "operationId": "projects_pipelines/deleteApiV4ProjectsIdPipelinesPipelineId",
        "parameters": [
          {
            "description": "The project ID or URL-encoded path",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 11,
              "type": "string"
            }
          },
          {
            "description": "The pipeline ID",
            "in": "path",
            "name": "pipeline_id",
            "required": true,
            "schema": {
              "example": 18,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Pipeline was deleted"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "summary": "Deletes a pipeline",
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "This feature was introduced in GitLab 8.11",
        "operationId": "projects_pipelines/getApiV4ProjectsIdPipelinesPipelineId",
        "parameters": [
          {
            "description": "The project ID or URL-encoded path",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 11,
              "type": "string"
            }
          },
          {
            "description": "The pipeline ID",
            "in": "path",
            "name": "pipeline_id",
            "required": true,
            "schema": {
              "example": 18,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets a specific pipeline for the project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_PipelineWithMetadata"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Gets a specific pipeline for the project",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pipelines/{pipeline_id}/bridges": {
      "get": {
        "description": "Get pipeline bridge jobs",
        "operationId": "projects_pipelines/getApiV4ProjectsIdPipelinesPipelineIdBridges",
        "parameters": [
          {
            "description": "The project ID or URL-encoded path",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 11,
              "type": "string"
            }
          },
          {
            "description": "The pipeline ID",
            "in": "path",
            "name": "pipeline_id",
            "required": true,
            "schema": {
              "example": 18,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The scope of builds to show",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "created",
                "waiting_for_resource",
                "preparing",
                "waiting_for_callback",
                "pending",
                "running",
                "success",
                "failed",
                "canceling",
                "canceled",
                "skipped",
                "manual",
                "scheduled"
              ],
              "example": [
                "pending",
                "running"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get pipeline bridge jobs",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Ci_Bridge"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pipelines/{pipeline_id}/cancel": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "projects_pipelines/postApiV4ProjectsIdPipelinesPipelineIdCancel",
        "parameters": [
          {
            "description": "The project ID or URL-encoded path",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 11,
              "type": "string"
            }
          },
          {
            "description": "The pipeline ID",
            "in": "path",
            "name": "pipeline_id",
            "required": true,
            "schema": {
              "example": 18,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Cancel all builds in the pipeline",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Pipeline"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Cancel all builds in the pipeline",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pipelines/{pipeline_id}/jobs": {
      "get": {
        "description": "Get pipeline jobs",
        "operationId": "projects_pipelines/getApiV4ProjectsIdPipelinesPipelineIdJobs",
        "parameters": [
          {
            "description": "The project ID or URL-encoded path",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 11,
              "type": "string"
            }
          },
          {
            "description": "The pipeline ID",
            "in": "path",
            "name": "pipeline_id",
            "required": true,
            "schema": {
              "example": 18,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Includes retried jobs",
            "in": "query",
            "name": "include_retried",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "The scope of builds to show",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "created",
                "waiting_for_resource",
                "preparing",
                "waiting_for_callback",
                "pending",
                "running",
                "success",
                "failed",
                "canceling",
                "canceled",
                "skipped",
                "manual",
                "scheduled"
              ],
              "example": [
                "pending",
                "running"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get pipeline jobs",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Ci_Job"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pipelines/{pipeline_id}/metadata": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 16.6",
        "operationId": "projects_pipelines/putApiV4ProjectsIdPipelinesPipelineIdMetadata",
        "parameters": [
          {
            "description": "The project ID or URL-encoded path",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 11,
              "type": "string"
            }
          },
          {
            "description": "The pipeline ID",
            "in": "path",
            "name": "pipeline_id",
            "required": true,
            "schema": {
              "example": 18,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdPipelinesPipelineIdMetadata",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdPipelinesPipelineIdMetadata"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Updates pipeline metadata",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_PipelineWithMetadata"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Updates pipeline metadata",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pipelines/{pipeline_id}/retry": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 8.11.",
        "operationId": "projects_pipelines/postApiV4ProjectsIdPipelinesPipelineIdRetry",
        "parameters": [
          {
            "description": "The project ID or URL-encoded path",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 11,
              "type": "string"
            }
          },
          {
            "description": "The pipeline ID",
            "in": "path",
            "name": "pipeline_id",
            "required": true,
            "schema": {
              "example": 18,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Retry builds in the pipeline",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Pipeline"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Retry builds in the pipeline",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pipelines/{pipeline_id}/test_report": {
      "get": {
        "description": "This feature was introduced in GitLab 13.0.",
        "operationId": "projects_pipelines/getApiV4ProjectsIdPipelinesPipelineIdTestReport",
        "parameters": [
          {
            "description": "The project ID or URL-encoded path",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 11,
              "type": "string"
            }
          },
          {
            "description": "The pipeline ID",
            "in": "path",
            "name": "pipeline_id",
            "required": true,
            "schema": {
              "example": 18,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets the test report for a given pipeline",
            "schema": {
              "$ref": "#/components/schemas/TestReportEntity"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Gets the test report for a given pipeline",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pipelines/{pipeline_id}/test_report_summary": {
      "get": {
        "description": "This feature was introduced in GitLab 14.2",
        "operationId": "projects_pipelines/getApiV4ProjectsIdPipelinesPipelineIdTestReportSummary",
        "parameters": [
          {
            "description": "The project ID or URL-encoded path",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 11,
              "type": "string"
            }
          },
          {
            "description": "The pipeline ID",
            "in": "path",
            "name": "pipeline_id",
            "required": true,
            "schema": {
              "example": 18,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets the test report summary for a given pipeline",
            "schema": {
              "$ref": "#/components/schemas/TestReportSummaryEntity"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Gets the test report summary for a given pipeline",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/pipelines/{pipeline_id}/variables": {
      "get": {
        "description": "This feature was introduced in GitLab 11.11",
        "operationId": "projects_pipelines/getApiV4ProjectsIdPipelinesPipelineIdVariables",
        "parameters": [
          {
            "description": "The project ID or URL-encoded path",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 11,
              "type": "string"
            }
          },
          {
            "description": "The pipeline ID",
            "in": "path",
            "name": "pipeline_id",
            "required": true,
            "schema": {
              "example": 18,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Gets the variables for a given pipeline",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Ci_Variable"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Gets the variables for a given pipeline",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/protected_branches": {
      "get": {
        "description": "Get a project's protected branches",
        "operationId": "projects_protected_branches/getApiV4ProjectsIdProtectedBranches",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "gitlab-org/gitlab",
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Search for a protected branch by name",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "example": "mai",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a project's protected branches",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_ProtectedBranch"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "401 Unauthorized"
          },
          "404": {
            "description": "404 Project Not Found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Protect a single branch",
        "operationId": "projects_protected_branches/postApiV4ProjectsIdProtectedBranches",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "gitlab-org/gitlab",
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdProtectedBranches",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdProtectedBranches"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Protect a single branch",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProtectedBranch"
            }
          },
          "401": {
            "description": "401 Unauthorized"
          },
          "404": {
            "description": "404 Project Not Found"
          },
          "409": {
            "description": "Protected branch 'main' already exists"
          },
          "422": {
            "description": "name is missing"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/protected_branches/{name}": {
      "delete": {
        "description": "Unprotect a single branch",
        "operationId": "projects_protected_branches/deleteApiV4ProjectsIdProtectedBranchesName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "gitlab-org/gitlab",
              "type": "string"
            }
          },
          {
            "description": "The name of the protected branch",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Unprotect a single branch"
          },
          "401": {
            "description": "401 Unauthorized"
          },
          "404": {
            "description": "404 Project Not Found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "Get a single protected branch",
        "operationId": "projects_protected_branches/getApiV4ProjectsIdProtectedBranchesName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "gitlab-org/gitlab",
              "type": "string"
            }
          },
          {
            "description": "The name of the branch or wildcard",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single protected branch",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProtectedBranch"
            }
          },
          "401": {
            "description": "401 Unauthorized"
          },
          "404": {
            "description": "404 Project Not Found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a protected branch",
        "operationId": "projects_protected_branches/patchApiV4ProjectsIdProtectedBranchesName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "gitlab-org/gitlab",
              "type": "string"
            }
          },
          {
            "description": "The name of the branch",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "patchApiV4ProjectsIdProtectedBranchesName",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/patchApiV4ProjectsIdProtectedBranchesName"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update a protected branch",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProtectedBranch"
            }
          },
          "400": {
            "description": "400 Bad request"
          },
          "401": {
            "description": "401 Unauthorized"
          },
          "404": {
            "description": "404 Project Not Found"
          },
          "422": {
            "description": "Push access levels access level has already been taken"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/protected_tags": {
      "get": {
        "description": "This feature was introduced in GitLab 11.3.",
        "operationId": "projects_protected_tags/getApiV4ProjectsIdProtectedTags",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a project's protected tags",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_ProtectedTag"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get a project's protected tags",
        "tags": [
          "protected_tags"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 11.3.",
        "operationId": "projects_protected_tags/postApiV4ProjectsIdProtectedTags",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdProtectedTags",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdProtectedTags"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Protect a single tag or wildcard",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProtectedTag"
            }
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Protect a single tag or wildcard",
        "tags": [
          "protected_tags"
        ]
      }
    },
    "/api/v4/projects/{id}/protected_tags/{name}": {
      "delete": {
        "description": "This feature was introduced in GitLab 11.3.",
        "operationId": "projects_protected_tags/deleteApiV4ProjectsIdProtectedTagsName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the protected tag",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "example": "release-1-0",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Unprotect a single tag"
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          },
          "412": {
            "description": "Precondition Failed"
          }
        },
        "summary": "Unprotect a single tag",
        "tags": [
          "protected_tags"
        ]
      },
      "get": {
        "description": "This feature was introduced in GitLab 11.3.",
        "operationId": "projects_protected_tags/getApiV4ProjectsIdProtectedTagsName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the tag or wildcard",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "example": "release*",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single protected tag",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProtectedTag"
            }
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get a single protected tag",
        "tags": [
          "protected_tags"
        ]
      }
    },
    "/api/v4/projects/{id}/ref/{ref}/trigger/pipeline": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Trigger a GitLab project pipeline",
        "operationId": "projects_ref/postApiV4ProjectsId(refRef)triggerPipeline",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 18,
              "type": "string"
            }
          },
          {
            "description": "The commit sha or name of a branch or tag",
            "in": "path",
            "name": "ref",
            "required": true,
            "schema": {
              "example": "develop",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV4ProjectsId(refRef)triggerPipeline"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Trigger a GitLab project pipeline",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Pipeline"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/registry/protection/repository/rules": {
      "get": {
        "description": "Get list of container registry protection rules for a project",
        "operationId": "projects_registry/getApiV4ProjectsIdRegistryProtectionRepositoryRules",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get list of container registry protection rules for a project",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Projects_ContainerRegistry_Protection_Rule"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a container protection rule for a project",
        "operationId": "projects_registry/postApiV4ProjectsIdRegistryProtectionRepositoryRules",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdRegistryProtectionRepositoryRules",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdRegistryProtectionRepositoryRules"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a container protection rule for a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Projects_ContainerRegistry_Protection_Rule"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/registry/protection/repository/rules/{protection_rule_id}": {
      "delete": {
        "description": "Delete container protection rule",
        "operationId": "projects_registry/deleteApiV4ProjectsIdRegistryProtectionRepositoryRulesProtectionRuleId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the container protection rule",
            "in": "path",
            "name": "protection_rule_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "204 No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a container protection rule for a project",
        "operationId": "projects_registry/patchApiV4ProjectsIdRegistryProtectionRepositoryRulesProtectionRuleId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the container protection rule",
            "in": "path",
            "name": "protection_rule_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "patchApiV4ProjectsIdRegistryProtectionRepositoryRulesProtectionRuleId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/patchApiV4ProjectsIdRegistryProtectionRepositoryRulesProtectionRuleId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update a container protection rule for a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Projects_ContainerRegistry_Protection_Rule"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/registry/repositories": {
      "get": {
        "description": "This feature was introduced in GitLab 11.8.",
        "operationId": "projects_registry/getApiV4ProjectsIdRegistryRepositories",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Determines if tags should be included",
            "in": "query",
            "name": "tags",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Determines if the tags count should be included",
            "in": "query",
            "name": "tags_count",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List container repositories within a project",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_ContainerRegistry_Repository"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "List container repositories within a project",
        "tags": [
          "container_registry"
        ]
      }
    },
    "/api/v4/projects/{id}/registry/repositories/{repository_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 11.8.",
        "operationId": "projects_registry/deleteApiV4ProjectsIdRegistryRepositoriesRepositoryId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the repository",
            "in": "path",
            "name": "repository_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Delete repository",
        "tags": [
          "container_registry"
        ]
      }
    },
    "/api/v4/projects/{id}/registry/repositories/{repository_id}/tags": {
      "delete": {
        "description": "This feature was introduced in GitLab 11.8.",
        "operationId": "projects_registry/deleteApiV4ProjectsIdRegistryRepositoriesRepositoryIdTags",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the repository",
            "in": "path",
            "name": "repository_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The tag name regexp to delete, specify .* to delete all",
            "in": "query",
            "name": "name_regex_delete",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The tag name regexp to delete, specify .* to delete all",
            "in": "query",
            "name": "name_regex",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The tag name regexp to retain",
            "in": "query",
            "name": "name_regex_keep",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Keep n of latest tags with matching name",
            "in": "query",
            "name": "keep_n",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Delete older than: 1h, 1d, 1month",
            "in": "query",
            "name": "older_than",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Delete repository tags (in bulk)",
        "tags": [
          "container_registry"
        ]
      },
      "get": {
        "description": "This feature was introduced in GitLab 11.8.",
        "operationId": "projects_registry/getApiV4ProjectsIdRegistryRepositoriesRepositoryIdTags",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the repository",
            "in": "path",
            "name": "repository_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List tags of a repository",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_ContainerRegistry_Tag"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "405": {
            "description": "Method Not Allowed"
          }
        },
        "summary": "List tags of a repository",
        "tags": [
          "container_registry"
        ]
      }
    },
    "/api/v4/projects/{id}/registry/repositories/{repository_id}/tags/{tag_name}": {
      "delete": {
        "description": "This feature was introduced in GitLab 11.8.",
        "operationId": "projects_registry/deleteApiV4ProjectsIdRegistryRepositoriesRepositoryIdTagsTagName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the repository",
            "in": "path",
            "name": "repository_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The name of the tag",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Delete repository tag",
        "tags": [
          "container_registry"
        ]
      },
      "get": {
        "description": "This feature was introduced in GitLab 11.8.",
        "operationId": "projects_registry/getApiV4ProjectsIdRegistryRepositoriesRepositoryIdTagsTagName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the repository",
            "in": "path",
            "name": "repository_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The name of the tag",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get details about a repository tag",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ContainerRegistry_TagDetails"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get details about a repository tag",
        "tags": [
          "container_registry"
        ]
      }
    },
    "/api/v4/projects/{id}/relation-imports": {
      "get": {
        "description": "This feature was introduced in GitLab 16.11.",
        "operationId": "projects_relation-imports/getApiV4ProjectsIdRelationImports",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the statuses of relation imports for specified project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProjectImportStatus"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "summary": "Get the statuses of relation imports for specified project",
        "tags": [
          "project_import"
        ]
      }
    },
    "/api/v4/projects/{id}/releases": {
      "get": {
        "description": "Returns a paginated list of releases. This feature was introduced in GitLab 11.7.",
        "operationId": "projects_releases/getApiV4ProjectsIdReleases",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The field to use as order. Either `released_at` (default) or `created_at`",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "released_at",
              "enum": [
                "released_at",
                "created_at"
              ],
              "type": "string"
            }
          },
          {
            "description": "The direction of the order. Either `desc` (default) for descending order or `asc` for ascending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "If `true`, a response includes HTML rendered markdown of the release description",
            "in": "query",
            "name": "include_html_description",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Return releases updated before the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
            "in": "query",
            "name": "updated_before",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Return releases updated after the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
            "in": "query",
            "name": "updated_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List Releases",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Release"
              },
              "type": "array"
            }
          }
        },
        "summary": "List Releases",
        "tags": [
          "releases"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates a release. Developer level access to the project is required to create a release. This feature was introduced in GitLab 11.7.",
        "operationId": "projects_releases/postApiV4ProjectsIdReleases",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdReleases",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdReleases"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a release",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Release"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create a release",
        "tags": [
          "releases"
        ]
      }
    },
    "/api/v4/projects/{id}/releases/{tag_name}": {
      "delete": {
        "description": "Delete a release. Deleting a release doesn't delete the associated tag. Maintainer level access to the project is required to delete a release. This feature was introduced in GitLab 11.7.",
        "operationId": "projects_releases/deleteApiV4ProjectsIdReleasesTagName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Git tag the release is associated with",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a release",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Release"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Delete a release",
        "tags": [
          "releases"
        ]
      },
      "get": {
        "description": "Gets a release for the given tag. This feature was introduced in GitLab 11.7.",
        "operationId": "projects_releases/getApiV4ProjectsIdReleasesTagName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Git tag the release is associated with",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "If `true`, a response includes HTML rendered markdown of the release description",
            "in": "query",
            "name": "include_html_description",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a release by a tag name",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Release"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get a release by a tag name",
        "tags": [
          "releases"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates a release. Developer level access to the project is required to update a release. This feature was introduced in GitLab 11.7.",
        "operationId": "projects_releases/putApiV4ProjectsIdReleasesTagName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Git tag the release is associated with",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdReleasesTagName",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdReleasesTagName"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update a release",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Release"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Update a release",
        "tags": [
          "releases"
        ]
      }
    },
    "/api/v4/projects/{id}/releases/{tag_name}/assets/links": {
      "get": {
        "description": "Get assets as links from a release. This feature was introduced in GitLab 11.7.",
        "operationId": "projects_releases/getApiV4ProjectsIdReleasesTagNameAssetsLinks",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The tag associated with the release",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List links of a release",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Releases_Link"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "List links of a release",
        "tags": [
          "release_links"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create an asset as a link from a release. This feature was introduced in GitLab 11.7.",
        "operationId": "projects_releases/postApiV4ProjectsIdReleasesTagNameAssetsLinks",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The tag associated with the release",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdReleasesTagNameAssetsLinks",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdReleasesTagNameAssetsLinks"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a release link",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Releases_Link"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "Create a release link",
        "tags": [
          "release_links"
        ]
      }
    },
    "/api/v4/projects/{id}/releases/{tag_name}/assets/links/{link_id}": {
      "delete": {
        "description": "Deletes an asset as a link from a release. This feature was introduced in GitLab 11.7.",
        "operationId": "projects_releases/deleteApiV4ProjectsIdReleasesTagNameAssetsLinksLinkId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The tag associated with the release",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the link",
            "in": "path",
            "name": "link_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "Delete a release link",
        "tags": [
          "release_links"
        ]
      },
      "get": {
        "description": "Get an asset as a link from a release. This feature was introduced in GitLab 11.7.",
        "operationId": "projects_releases/getApiV4ProjectsIdReleasesTagNameAssetsLinksLinkId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The tag associated with the release",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the link",
            "in": "path",
            "name": "link_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a release link",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Releases_Link"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get a release link",
        "tags": [
          "release_links"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update an asset as a link from a release. This feature was introduced in GitLab 11.7.",
        "operationId": "projects_releases/putApiV4ProjectsIdReleasesTagNameAssetsLinksLinkId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The tag associated with the release",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the link",
            "in": "path",
            "name": "link_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdReleasesTagNameAssetsLinksLinkId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdReleasesTagNameAssetsLinksLinkId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update a release link",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Releases_Link"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "Update a release link",
        "tags": [
          "release_links"
        ]
      }
    },
    "/api/v4/projects/{id}/releases/{tag_name}/downloads/*direct_asset_path": {
      "get": {
        "description": "This feature was introduced in GitLab 15.4.",
        "operationId": "projects_releases/getApiV4ProjectsIdReleasesTagNameDownloads*directAssetPath",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The Git tag the release is associated with",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The path to the file to download, as specified when creating the release asset",
            "in": "query",
            "name": "direct_asset_path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download a project release asset file"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Download a project release asset file",
        "tags": [
          "releases"
        ]
      }
    },
    "/api/v4/projects/{id}/releases/{tag_name}/evidence": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Creates an evidence for an existing Release. This feature was introduced in GitLab 12.10.",
        "operationId": "projects_releases/postApiV4ProjectsIdReleasesTagNameEvidence",
        "parameters": [
          {
            "description": "The Git tag the release is associated with",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Collect release evidence",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Release"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Collect release evidence",
        "tags": [
          "releases"
        ]
      }
    },
    "/api/v4/projects/{id}/remote_mirrors": {
      "get": {
        "description": "List the project's remote mirrors",
        "operationId": "projects_remote_mirrors/getApiV4ProjectsIdRemoteMirrors",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List the project's remote mirrors",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_RemoteMirror"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "remote_mirrors"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create remote mirror for a project",
        "operationId": "projects_remote_mirrors/postApiV4ProjectsIdRemoteMirrors",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdRemoteMirrors",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdRemoteMirrors"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create remote mirror for a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_RemoteMirror"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "remote_mirrors"
        ]
      }
    },
    "/api/v4/projects/{id}/remote_mirrors/{mirror_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 14.10",
        "operationId": "projects_remote_mirrors/deleteApiV4ProjectsIdRemoteMirrorsMirrorId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a remote mirror",
            "in": "path",
            "name": "mirror_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a single remote mirror"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Delete a single remote mirror",
        "tags": [
          "remote_mirrors"
        ]
      },
      "get": {
        "description": "Get a single remote mirror",
        "operationId": "projects_remote_mirrors/getApiV4ProjectsIdRemoteMirrorsMirrorId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a remote mirror",
            "in": "path",
            "name": "mirror_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single remote mirror",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_RemoteMirror"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "remote_mirrors"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update the attributes of a single remote mirror",
        "operationId": "projects_remote_mirrors/putApiV4ProjectsIdRemoteMirrorsMirrorId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a remote mirror",
            "in": "path",
            "name": "mirror_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdRemoteMirrorsMirrorId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdRemoteMirrorsMirrorId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update the attributes of a single remote mirror",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_RemoteMirror"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "remote_mirrors"
        ]
      }
    },
    "/api/v4/projects/{id}/remote_mirrors/{mirror_id}/public_key": {
      "get": {
        "description": "Get the public key of a single remote mirror",
        "operationId": "projects_remote_mirrors/getApiV4ProjectsIdRemoteMirrorsMirrorIdPublicKey",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a remote mirror",
            "in": "path",
            "name": "mirror_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the public key of a single remote mirror"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "remote_mirrors"
        ]
      }
    },
    "/api/v4/projects/{id}/remote_mirrors/{mirror_id}/sync": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Triggers a push mirror operation",
        "operationId": "projects_remote_mirrors/postApiV4ProjectsIdRemoteMirrorsMirrorIdSync",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a remote mirror",
            "in": "path",
            "name": "mirror_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Triggers a push mirror operation"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "remote_mirrors"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/archive": {
      "get": {
        "description": "Get an archive of the repository",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryArchive",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 1,
              "type": "string"
            }
          },
          {
            "description": "The commit sha of the archive to be downloaded",
            "in": "query",
            "name": "sha",
            "required": false,
            "schema": {
              "example": "7d70e02340bac451f281cecf0a980907974bd8be",
              "type": "string"
            }
          },
          {
            "description": "The archive format",
            "in": "query",
            "name": "format",
            "required": false,
            "schema": {
              "example": "tar.gz",
              "type": "string"
            }
          },
          {
            "description": "Subfolder of the repository to be downloaded",
            "in": "query",
            "name": "path",
            "required": false,
            "schema": {
              "example": "files/archives",
              "type": "string"
            }
          },
          {
            "description": "Used to exclude LFS objects from archive",
            "in": "query",
            "name": "include_lfs_blobs",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "description": "Comma-separated list of paths to exclude from the archive",
            "in": "query",
            "name": "exclude_paths",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get an archive of the repository"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/blobs/{sha}": {
      "get": {
        "description": "Get a blob from the repository",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryBlobsSha",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 1,
              "type": "string"
            }
          },
          {
            "description": "The commit hash",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "example": "7d70e02340bac451f281cecf0a980907974bd8be",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a blob from the repository"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/blobs/{sha}/raw": {
      "get": {
        "description": "Get raw blob contents from the repository",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryBlobsShaRaw",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 1,
              "type": "string"
            }
          },
          {
            "description": "The commit hash",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "example": "7d70e02340bac451f281cecf0a980907974bd8be",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get raw blob contents from the repository"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/branches": {
      "get": {
        "description": "Get a project repository branches",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryBranches",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return list of branches matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return list of branches matching the regex",
            "in": "query",
            "name": "regex",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return list of branches sorted by the given field",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "name_asc",
                "updated_asc",
                "updated_desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Name of branch to start the pagination from",
            "in": "query",
            "name": "page_token",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a project repository branches",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Branch"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "404 Project Not Found"
          }
        },
        "tags": [
          "branches"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create branch",
        "operationId": "projects_repository/postApiV4ProjectsIdRepositoryBranches",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdRepositoryBranches",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdRepositoryBranches"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create branch",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Branch"
            }
          },
          "400": {
            "description": "Failed to create branch"
          }
        },
        "tags": [
          "branches"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/branches/{branch}": {
      "delete": {
        "description": "Delete a branch",
        "operationId": "projects_repository/deleteApiV4ProjectsIdRepositoryBranchesBranch",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the branch",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a branch"
          },
          "404": {
            "description": "Branch Not Found"
          }
        },
        "tags": [
          "branches"
        ]
      },
      "get": {
        "description": "Get a single repository branch",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryBranchesBranch",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API_Entities_Branch"
                }
              }
            },
            "description": "Get a single repository branch"
          },
          "404": {
            "description": "Branch Not Found"
          }
        },
        "tags": [
          "branches"
        ]
      },
      "head": {
        "description": "Check if a branch exists",
        "operationId": "projects_repository/headApiV4ProjectsIdRepositoryBranchesBranch",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the branch",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "branches"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/branches/{branch}/protect": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Protect a single branch",
        "operationId": "projects_repository/putApiV4ProjectsIdRepositoryBranchesBranchProtect",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the branch",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdRepositoryBranchesBranchProtect",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdRepositoryBranchesBranchProtect"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Protect a single branch",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Branch"
            }
          },
          "404": {
            "description": "404 Branch Not Found"
          }
        },
        "tags": [
          "branches"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/branches/{branch}/unprotect": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Unprotect a single branch",
        "operationId": "projects_repository/putApiV4ProjectsIdRepositoryBranchesBranchUnprotect",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the branch",
            "in": "path",
            "name": "branch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Unprotect a single branch",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Branch"
            }
          },
          "404": {
            "description": "404 Project Not Found"
          }
        },
        "tags": [
          "branches"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/changelog": {
      "get": {
        "description": "This feature was introduced in GitLab 14.6",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryChangelog",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 1,
              "type": "string"
            }
          },
          {
            "description": "The version of the release, using the semantic versioning format",
            "in": "query",
            "name": "version",
            "required": true,
            "schema": {
              "example": "1.0.0",
              "type": "string"
            }
          },
          {
            "description": "The first commit in the range of commits to use for the changelog",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "example": "ed899a2f4b50b4370feeea94676502b42383c746",
              "type": "string"
            }
          },
          {
            "description": "The last commit in the range of commits to use for the changelog",
            "in": "query",
            "name": "to",
            "required": false,
            "schema": {
              "example": "6104942438c14ec7bd21c6cd5bd995272b3faff6",
              "type": "string"
            }
          },
          {
            "description": "The date and time of the release",
            "in": "query",
            "name": "date",
            "required": false,
            "schema": {
              "example": "2021-09-20T11:50:22.001+00:00",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The Git trailer to use for determining if commits are to be included in the changelog",
            "in": "query",
            "name": "trailer",
            "required": false,
            "schema": {
              "default": "Changelog",
              "example": "Changelog",
              "type": "string"
            }
          },
          {
            "description": "The file path to the configuration file as stored in the project's Git repository. Defaults to '.gitlab/changelog_config.yml'",
            "in": "query",
            "name": "config_file",
            "required": false,
            "schema": {
              "example": ".gitlab/changelog_config.yml",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Generates a changelog section for a release and returns it",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Changelog"
            }
          }
        },
        "summary": "Generates a changelog section for a release and returns it",
        "tags": [
          "projects"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 13.9",
        "operationId": "projects_repository/postApiV4ProjectsIdRepositoryChangelog",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 1,
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdRepositoryChangelog",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdRepositoryChangelog"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Generates a changelog section for a release and commits it in a changelog file"
          }
        },
        "summary": "Generates a changelog section for a release and commits it in a changelog file",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/commits": {
      "get": {
        "description": "Get a project repository commits",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryCommits",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of a repository branch or tag, if not given the default branch is used",
            "in": "query",
            "name": "ref_name",
            "required": false,
            "schema": {
              "example": "v1.1.0",
              "type": "string"
            }
          },
          {
            "description": "Only commits after or on this date will be returned",
            "in": "query",
            "name": "since",
            "required": false,
            "schema": {
              "example": "2021-09-20T11:50:22.001",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Only commits before or on this date will be returned",
            "in": "query",
            "name": "until",
            "required": false,
            "schema": {
              "example": "2021-09-20T11:50:22.001",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "The file path",
            "in": "query",
            "name": "path",
            "required": false,
            "schema": {
              "example": "README.md",
              "type": "string"
            }
          },
          {
            "description": "Search commits by commit author",
            "in": "query",
            "name": "author",
            "required": false,
            "schema": {
              "example": "John Smith",
              "type": "string"
            }
          },
          {
            "description": "Every commit will be returned",
            "in": "query",
            "name": "all",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Stats about each commit will be added to the response",
            "in": "query",
            "name": "with_stats",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Only include the first parent of merges",
            "in": "query",
            "name": "first_parent",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "List commits in order",
            "in": "query",
            "name": "order",
            "required": false,
            "schema": {
              "default": "default",
              "enum": [
                "default",
                "topo"
              ],
              "type": "string"
            }
          },
          {
            "description": "Parse and include Git trailers for every commit",
            "in": "query",
            "name": "trailers",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a project repository commits",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Commit"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "commits"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 8.13",
        "operationId": "projects_repository/postApiV4ProjectsIdRepositoryCommits",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdRepositoryCommits",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdRepositoryCommits"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Commit multiple file changes as one commit",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_CommitDetail"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Commit multiple file changes as one commit",
        "tags": [
          "commits"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/commits/{sha}": {
      "get": {
        "description": "Get a specific commit of a project",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryCommitsSha",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A commit sha, or the name of a branch or tag",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include commit stats",
            "in": "query",
            "name": "stats",
            "required": false,
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a specific commit of a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_CommitDetail"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "commits"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/commits/{sha}/cherry_pick": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 8.15",
        "operationId": "projects_repository/postApiV4ProjectsIdRepositoryCommitsShaCherryPick",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A commit sha, or the name of a branch or tag to be cherry-picked",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdRepositoryCommitsShaCherryPick",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdRepositoryCommitsShaCherryPick"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Cherry pick commit into a branch",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Commit"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Cherry pick commit into a branch",
        "tags": [
          "commits"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/commits/{sha}/comments": {
      "get": {
        "description": "Get a commit's comments",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryCommitsShaComments",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "A commit sha, or the name of a branch or tag",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a commit's comments",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_CommitNote"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "commits"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Post comment to commit",
        "operationId": "projects_repository/postApiV4ProjectsIdRepositoryCommitsShaComments",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A commit sha, or the name of a branch or tag on which to post a comment",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdRepositoryCommitsShaComments",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdRepositoryCommitsShaComments"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Post comment to commit",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_CommitNote"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "commits"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/commits/{sha}/diff": {
      "get": {
        "description": "Get the diff for a specific commit of a project",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryCommitsShaDiff",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A commit sha, or the name of a branch or tag",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "A diff in a Unified diff format",
            "in": "query",
            "name": "unidiff",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the diff for a specific commit of a project",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Diff"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "commits"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/commits/{sha}/merge_requests": {
      "get": {
        "description": "Get Merge Requests associated with a commit",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryCommitsShaMergeRequests",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A commit sha, or the name of a branch or tag on which to find Merge Requests",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get Merge Requests associated with a commit",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_MergeRequestBasic"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "commits"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/commits/{sha}/refs": {
      "get": {
        "description": "This feature was introduced in GitLab 10.6",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryCommitsShaRefs",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A commit sha",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Scope",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "default": "all",
              "enum": [
                "branch",
                "tag",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get all references a commit is pushed to",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_BasicRef"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get all references a commit is pushed to",
        "tags": [
          "commits"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/commits/{sha}/revert": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 11.5",
        "operationId": "projects_repository/postApiV4ProjectsIdRepositoryCommitsShaRevert",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Commit SHA to revert",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdRepositoryCommitsShaRevert",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdRepositoryCommitsShaRevert"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Revert a commit in a branch",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Commit"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Revert a commit in a branch",
        "tags": [
          "commits"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/commits/{sha}/sequence": {
      "get": {
        "description": "Get the sequence count of a commit SHA",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryCommitsShaSequence",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A commit SHA",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Only include the first parent of merges",
            "in": "query",
            "name": "first_parent",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the sequence count of a commit SHA",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_CommitSequence"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "commits"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/commits/{sha}/signature": {
      "get": {
        "description": "Get a commit's signature",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryCommitsShaSignature",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "A commit sha, or the name of a branch or tag",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a commit's signature",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_CommitSignature"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "commits"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/commits/{sha}/statuses": {
      "get": {
        "description": "Get a commit's statuses",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryCommitsShaStatuses",
        "parameters": [
          {
            "description": "ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Hash of the commit.",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "example": "18f3e63d05582537db6d183d9d557be09e1f90c8",
              "type": "string"
            }
          },
          {
            "description": "Name of the branch or tag. Default is the default branch.",
            "in": "query",
            "name": "ref",
            "required": false,
            "schema": {
              "example": "develop",
              "type": "string"
            }
          },
          {
            "description": "Filter statuses by build stage.",
            "in": "query",
            "name": "stage",
            "required": false,
            "schema": {
              "example": "test",
              "type": "string"
            }
          },
          {
            "description": "Filter statuses by job name.",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "example": "bundler:audit",
              "type": "string"
            }
          },
          {
            "description": "Filter statuses by pipeline ID.",
            "in": "query",
            "name": "pipeline_id",
            "required": false,
            "schema": {
              "example": 1234,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Include all statuses instead of latest only. Default is `false`.",
            "in": "query",
            "name": "all",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Values for sorting statuses. Valid values are `id` and `pipeline_id`. Default is `id`.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "id",
              "enum": [
                "id",
                "pipeline_id"
              ],
              "type": "string"
            }
          },
          {
            "description": "Sort statuses in ascending or descending order. Valid values are `asc` and `desc`. Default is `asc`.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/API_Entities_CommitStatus"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Get a commit's statuses"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/compare": {
      "get": {
        "description": "Compare two branches, tags, or commits",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryCompare",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 1,
              "type": "string"
            }
          },
          {
            "description": "The commit, branch name, or tag name to start comparison",
            "in": "query",
            "name": "from",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          },
          {
            "description": "The commit, branch name, or tag name to stop comparison",
            "in": "query",
            "name": "to",
            "required": true,
            "schema": {
              "example": "feature",
              "type": "string"
            }
          },
          {
            "description": "The project to compare from",
            "in": "query",
            "name": "from_project_id",
            "required": false,
            "schema": {
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Comparison method, `true` for direct comparison between `from` and `to` (`from`..`to`), `false` to compare using merge base (`from`...`to`)",
            "in": "query",
            "name": "straight",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "A diff in a Unified diff format",
            "in": "query",
            "name": "unidiff",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Compare two branches, tags, or commits",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Compare"
            }
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/contributors": {
      "get": {
        "description": "Get repository contributors",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryContributors",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 1,
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The name of a repository branch or tag, if not given the default branch is used",
            "in": "query",
            "name": "ref",
            "required": false,
            "schema": {
              "example": "main",
              "type": "string"
            }
          },
          {
            "description": "Return contributors ordered by `name` or `email` or `commits`",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "commits",
              "enum": [
                "email",
                "name",
                "commits"
              ],
              "type": "string"
            }
          },
          {
            "description": "Sort by asc (ascending) or desc (descending)",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "asc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get repository contributors",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Contributor"
            }
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/files/{file_path}": {
      "delete": {
        "description": "Delete an existing file in repository",
        "operationId": "projects_repository/deleteApiV4ProjectsIdRepositoryFilesFilePath",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "gitlab-org/gitlab",
              "type": "string"
            }
          },
          {
            "description": "The url encoded path to the file.",
            "in": "path",
            "name": "file_path",
            "required": true,
            "schema": {
              "example": "lib%2Fclass%2Erb",
              "type": "string"
            }
          },
          {
            "description": "Name of the branch to commit into. To create a new branch, also provide `start_branch`.",
            "in": "query",
            "name": "branch",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          },
          {
            "description": "Commit message",
            "in": "query",
            "name": "commit_message",
            "required": true,
            "schema": {
              "example": "Initial commit",
              "type": "string"
            }
          },
          {
            "description": "Name of the branch to start the new commit from",
            "in": "query",
            "name": "start_branch",
            "required": false,
            "schema": {
              "example": "main",
              "type": "string"
            }
          },
          {
            "description": "The email of the author",
            "in": "query",
            "name": "author_email",
            "required": false,
            "schema": {
              "example": "johndoe@example.com",
              "type": "string"
            }
          },
          {
            "description": "The name of the author",
            "in": "query",
            "name": "author_name",
            "required": false,
            "schema": {
              "example": "John Doe",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete an existing file in repository"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "Get a file from the repository",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryFilesFilePath",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "gitlab-org/gitlab",
              "type": "string"
            }
          },
          {
            "description": "The url encoded path to the file.",
            "in": "path",
            "name": "file_path",
            "required": true,
            "schema": {
              "example": "lib%2Fclass%2Erb",
              "type": "string"
            }
          },
          {
            "description": "The name of branch, tag or commit",
            "in": "query",
            "name": "ref",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "blob_id": {
                      "description": "Blob SHA",
                      "type": "string"
                    },
                    "commit_id": {
                      "description": "Commit ID",
                      "type": "string"
                    },
                    "content": {
                      "description": "Base64 encoded content of the file",
                      "type": "string"
                    },
                    "content_sha256": {
                      "description": "SHA256 checksum of the file content",
                      "type": "string"
                    },
                    "encoding": {
                      "description": "Encoding used for the file content",
                      "enum": [
                        "base64"
                      ],
                      "type": "string"
                    },
                    "execute_filemode": {
                      "description": "Indicates if the file is executable",
                      "type": "boolean"
                    },
                    "file_name": {
                      "description": "Name of the file",
                      "type": "string"
                    },
                    "file_path": {
                      "description": "Full path of the file",
                      "type": "string"
                    },
                    "last_commit_id": {
                      "description": "Last commit ID",
                      "type": "string"
                    },
                    "ref": {
                      "description": "Name of the branch, tag, or commit",
                      "type": "string"
                    },
                    "size": {
                      "description": "Size of the file in bytes",
                      "type": "integer"
                    }
                  },
                  "required": [
                    "file_name",
                    "file_path",
                    "size",
                    "content",
                    "content_sha256",
                    "ref",
                    "blob_id",
                    "commit_id",
                    "last_commit_id",
                    "execute_filemode"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "404": {}
        },
        "tags": [
          "projects"
        ]
      },
      "head": {
        "description": "Get file metadata from repository",
        "operationId": "projects_repository/headApiV4ProjectsIdRepositoryFilesFilePath",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "gitlab-org/gitlab",
              "type": "string"
            }
          },
          {
            "description": "The url encoded path to the file.",
            "in": "path",
            "name": "file_path",
            "required": true,
            "schema": {
              "example": "lib%2Fclass%2Erb",
              "type": "string"
            }
          },
          {
            "description": "The name of branch, tag or commit",
            "in": "query",
            "name": "ref",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get file metadata from repository"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create new file in repository",
        "operationId": "projects_repository/postApiV4ProjectsIdRepositoryFilesFilePath",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "gitlab-org/gitlab",
              "type": "string"
            }
          },
          {
            "description": "The url encoded path to the file.",
            "in": "path",
            "name": "file_path",
            "required": true,
            "schema": {
              "example": "lib%2Fclass%2Erb",
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdRepositoryFilesFilePath",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdRepositoryFilesFilePath"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create new file in repository"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update existing file in repository",
        "operationId": "projects_repository/putApiV4ProjectsIdRepositoryFilesFilePath",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "gitlab-org/gitlab",
              "type": "string"
            }
          },
          {
            "description": "The url encoded path to the file.",
            "in": "path",
            "name": "file_path",
            "required": true,
            "schema": {
              "example": "lib%2Fclass%2Erb",
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdRepositoryFilesFilePath",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdRepositoryFilesFilePath"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update existing file in repository"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/files/{file_path}/blame": {
      "get": {
        "description": "Get blame file from the repository",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryFilesFilePathBlame",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "gitlab-org/gitlab",
              "type": "string"
            }
          },
          {
            "description": "The url encoded path to the file.",
            "in": "path",
            "name": "file_path",
            "required": true,
            "schema": {
              "example": "lib%2Fclass%2Erb",
              "type": "string"
            }
          },
          {
            "description": "The name of branch, tag or commit",
            "in": "query",
            "name": "ref",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          },
          {
            "description": "The first line of the range to blame",
            "in": "query",
            "name": "range[start]",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The last line of the range to blame",
            "in": "query",
            "name": "range[end]",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get blame file from the repository"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "head": {
        "description": "Get blame file metadata from repository",
        "operationId": "projects_repository/headApiV4ProjectsIdRepositoryFilesFilePathBlame",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "gitlab-org/gitlab",
              "type": "string"
            }
          },
          {
            "description": "The url encoded path to the file.",
            "in": "path",
            "name": "file_path",
            "required": true,
            "schema": {
              "example": "lib%2Fclass%2Erb",
              "type": "string"
            }
          },
          {
            "description": "The name of branch, tag or commit",
            "in": "query",
            "name": "ref",
            "required": true,
            "schema": {
              "example": "main",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get blame file metadata from repository"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/files/{file_path}/raw": {
      "get": {
        "description": "Get raw file contents from the repository",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryFilesFilePathRaw",
        "parameters": [
          {
            "description": "The project ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "gitlab-org/gitlab",
              "type": "string"
            }
          },
          {
            "description": "The url encoded path to the file.",
            "in": "path",
            "name": "file_path",
            "required": true,
            "schema": {
              "example": "lib%2Fclass%2Erb",
              "type": "string"
            }
          },
          {
            "description": "The name of branch, tag or commit",
            "in": "query",
            "name": "ref",
            "required": false,
            "schema": {
              "example": "main",
              "type": "string"
            }
          },
          {
            "description": "Retrieve binary data for a file that is an lfs pointer",
            "in": "query",
            "name": "lfs",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get raw file contents from the repository",
            "schema": {
              "type": "file"
            }
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/merge_base": {
      "get": {
        "description": "Get the common ancestor between commits",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryMergeBase",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 1,
              "type": "string"
            }
          },
          {
            "description": "The refs to find the common ancestor of, multiple refs can be passed",
            "in": "query",
            "name": "refs",
            "required": true,
            "schema": {
              "example": "main",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the common ancestor between commits",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Commit"
            }
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/merged_branches": {
      "delete": {
        "description": "Delete all merged branches",
        "operationId": "projects_repository/deleteApiV4ProjectsIdRepositoryMergedBranches",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "202": {
            "description": "202 Accepted"
          },
          "404": {
            "description": "404 Project Not Found"
          }
        },
        "tags": [
          "branches"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/submodules/{submodule}": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update existing submodule reference in repository",
        "operationId": "projects_repository/putApiV4ProjectsIdRepositorySubmodulesSubmodule",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": "gitlab-org/gitlab",
              "type": "string"
            }
          },
          {
            "description": "Url encoded full path to submodule.",
            "in": "path",
            "name": "submodule",
            "required": true,
            "schema": {
              "example": "gitlab-org/gitlab-shell",
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdRepositorySubmodulesSubmodule",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdRepositorySubmodulesSubmodule"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update existing submodule reference in repository",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_CommitDetail"
            }
          },
          "400": {
            "description": "The repository is empty"
          },
          "401": {
            "description": "401 Unauthorized"
          },
          "404": {
            "description": "404 Project Not Found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/tags": {
      "get": {
        "description": "Get a project repository tags",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryTags",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return tags sorted in updated by `asc` or `desc` order.",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return tags ordered by `name`, `updated`, `version` fields.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "updated",
              "enum": [
                "name",
                "updated",
                "version"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return list of tags matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of tag to start the paginaition from",
            "in": "query",
            "name": "page_token",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a project repository tags",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Tag"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          },
          "503": {
            "description": "Service unavailable"
          }
        },
        "tags": [
          "tags"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new repository tag",
        "operationId": "projects_repository/postApiV4ProjectsIdRepositoryTags",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdRepositoryTags",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdRepositoryTags"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a new repository tag",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Tag"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "tags"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/tags/{tag_name}": {
      "delete": {
        "description": "Delete a repository tag",
        "operationId": "projects_repository/deleteApiV4ProjectsIdRepositoryTagsTagName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the tag",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a repository tag"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          },
          "412": {
            "description": "Precondition failed"
          }
        },
        "tags": [
          "tags"
        ]
      },
      "get": {
        "description": "Get a single repository tag",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryTagsTagName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the tag",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single repository tag",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Tag"
            }
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "tags"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/tags/{tag_name}/signature": {
      "get": {
        "description": "Get a tag's signature",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryTagsTagNameSignature",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the tag",
            "in": "path",
            "name": "tag_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a tag's signature",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_TagSignature"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "tags"
        ]
      }
    },
    "/api/v4/projects/{id}/repository/tree": {
      "get": {
        "description": "Get a project repository tree",
        "operationId": "projects_repository/getApiV4ProjectsIdRepositoryTree",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 1,
              "type": "string"
            }
          },
          {
            "description": "The name of a repository branch or tag, if not given the default branch is used",
            "in": "query",
            "name": "ref",
            "required": false,
            "schema": {
              "example": "main",
              "type": "string"
            }
          },
          {
            "description": "The path of the tree",
            "in": "query",
            "name": "path",
            "required": false,
            "schema": {
              "example": "files/html",
              "type": "string"
            }
          },
          {
            "description": "Used to get a recursive tree",
            "in": "query",
            "name": "recursive",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Specify the pagination method (\"none\" is only valid if \"recursive\" is true)",
            "in": "query",
            "name": "pagination",
            "required": false,
            "schema": {
              "default": "legacy",
              "enum": [
                "legacy",
                "keyset",
                "none"
              ],
              "type": "string"
            }
          },
          {
            "description": "Record from which to start the keyset pagination",
            "in": "query",
            "name": "page_token",
            "required": false,
            "schema": {
              "example": "a1e8f8d745cc87e3a9248358d9352bb7f9a0aeba",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/API_Entities_TreeObject"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Get a project repository tree"
          },
          "404": {}
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/repository_size": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 15.0.",
        "operationId": "projects_repository_size/postApiV4ProjectsIdRepositorySize",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Start a task to recalculate repository size for a project"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Unauthenticated"
          }
        },
        "summary": "Start a task to recalculate repository size for a project",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/repository_storage_moves": {
      "get": {
        "description": "This feature was introduced in GitLab 13.1.",
        "operationId": "projects_repository_storage_moves/getApiV4ProjectsIdRepositoryStorageMoves",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of all project repository storage moves",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Projects_RepositoryStorageMove"
              },
              "type": "array"
            }
          }
        },
        "summary": "Get a list of all project repository storage moves",
        "tags": [
          "projects"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 13.1.",
        "operationId": "projects_repository_storage_moves/postApiV4ProjectsIdRepositoryStorageMoves",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdRepositoryStorageMoves",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdRepositoryStorageMoves"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Schedule a project repository storage move",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Projects_RepositoryStorageMove"
            }
          }
        },
        "summary": "Schedule a project repository storage move",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/repository_storage_moves/{repository_storage_move_id}": {
      "get": {
        "description": "This feature was introduced in GitLab 13.1.",
        "operationId": "projects_repository_storage_moves/getApiV4ProjectsIdRepositoryStorageMovesRepositoryStorageMoveId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project repository storage move",
            "in": "path",
            "name": "repository_storage_move_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a project repository storage move",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Projects_RepositoryStorageMove"
            }
          }
        },
        "summary": "Get a project repository storage move",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/resource_groups": {
      "get": {
        "description": "Get all resource groups for a project",
        "operationId": "projects_resource_groups/getApiV4ProjectsIdResourceGroups",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get all resource groups for a project",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Ci_ResourceGroup"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "ci_resource_groups"
        ]
      }
    },
    "/api/v4/projects/{id}/resource_groups/{key}": {
      "get": {
        "description": "Get a specific resource group",
        "operationId": "projects_resource_groups/getApiV4ProjectsIdResourceGroupsKey",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The key of the resource group",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a specific resource group",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_ResourceGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "ci_resource_groups"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Updates an existing resource group's properties.",
        "operationId": "projects_resource_groups/putApiV4ProjectsIdResourceGroupsKey",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The key of the resource group",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdResourceGroupsKey",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdResourceGroupsKey"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Edit an existing resource group",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_ResourceGroup"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Edit an existing resource group",
        "tags": [
          "ci_resource_groups"
        ]
      }
    },
    "/api/v4/projects/{id}/resource_groups/{key}/upcoming_jobs": {
      "get": {
        "description": "List upcoming jobs for a specific resource group",
        "operationId": "projects_resource_groups/getApiV4ProjectsIdResourceGroupsKeyUpcomingJobs",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The key of the resource group",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List upcoming jobs for a specific resource group",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Ci_JobBasic"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "ci_resource_groups"
        ]
      }
    },
    "/api/v4/projects/{id}/restore": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Restore a project",
        "operationId": "projects_restore/postApiV4ProjectsIdRestore",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Restore a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Project"
            }
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/runners": {
      "get": {
        "description": "List all runners available in the project, including from ancestor groups and any allowed shared runners.",
        "operationId": "projects_runners/getApiV4ProjectsIdRunners",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Deprecated: Use `type` or `status` instead. The scope of runners to return",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "specific",
                "shared",
                "instance_type",
                "group_type",
                "project_type",
                "active",
                "paused",
                "online",
                "offline",
                "never_contacted",
                "stale"
              ],
              "type": "string"
            }
          },
          {
            "description": "The type of runners to return",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": [
                "instance_type",
                "group_type",
                "project_type"
              ],
              "type": "string"
            }
          },
          {
            "description": "Whether to include only runners that are accepting or ignoring new jobs",
            "in": "query",
            "name": "paused",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The status of runners to return",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "active",
                "paused",
                "online",
                "offline",
                "never_contacted",
                "stale"
              ],
              "type": "string"
            }
          },
          {
            "description": "A list of runner tags",
            "in": "query",
            "name": "tag_list",
            "required": false,
            "schema": {
              "example": "['macos', 'shell']",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The version prefix of runners to return",
            "in": "query",
            "name": "version_prefix",
            "required": false,
            "schema": {
              "example": "'15.1.' or '16.'",
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get runners available for project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Runner"
            }
          },
          "400": {
            "description": "Scope contains invalid value"
          },
          "403": {
            "description": "No access granted"
          }
        },
        "summary": "List project's runners",
        "tags": [
          "runners",
          "projects"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Assign an available project runner to the project.",
        "operationId": "projects_runners/postApiV4ProjectsIdRunners",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdRunners",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdRunners"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Assign a runner to project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Runner"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "No access granted"
          },
          "404": {
            "description": "Runner not found"
          }
        },
        "summary": "Assign a runner to project",
        "tags": [
          "runners",
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/runners/reset_registration_token": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Reset runner registration token",
        "operationId": "projects_runners/postApiV4ProjectsIdRunnersResetRegistrationToken",
        "parameters": [
          {
            "description": "The ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Reset runner registration token",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_ResetTokenResult"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Project Not Found"
          }
        },
        "summary": "Reset the runner registration token for a project",
        "tags": [
          "runners",
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/runners/{runner_id}": {
      "delete": {
        "description": "It is not possible to unassign a runner from the owner project. If so, an error is returned. Use the call to delete a runner instead.",
        "operationId": "projects_runners/deleteApiV4ProjectsIdRunnersRunnerId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a runner",
            "in": "path",
            "name": "runner_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Unassign a runner from project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Runner"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "You cannot unassign a runner from the owner project. Delete the runner instead"
          },
          "404": {
            "description": "Runner not found"
          },
          "412": {
            "description": "Precondition Failed"
          }
        },
        "summary": "Unassign a project runner from the project",
        "tags": [
          "runners",
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/secure_files": {
      "get": {
        "description": "Get list of secure files in a project",
        "operationId": "projects_secure_files/getApiV4ProjectsIdSecureFiles",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the\n        authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get list of secure files in a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_SecureFile"
            }
          }
        },
        "tags": [
          "secure_files"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a secure file",
        "operationId": "projects_secure_files/postApiV4ProjectsIdSecureFiles",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the\n        authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdSecureFiles",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdSecureFiles"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a secure file",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_SecureFile"
            }
          },
          "400": {
            "description": "400 Bad Request"
          }
        },
        "tags": [
          "secure_files"
        ]
      }
    },
    "/api/v4/projects/{id}/secure_files/{secure_file_id}": {
      "delete": {
        "description": "Remove a secure file",
        "operationId": "projects_secure_files/deleteApiV4ProjectsIdSecureFilesSecureFileId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the\n        authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "secure_file_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Remove a secure file"
          },
          "404": {
            "description": "404 Not found"
          }
        },
        "tags": [
          "secure_files"
        ]
      },
      "get": {
        "description": "Get the details of a specific secure file in a project",
        "operationId": "projects_secure_files/getApiV4ProjectsIdSecureFilesSecureFileId",
        "parameters": [
          {
            "description": "The ID of a secure file",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "secure_file_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the details of a specific secure file in a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_SecureFile"
            }
          },
          "404": {
            "description": "404 Not found"
          }
        },
        "tags": [
          "secure_files"
        ]
      }
    },
    "/api/v4/projects/{id}/secure_files/{secure_file_id}/download": {
      "get": {
        "description": "Download secure file",
        "operationId": "projects_secure_files/getApiV4ProjectsIdSecureFilesSecureFileIdDownload",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project owned by the\n        authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "secure_file_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download secure file"
          },
          "404": {
            "description": "404 Not found"
          }
        },
        "tags": [
          "secure_files"
        ]
      }
    },
    "/api/v4/projects/{id}/services": {
      "get": {
        "description": "Get a list of all active integrations.",
        "operationId": "projects_services/getApiV4ProjectsIdServices",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List all active integrations",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "List all active integrations",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/apple-app-store": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Apple App Store integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesAppleAppStore",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesAppleAppStore",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesAppleAppStore"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Apple App Store integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Apple App Store integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/asana": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Asana integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesAsana",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesAsana",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesAsana"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Asana integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Asana integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/assembla": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Assembla integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesAssembla",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesAssembla",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesAssembla"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Assembla integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Assembla integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/bamboo": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Bamboo integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesBamboo",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesBamboo",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesBamboo"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Bamboo integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Bamboo integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/bugzilla": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Bugzilla integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesBugzilla",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesBugzilla",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesBugzilla"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Bugzilla integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Bugzilla integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/buildkite": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Buildkite integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesBuildkite",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesBuildkite",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesBuildkite"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Buildkite integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Buildkite integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/campfire": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Campfire integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesCampfire",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesCampfire",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesCampfire"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Campfire integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Campfire integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/clickup": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Clickup integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesClickup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesClickup",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesClickup"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Clickup integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Clickup integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/confluence": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Confluence integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesConfluence",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesConfluence",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesConfluence"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Confluence integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Confluence integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/custom-issue-tracker": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Custom Issue Tracker integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesCustomIssueTracker",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesCustomIssueTracker",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesCustomIssueTracker"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Custom Issue Tracker integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Custom Issue Tracker integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/datadog": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Datadog integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesDatadog",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesDatadog",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesDatadog"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Datadog integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Datadog integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/diffblue-cover": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Diffblue Cover integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesDiffblueCover",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesDiffblueCover",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesDiffblueCover"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Diffblue Cover integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Diffblue Cover integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/discord": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Discord integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesDiscord",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesDiscord",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesDiscord"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Discord integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Discord integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/drone-ci": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Drone Ci integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesDroneCi",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesDroneCi",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesDroneCi"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Drone Ci integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Drone Ci integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/emails-on-push": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Emails On Push integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesEmailsOnPush",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesEmailsOnPush",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesEmailsOnPush"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Emails On Push integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Emails On Push integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/ewm": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Ewm integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesEwm",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesEwm",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesEwm"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Ewm integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Ewm integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/external-wiki": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set External Wiki integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesExternalWiki",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesExternalWiki",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesExternalWiki"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit External Wiki integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit External Wiki integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/git-guardian": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Git Guardian integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesGitGuardian",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesGitGuardian",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesGitGuardian"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Git Guardian integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Git Guardian integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/github": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Github integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesGithub",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesGithub",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesGithub"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Github integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Github integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/gitlab-slack-application": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Gitlab Slack Application integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesGitlabSlackApplication",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesGitlabSlackApplication",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesGitlabSlackApplication"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Gitlab Slack Application integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Gitlab Slack Application integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/google-cloud-platform-artifact-registry": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Google Cloud Platform Artifact Registry integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesGoogleCloudPlatformArtifactRegistry",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesGoogleCloudPlatformArtifactRegistry",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesGoogleCloudPlatformArtifactRegistry"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Google Cloud Platform Artifact Registry integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Google Cloud Platform Artifact Registry integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/google-cloud-platform-workload-identity-federation": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Google Cloud Platform Workload Identity Federation integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesGoogleCloudPlatformWorkloadIdentityFederation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesGoogleCloudPlatformWorkloadIdentityFederation",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesGoogleCloudPlatformWorkloadIdentityFederation"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Google Cloud Platform Workload Identity Federation integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Google Cloud Platform Workload Identity Federation integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/google-play": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Google Play integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesGooglePlay",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesGooglePlay",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesGooglePlay"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Google Play integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Google Play integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/hangouts-chat": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Hangouts Chat integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesHangoutsChat",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesHangoutsChat",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesHangoutsChat"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Hangouts Chat integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Hangouts Chat integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/harbor": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Harbor integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesHarbor",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesHarbor",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesHarbor"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Harbor integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Harbor integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/irker": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Irker integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesIrker",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesIrker",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesIrker"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Irker integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Irker integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/jenkins": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Jenkins integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesJenkins",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesJenkins",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesJenkins"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Jenkins integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Jenkins integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/jira": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Jira integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesJira",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesJira",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesJira"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Jira integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Jira integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/jira-cloud-app": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Jira Cloud App integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesJiraCloudApp",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesJiraCloudApp",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesJiraCloudApp"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Jira Cloud App integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Jira Cloud App integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/matrix": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Matrix integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesMatrix",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesMatrix",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesMatrix"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Matrix integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Matrix integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/mattermost": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Mattermost integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesMattermost",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesMattermost",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesMattermost"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Mattermost integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Mattermost integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/mattermost-slash-commands": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Mattermost Slash Commands integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesMattermostSlashCommands",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesMattermostSlashCommands",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesMattermostSlashCommands"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Mattermost Slash Commands integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Mattermost Slash Commands integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/mattermost_slash_commands/trigger": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Added in GitLab 8.13",
        "operationId": "projects_services/postApiV4ProjectsIdServicesMattermostSlashCommandsTrigger",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdServicesMattermostSlashCommandsTrigger",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdServicesMattermostSlashCommandsTrigger"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Trigger a slash command for mattermost-slash-commands"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Trigger a slash command for mattermost-slash-commands",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/microsoft-teams": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Microsoft Teams integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesMicrosoftTeams",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesMicrosoftTeams",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesMicrosoftTeams"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Microsoft Teams integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Microsoft Teams integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/mock-ci": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Mock Ci integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesMockCi",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesMockCi",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesMockCi"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Mock Ci integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Mock Ci integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/mock-monitoring": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Mock Monitoring integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesMockMonitoring",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesMockMonitoring",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesMockMonitoring"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Mock Monitoring integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Mock Monitoring integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/packagist": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Packagist integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesPackagist",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesPackagist",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesPackagist"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Packagist integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Packagist integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/phorge": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Phorge integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesPhorge",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesPhorge",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesPhorge"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Phorge integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Phorge integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/pipelines-email": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Pipelines Email integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesPipelinesEmail",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesPipelinesEmail",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesPipelinesEmail"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Pipelines Email integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Pipelines Email integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/pivotaltracker": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Pivotaltracker integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesPivotaltracker",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesPivotaltracker",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesPivotaltracker"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Pivotaltracker integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Pivotaltracker integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/pumble": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Pumble integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesPumble",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesPumble",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesPumble"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Pumble integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Pumble integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/pushover": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Pushover integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesPushover",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesPushover",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesPushover"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Pushover integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Pushover integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/redmine": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Redmine integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesRedmine",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesRedmine",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesRedmine"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Redmine integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Redmine integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/slack": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Slack integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesSlack",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesSlack",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesSlack"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Slack integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Slack integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/slack-slash-commands": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Slack Slash Commands integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesSlackSlashCommands",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesSlackSlashCommands",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesSlackSlashCommands"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Slack Slash Commands integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Slack Slash Commands integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/slack_slash_commands/trigger": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Added in GitLab 8.13",
        "operationId": "projects_services/postApiV4ProjectsIdServicesSlackSlashCommandsTrigger",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdServicesSlackSlashCommandsTrigger",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdServicesSlackSlashCommandsTrigger"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Trigger a slash command for slack-slash-commands"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Trigger a slash command for slack-slash-commands",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/squash-tm": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Squash Tm integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesSquashTm",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesSquashTm",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesSquashTm"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Squash Tm integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Squash Tm integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/teamcity": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Teamcity integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesTeamcity",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesTeamcity",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesTeamcity"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Teamcity integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Teamcity integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/telegram": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Telegram integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesTelegram",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesTelegram",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesTelegram"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Telegram integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Telegram integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/unify-circuit": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Unify Circuit integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesUnifyCircuit",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesUnifyCircuit",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesUnifyCircuit"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Unify Circuit integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Unify Circuit integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/webex-teams": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Webex Teams integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesWebexTeams",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesWebexTeams",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesWebexTeams"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Webex Teams integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Webex Teams integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/youtrack": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Youtrack integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesYoutrack",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesYoutrack",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesYoutrack"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Youtrack integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Youtrack integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/zentao": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set Zentao integration.",
        "operationId": "projects_services/putApiV4ProjectsIdServicesZentao",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdServicesZentao",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdServicesZentao"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Create/Edit Zentao integration",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_IntegrationBasic"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Create/Edit Zentao integration",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/services/{slug}": {
      "delete": {
        "description": "Disable the integration. Integration settings are preserved.",
        "operationId": "projects_services/deleteApiV4ProjectsIdServicesSlug",
        "parameters": [
          {
            "description": "The name of the integration",
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "enum": [
                "apple-app-store",
                "asana",
                "assembla",
                "bamboo",
                "bugzilla",
                "buildkite",
                "campfire",
                "confluence",
                "custom-issue-tracker",
                "datadog",
                "diffblue-cover",
                "discord",
                "drone-ci",
                "emails-on-push",
                "external-wiki",
                "gitlab-slack-application",
                "google-play",
                "hangouts-chat",
                "harbor",
                "irker",
                "jenkins",
                "jira",
                "jira-cloud-app",
                "matrix",
                "mattermost-slash-commands",
                "slack-slash-commands",
                "packagist",
                "phorge",
                "pipelines-email",
                "pivotaltracker",
                "pumble",
                "pushover",
                "redmine",
                "ewm",
                "youtrack",
                "clickup",
                "slack",
                "microsoft-teams",
                "mattermost",
                "teamcity",
                "telegram",
                "unify-circuit",
                "webex-teams",
                "zentao",
                "squash-tm",
                "github",
                "git-guardian",
                "google-cloud-platform-artifact-registry",
                "google-cloud-platform-workload-identity-federation",
                "mock-ci",
                "mock-monitoring"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Disable an integration"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Disable an integration",
        "tags": [
          "integrations"
        ]
      },
      "get": {
        "description": "Get the integration settings.",
        "operationId": "projects_services/getApiV4ProjectsIdServicesSlug",
        "parameters": [
          {
            "description": "The name of the integration",
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "enum": [
                "apple-app-store",
                "asana",
                "assembla",
                "bamboo",
                "bugzilla",
                "buildkite",
                "campfire",
                "confluence",
                "custom-issue-tracker",
                "datadog",
                "diffblue-cover",
                "discord",
                "drone-ci",
                "emails-on-push",
                "external-wiki",
                "gitlab-slack-application",
                "google-play",
                "hangouts-chat",
                "harbor",
                "irker",
                "jenkins",
                "jira",
                "jira-cloud-app",
                "matrix",
                "mattermost-slash-commands",
                "slack-slash-commands",
                "packagist",
                "phorge",
                "pipelines-email",
                "pivotaltracker",
                "pumble",
                "pushover",
                "redmine",
                "ewm",
                "youtrack",
                "clickup",
                "slack",
                "microsoft-teams",
                "mattermost",
                "teamcity",
                "telegram",
                "unify-circuit",
                "webex-teams",
                "zentao",
                "squash-tm",
                "github",
                "git-guardian",
                "google-cloud-platform-artifact-registry",
                "google-cloud-platform-workload-identity-federation",
                "mock-ci",
                "mock-monitoring"
              ],
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get an integration settings",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Integration"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get an integration settings",
        "tags": [
          "integrations"
        ]
      }
    },
    "/api/v4/projects/{id}/share": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Share the project with a group",
        "operationId": "projects_share/postApiV4ProjectsIdShare",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdShare",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdShare"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Share the project with a group",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProjectGroupLink"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/share/{group_id}": {
      "delete": {
        "description": "Remove a group share",
        "operationId": "projects_share/deleteApiV4ProjectsIdShareGroupId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the group",
            "in": "path",
            "name": "group_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Remove a group share"
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/share_locations": {
      "get": {
        "description": "Returns group that can be shared with the given project",
        "operationId": "projects_share_locations/getApiV4ProjectsIdShareLocations",
        "parameters": [
          {
            "description": "The id of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return list of groups matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returns group that can be shared with the given project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Group"
            }
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/snapshot": {
      "get": {
        "description": "This feature was introduced in GitLab 10.7",
        "operationId": "projects_snapshot/getApiV4ProjectsIdSnapshot",
        "parameters": [
          {
            "description": "Set to true to receive the wiki repository",
            "in": "query",
            "name": "wiki",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/x-tar"
        ],
        "responses": {
          "200": {
            "description": "Download a (possibly inconsistent) snapshot of a repository",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "Download a (possibly inconsistent) snapshot of a repository",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/snippets": {
      "get": {
        "description": "Get all project snippets",
        "operationId": "projects_snippets/getApiV4ProjectsIdSnippets",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get all project snippets",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_ProjectSnippet"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "project_snippets"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new project snippet",
        "operationId": "projects_snippets/postApiV4ProjectsIdSnippets",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdSnippets",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdSnippets"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a new project snippet",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProjectSnippet"
            }
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "tags": [
          "project_snippets"
        ]
      }
    },
    "/api/v4/projects/{id}/snippets/{snippet_id}": {
      "delete": {
        "description": "Delete a project snippet",
        "operationId": "projects_snippets/deleteApiV4ProjectsIdSnippetsSnippetId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project snippet",
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a project snippet"
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "project_snippets"
        ]
      },
      "get": {
        "description": "Get a single project snippet",
        "operationId": "projects_snippets/getApiV4ProjectsIdSnippetsSnippetId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project snippet",
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single project snippet",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProjectSnippet"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "project_snippets"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update an existing project snippet",
        "operationId": "projects_snippets/putApiV4ProjectsIdSnippetsSnippetId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project snippet",
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdSnippetsSnippetId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdSnippetsSnippetId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update an existing project snippet",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProjectSnippet"
            }
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "tags": [
          "project_snippets"
        ]
      }
    },
    "/api/v4/projects/{id}/snippets/{snippet_id}/award_emoji": {
      "get": {
        "description": "Get a list of all emoji reactions for a specified awardable. This feature was introduced in 8.9",
        "operationId": "projects_snippets/getApiV4ProjectsIdSnippetsSnippetIdAwardEmoji",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "ID (`iid` for merge requests/issues/epics, `id` for snippets) of an awardable.",
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List an awardable's emoji reactions for projects",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_AwardEmoji"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "List an awardable's emoji reactions for projects",
        "tags": [
          "award_emoji"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Add an emoji reaction on the specified awardable. This feature was introduced in 8.9",
        "operationId": "projects_snippets/postApiV4ProjectsIdSnippetsSnippetIdAwardEmoji",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdSnippetsSnippetIdAwardEmoji",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdSnippetsSnippetIdAwardEmoji"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add a new emoji reaction",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AwardEmoji"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Add a new emoji reaction",
        "tags": [
          "award_emoji"
        ]
      }
    },
    "/api/v4/projects/{id}/snippets/{snippet_id}/award_emoji/{award_id}": {
      "delete": {
        "description": "Only an administrator or the author of the reaction can delete an emoji reaction. This feature was introduced in 8.9",
        "operationId": "projects_snippets/deleteApiV4ProjectsIdSnippetsSnippetIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "ID of an emoji reaction.",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete an emoji reaction"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Delete an emoji reaction",
        "tags": [
          "award_emoji"
        ]
      },
      "get": {
        "description": "Get a single emoji reaction from an issue, snippet, or merge request. This feature was introduced in 8.9",
        "operationId": "projects_snippets/getApiV4ProjectsIdSnippetsSnippetIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "ID of the emoji reaction.",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single emoji reaction",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AwardEmoji"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get a single emoji reaction",
        "tags": [
          "award_emoji"
        ]
      }
    },
    "/api/v4/projects/{id}/snippets/{snippet_id}/files/{ref}/{file_path}/raw": {
      "get": {
        "description": "Get raw project snippet file contents from the repository",
        "operationId": "projects_snippets/getApiV4ProjectsIdSnippetsSnippetIdFilesRefFilePathRaw",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The url encoded path to the file, e.g. lib%2Fclass%2Erb",
            "in": "path",
            "name": "file_path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of branch, tag or commit",
            "in": "path",
            "name": "ref",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get raw project snippet file contents from the repository",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProjectSnippet"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "project_snippets"
        ]
      }
    },
    "/api/v4/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji": {
      "get": {
        "description": "Get a list of all emoji reactions for a specified awardable. This feature was introduced in 8.9",
        "operationId": "projects_snippets/getApiV4ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List an awardable's emoji reactions for projects",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_AwardEmoji"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "List an awardable's emoji reactions for projects",
        "tags": [
          "award_emoji"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Add an emoji reaction on the specified awardable. This feature was introduced in 8.9",
        "operationId": "projects_snippets/postApiV4ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add a new emoji reaction",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AwardEmoji"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Add a new emoji reaction",
        "tags": [
          "award_emoji"
        ]
      }
    },
    "/api/v4/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji/{award_id}": {
      "delete": {
        "description": "Only an administrator or the author of the reaction can delete an emoji reaction. This feature was introduced in 8.9",
        "operationId": "projects_snippets/deleteApiV4ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "ID of an emoji reaction.",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete an emoji reaction"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Delete an emoji reaction",
        "tags": [
          "award_emoji"
        ]
      },
      "get": {
        "description": "Get a single emoji reaction from an issue, snippet, or merge request. This feature was introduced in 8.9",
        "operationId": "projects_snippets/getApiV4ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId",
        "parameters": [
          {
            "description": "ID of the emoji reaction.",
            "in": "path",
            "name": "award_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single emoji reaction",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_AwardEmoji"
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Get a single emoji reaction",
        "tags": [
          "award_emoji"
        ]
      }
    },
    "/api/v4/projects/{id}/snippets/{snippet_id}/raw": {
      "get": {
        "description": "Get a raw project snippet",
        "operationId": "projects_snippets/getApiV4ProjectsIdSnippetsSnippetIdRaw",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project snippet",
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a raw project snippet",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProjectSnippet"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "project_snippets"
        ]
      }
    },
    "/api/v4/projects/{id}/snippets/{snippet_id}/user_agent_detail": {
      "get": {
        "description": "Get the user agent details for a project snippet",
        "operationId": "projects_snippets/getApiV4ProjectsIdSnippetsSnippetIdUserAgentDetail",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of a project snippet",
            "in": "path",
            "name": "snippet_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the user agent details for a project snippet",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserAgentDetail"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "project_snippets"
        ]
      }
    },
    "/api/v4/projects/{id}/star": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Star a project",
        "operationId": "projects_star/postApiV4ProjectsIdStar",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Star a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Project"
            }
          },
          "304": {
            "description": "Not modified"
          },
          "403": {
            "description": "Unauthenticated"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/starrers": {
      "get": {
        "description": "Get the users who starred a project",
        "operationId": "projects_starrers/getApiV4ProjectsIdStarrers",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return list of users matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "example": "user",
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the users who starred a project",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_UserBasic"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/statistics": {
      "get": {
        "description": "Get the list of project fetch statistics for the last 30 days",
        "operationId": "projects_statistics/getApiV4ProjectsIdStatistics",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the list of project fetch statistics for the last 30 days",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProjectDailyStatistics"
            }
          },
          "401": {
            "description": "401 Unauthorized"
          },
          "404": {
            "description": "404 Project Not Found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/statuses/{sha}": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Post status to a commit",
        "operationId": "projects_statuses/postApiV4ProjectsIdStatusesSha",
        "parameters": [
          {
            "description": "ID or URL-encoded path of the project.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The commit hash",
            "in": "path",
            "name": "sha",
            "required": true,
            "schema": {
              "example": "18f3e63d05582537db6d183d9d557be09e1f90c8",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/postApiV4ProjectsIdStatusesSha"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API_Entities_CommitStatus"
                }
              }
            },
            "description": "Post status to a commit"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Bad request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "type": null
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "type": null
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": null
                }
              }
            },
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/storage": {
      "get": {
        "description": "Show the storage information",
        "operationId": "projects_storage/getApiV4ProjectsIdStorage",
        "parameters": [
          {
            "description": "ID of a project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Show the storage information",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProjectRepositoryStorage"
            }
          },
          "403": {
            "description": "Unauthenticated"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/templates/{type}": {
      "get": {
        "description": "This endpoint was introduced in GitLab 11.4",
        "operationId": "projects_templates/getApiV4ProjectsIdTemplatesType",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The type (dockerfiles|gitignores|gitlab_ci_ymls|licenses|issues|merge_requests) of the template",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "dockerfiles",
                "gitignores",
                "gitlab_ci_ymls",
                "licenses",
                "issues",
                "merge_requests"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of templates available to this project",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_TemplatesList"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get a list of templates available to this project",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/templates/{type}/{name}": {
      "get": {
        "description": "This endpoint was introduced in GitLab 11.4",
        "operationId": "projects_templates/getApiV4ProjectsIdTemplatesTypeName",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The type (dockerfiles|gitignores|gitlab_ci_ymls|licenses|issues|merge_requests) of the template",
            "in": "path",
            "name": "type",
            "required": true,
            "schema": {
              "enum": [
                "dockerfiles",
                "gitignores",
                "gitlab_ci_ymls",
                "licenses",
                "issues",
                "merge_requests"
              ],
              "type": "string"
            }
          },
          {
            "description": "The key of the template, as obtained from the collection endpoint.",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "example": "MIT",
              "type": "string"
            }
          },
          {
            "description": "The project id where a given template is being stored. This is useful when multiple templates from different projects have the same name",
            "in": "query",
            "name": "source_template_project_id",
            "required": false,
            "schema": {
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The project name to use when expanding placeholders in the template. Only affects licenses",
            "in": "query",
            "name": "project",
            "required": false,
            "schema": {
              "example": "GitLab",
              "type": "string"
            }
          },
          {
            "description": "The full name of the copyright holder to use when expanding placeholders in the template. Only affects licenses",
            "in": "query",
            "name": "fullname",
            "required": false,
            "schema": {
              "example": "GitLab B.V.",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download a template available to this project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_License"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Download a template available to this project",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/terraform/state/{name}/versions/{serial}": {
      "delete": {
        "description": "Delete a Terraform state version",
        "operationId": "projects_terraform/deleteApiV4ProjectsIdTerraformStateNameVersionsSerial",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "serial",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a Terraform state version"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Delete a Terraform state version",
        "tags": [
          "terraform_state"
        ]
      },
      "get": {
        "description": "Get a Terraform state version",
        "operationId": "projects_terraform/getApiV4ProjectsIdTerraformStateNameVersionsSerial",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of a Terraform state",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The version number of the state",
            "in": "path",
            "name": "serial",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a Terraform state version",
            "schema": {
              "type": "file"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get a Terraform state version",
        "tags": [
          "terraform_state"
        ]
      }
    },
    "/api/v4/projects/{id}/transfer": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Transfer a project to a new namespace",
        "operationId": "projects_transfer/putApiV4ProjectsIdTransfer",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdTransfer",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdTransfer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Transfer a project to a new namespace",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Project"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/transfer_locations": {
      "get": {
        "description": "Get the namespaces to where the project can be transferred",
        "operationId": "projects_transfer_locations/getApiV4ProjectsIdTransferLocations",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return list of namespaces matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "example": "search",
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the namespaces to where the project can be transferred",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_PublicGroupDetails"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Unauthenticated"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/triggers": {
      "get": {
        "description": "Get trigger tokens list",
        "operationId": "projects_triggers/getApiV4ProjectsIdTriggers",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 18,
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/API_Entities_Trigger"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Get trigger tokens list"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a trigger token",
        "operationId": "projects_triggers/postApiV4ProjectsIdTriggers",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 18,
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdTriggers",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdTriggers"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a trigger token",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Trigger"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/triggers/{trigger_id}": {
      "delete": {
        "description": "Delete a trigger token",
        "operationId": "projects_triggers/deleteApiV4ProjectsIdTriggersTriggerId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 18,
              "type": "string"
            }
          },
          {
            "description": "The trigger token ID",
            "in": "path",
            "name": "trigger_id",
            "required": true,
            "schema": {
              "example": 10,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a trigger token"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          },
          "412": {
            "description": "Precondition Failed"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "Get specific trigger token of a project",
        "operationId": "projects_triggers/getApiV4ProjectsIdTriggersTriggerId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 18,
              "type": "string"
            }
          },
          {
            "description": "The trigger token ID",
            "in": "path",
            "name": "trigger_id",
            "required": true,
            "schema": {
              "example": 10,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get specific trigger token of a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Trigger"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a trigger token",
        "operationId": "projects_triggers/putApiV4ProjectsIdTriggersTriggerId",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "example": 18,
              "type": "string"
            }
          },
          {
            "description": "The trigger token ID",
            "in": "path",
            "name": "trigger_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdTriggersTriggerId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdTriggersTriggerId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update a trigger token",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Trigger"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/unarchive": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Unarchive a project",
        "operationId": "projects_unarchive/postApiV4ProjectsIdUnarchive",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Unarchive a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Project"
            }
          },
          "403": {
            "description": "Unauthenticated"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/unstar": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Unstar a project",
        "operationId": "projects_unstar/postApiV4ProjectsIdUnstar",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Unstar a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Project"
            }
          },
          "304": {
            "description": "Not modified"
          },
          "403": {
            "description": "Unauthenticated"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/uploads": {
      "get": {
        "description": "Get the list of uploads of a project",
        "operationId": "projects_uploads/getApiV4ProjectsIdUploads",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the list of uploads of a project",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_MarkdownUploadAdmin"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Upload a file",
        "operationId": "projects_uploads/postApiV4ProjectsIdUploads",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdUploads",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdUploads"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Upload a file",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ProjectUpload"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/uploads/authorize": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 13.11",
        "operationId": "projects_uploads/postApiV4ProjectsIdUploadsAuthorize",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Workhorse authorize the file upload"
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Workhorse authorize the file upload",
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/uploads/{secret}/{filename}": {
      "delete": {
        "description": "Delete a single project upload by secret and filename",
        "operationId": "projects_uploads/deleteApiV4ProjectsIdUploadsSecretFilename",
        "parameters": [
          {
            "description": "The 32-character secret of a project upload",
            "in": "path",
            "name": "secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The filename of a project upload",
            "in": "path",
            "name": "filename",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a single project upload by secret and filename"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "Download a single project upload by secret and filename",
        "operationId": "projects_uploads/getApiV4ProjectsIdUploadsSecretFilename",
        "parameters": [
          {
            "description": "The 32-character secret of a project upload",
            "in": "path",
            "name": "secret",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The filename of a project upload",
            "in": "path",
            "name": "filename",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download a single project upload by secret and filename",
            "schema": {
              "type": "file"
            }
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/uploads/{upload_id}": {
      "delete": {
        "description": "Delete a single project upload by ID",
        "operationId": "projects_uploads/deleteApiV4ProjectsIdUploadsUploadId",
        "parameters": [
          {
            "description": "The ID of a project upload",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a single project upload by ID"
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      },
      "get": {
        "description": "Download a single project upload by ID",
        "operationId": "projects_uploads/getApiV4ProjectsIdUploadsUploadId",
        "parameters": [
          {
            "description": "The ID of a project upload",
            "in": "path",
            "name": "upload_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Download a single project upload by ID",
            "schema": {
              "type": "file"
            }
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/users": {
      "get": {
        "description": "Get the users list of a project",
        "operationId": "projects_users/getApiV4ProjectsIdUsers",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return list of users matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "example": "user",
              "type": "string"
            }
          },
          {
            "description": "Filter out users with the specified IDs",
            "in": "query",
            "name": "skip_users",
            "required": false,
            "schema": {
              "items": {
                "format": "int32",
                "type": "integer"
              },
              "type": "array"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the users list of a project",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_UserBasic"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Unauthenticated"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/projects/{id}/variables": {
      "get": {
        "description": "Get project variables",
        "operationId": "projects_variables/getApiV4ProjectsIdVariables",
        "parameters": [
          {
            "description": "The ID of a project or URL-encoded NAMESPACE/PROJECT_NAME of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get project variables",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Variable"
            }
          }
        },
        "tags": [
          "ci_variables"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new variable in a project",
        "operationId": "projects_variables/postApiV4ProjectsIdVariables",
        "parameters": [
          {
            "description": "The ID of a project or URL-encoded NAMESPACE/PROJECT_NAME of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdVariables",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdVariables"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a new variable in a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Variable"
            }
          },
          "400": {
            "description": "400 Bad Request"
          }
        },
        "tags": [
          "ci_variables"
        ]
      }
    },
    "/api/v4/projects/{id}/variables/{key}": {
      "delete": {
        "description": "Delete an existing variable from a project",
        "operationId": "projects_variables/deleteApiV4ProjectsIdVariablesKey",
        "parameters": [
          {
            "description": "The ID of a project or URL-encoded NAMESPACE/PROJECT_NAME of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The key of a variable",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The environment scope of the variable",
            "in": "query",
            "name": "filter[environment_scope]",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete an existing variable from a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Variable"
            }
          },
          "404": {
            "description": "Variable Not Found"
          }
        },
        "tags": [
          "ci_variables"
        ]
      },
      "get": {
        "description": "Get the details of a single variable from a project",
        "operationId": "projects_variables/getApiV4ProjectsIdVariablesKey",
        "parameters": [
          {
            "description": "The ID of a project or URL-encoded NAMESPACE/PROJECT_NAME of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The key of a variable",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The environment scope of a variable",
            "in": "query",
            "name": "filter[environment_scope]",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the details of a single variable from a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Variable"
            }
          },
          "404": {
            "description": "Variable Not Found"
          }
        },
        "tags": [
          "ci_variables"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update an existing variable from a project",
        "operationId": "projects_variables/putApiV4ProjectsIdVariablesKey",
        "parameters": [
          {
            "description": "The ID of a project or URL-encoded NAMESPACE/PROJECT_NAME of the project owned by the authenticated user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The key of a variable",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdVariablesKey",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdVariablesKey"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update an existing variable from a project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Variable"
            }
          },
          "404": {
            "description": "Variable Not Found"
          }
        },
        "tags": [
          "ci_variables"
        ]
      }
    },
    "/api/v4/projects/{id}/wikis": {
      "get": {
        "description": "Get a list of wiki pages",
        "operationId": "projects_wikis/getApiV4ProjectsIdWikis",
        "parameters": [
          {
            "description": "Include pages' content",
            "in": "query",
            "name": "with_content",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of wiki pages",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_WikiPageBasic"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "wikis"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a wiki page",
        "operationId": "projects_wikis/postApiV4ProjectsIdWikis",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdWikis",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdWikis"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a wiki page",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_WikiPage"
            }
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "tags": [
          "wikis"
        ]
      }
    },
    "/api/v4/projects/{id}/wikis/attachments": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 11.3.",
        "operationId": "projects_wikis/postApiV4ProjectsIdWikisAttachments",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4ProjectsIdWikisAttachments",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4ProjectsIdWikisAttachments"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Upload an attachment to the wiki repository",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_WikiAttachment"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Upload an attachment to the wiki repository",
        "tags": [
          "wikis"
        ]
      }
    },
    "/api/v4/projects/{id}/wikis/{slug}": {
      "delete": {
        "description": "Delete a wiki page",
        "operationId": "projects_wikis/deleteApiV4ProjectsIdWikisSlug",
        "parameters": [
          {
            "description": "The slug of a wiki page",
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a wiki page"
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "wikis"
        ]
      },
      "get": {
        "description": "Get a wiki page",
        "operationId": "projects_wikis/getApiV4ProjectsIdWikisSlug",
        "parameters": [
          {
            "description": "The slug of a wiki page",
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The version hash of a wiki page",
            "in": "query",
            "name": "version",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Render content to HTML",
            "in": "query",
            "name": "render_html",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a wiki page",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_WikiPage"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "tags": [
          "wikis"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a wiki page",
        "operationId": "projects_wikis/putApiV4ProjectsIdWikisSlug",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4ProjectsIdWikisSlug",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4ProjectsIdWikisSlug"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update a wiki page",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_WikiPage"
            }
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "tags": [
          "wikis"
        ]
      }
    },
    "/api/v4/projects/{project_id}/packages/nuget/v2/FindPackagesById\\(\\)": {
      "get": {
        "description": "This feature was introduced in GitLab 16.4",
        "operationId": "projects_packages/getApiV4ProjectsProjectIdPackagesNugetV2Findpackagesbyid\\(\\)",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The NuGet package name",
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "example": "mynugetpkg",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet V2 Feed Find Packages by ID endpoint"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet V2 Feed Find Packages by ID endpoint",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/projects/{project_id}/packages/nuget/v2/Packages\\(\\)": {
      "get": {
        "description": "This feature was introduced in GitLab 16.4",
        "operationId": "projects_packages/getApiV4ProjectsProjectIdPackagesNugetV2Packages\\(\\)",
        "parameters": [
          {
            "description": "The ID or URL-encoded path of the project",
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The NuGet package name",
            "in": "query",
            "name": "$filter",
            "required": true,
            "schema": {
              "example": "mynugetpkg",
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "The NuGet V2 Feed Enumerate Packages endpoint"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "The NuGet V2 Feed Enumerate Packages endpoint",
        "tags": [
          "nuget_packages"
        ]
      }
    },
    "/api/v4/runners": {
      "delete": {
        "description": "Delete a registered runner",
        "operationId": "runners/deleteApiV4Runners",
        "parameters": [
          {
            "description": "The runner's authentication token",
            "in": "query",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a registered runner"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "summary": "Delete a runner by authentication token",
        "tags": [
          "runners"
        ]
      },
      "get": {
        "description": "Get runners available for user",
        "operationId": "runners/getApiV4Runners",
        "parameters": [
          {
            "description": "Deprecated: Use `type` or `status` instead. The scope of runners to return",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "specific",
                "shared",
                "instance_type",
                "group_type",
                "project_type",
                "active",
                "paused",
                "online",
                "offline",
                "never_contacted",
                "stale"
              ],
              "type": "string"
            }
          },
          {
            "description": "The type of runners to return",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": [
                "instance_type",
                "group_type",
                "project_type"
              ],
              "type": "string"
            }
          },
          {
            "description": "Whether to include only runners that are accepting or ignoring new jobs",
            "in": "query",
            "name": "paused",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The status of runners to return",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "active",
                "paused",
                "online",
                "offline",
                "never_contacted",
                "stale"
              ],
              "type": "string"
            }
          },
          {
            "description": "A list of runner tags",
            "in": "query",
            "name": "tag_list",
            "required": false,
            "schema": {
              "example": "['macos', 'shell']",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The version prefix of runners to return",
            "in": "query",
            "name": "version_prefix",
            "required": false,
            "schema": {
              "example": "'15.1.' or '16.'",
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get runners available for user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Runner"
            }
          },
          "400": {
            "description": "Scope contains invalid value"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "List owned runners",
        "tags": [
          "runners"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Register a new runner for the instance",
        "operationId": "runners/postApiV4Runners",
        "parameters": [
          {
            "in": "body",
            "name": "postApiV4Runners",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4Runners"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Register a new runner",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_RunnerRegistrationDetails"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "410": {
            "description": "Gone"
          }
        },
        "summary": "Register a new runner",
        "tags": [
          "runners"
        ]
      }
    },
    "/api/v4/runners/all": {
      "get": {
        "description": "Get a list of all runners in the GitLab instance (shared and project). Access is restricted to users with administrator access.",
        "operationId": "runners/getApiV4RunnersAll",
        "parameters": [
          {
            "description": "Deprecated: Use `type` or `status` instead. The scope of runners to return",
            "in": "query",
            "name": "scope",
            "required": false,
            "schema": {
              "enum": [
                "specific",
                "shared",
                "instance_type",
                "group_type",
                "project_type",
                "active",
                "paused",
                "online",
                "offline",
                "never_contacted",
                "stale"
              ],
              "type": "string"
            }
          },
          {
            "description": "The type of runners to return",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": [
                "instance_type",
                "group_type",
                "project_type"
              ],
              "type": "string"
            }
          },
          {
            "description": "Whether to include only runners that are accepting or ignoring new jobs",
            "in": "query",
            "name": "paused",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "The status of runners to return",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "active",
                "paused",
                "online",
                "offline",
                "never_contacted",
                "stale"
              ],
              "type": "string"
            }
          },
          {
            "description": "A list of runner tags",
            "in": "query",
            "name": "tag_list",
            "required": false,
            "schema": {
              "example": "['macos', 'shell']",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "The version prefix of runners to return",
            "in": "query",
            "name": "version_prefix",
            "required": false,
            "schema": {
              "example": "'15.1.' or '16.'",
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get all runners - shared and project",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Runner"
            }
          },
          "400": {
            "description": "Scope contains invalid value"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "List all runners",
        "tags": [
          "runners"
        ]
      }
    },
    "/api/v4/runners/managers": {
      "delete": {
        "description": "Delete a registered runner manager",
        "operationId": "runners/deleteApiV4RunnersManagers",
        "parameters": [
          {
            "description": "The runner's authentication token",
            "in": "query",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The runner's system identifier.",
            "in": "query",
            "name": "system_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Runner manager was deleted"
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "summary": "Internal endpoint that deletes a runner manager by authentication token and system ID.",
        "tags": [
          "runners"
        ]
      }
    },
    "/api/v4/runners/reset_authentication_token": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Reset runner authentication token with current token",
        "operationId": "runners/postApiV4RunnersResetAuthenticationToken",
        "parameters": [
          {
            "in": "body",
            "name": "postApiV4RunnersResetAuthenticationToken",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4RunnersResetAuthenticationToken"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Reset runner authentication token with current token",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_ResetTokenResult"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "runners"
        ]
      }
    },
    "/api/v4/runners/reset_registration_token": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Reset runner registration token",
        "operationId": "runners/postApiV4RunnersResetRegistrationToken",
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Reset runner registration token",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_ResetTokenResult"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "summary": "Reset instance's runner registration token",
        "tags": [
          "runners",
          "groups"
        ]
      }
    },
    "/api/v4/runners/verify": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Validate authentication credentials",
        "operationId": "runners/postApiV4RunnersVerify",
        "parameters": [
          {
            "in": "body",
            "name": "postApiV4RunnersVerify",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4RunnersVerify"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Credentials are valid"
          },
          "403": {
            "description": "Forbidden"
          },
          "422": {
            "description": "Runner is orphaned"
          }
        },
        "summary": "Verify authentication for a registered runner",
        "tags": [
          "runners"
        ]
      }
    },
    "/api/v4/runners/{id}": {
      "delete": {
        "description": "Remove a runner",
        "operationId": "runners/deleteApiV4RunnersId",
        "parameters": [
          {
            "description": "The ID of a runner",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Remove a runner",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_Runner"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "No access granted"
          },
          "404": {
            "description": "Runner not found"
          },
          "412": {
            "description": "Precondition Failed"
          }
        },
        "summary": "Delete a runner",
        "tags": [
          "runners"
        ]
      },
      "get": {
        "description": "At least the Maintainer role is required to get runner details at the project and group level. Instance-level runner details via this endpoint are available to all signed in users.",
        "operationId": "runners/getApiV4RunnersId",
        "parameters": [
          {
            "description": "The ID of a runner",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get runner's details",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_RunnerDetails"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "No access granted"
          },
          "404": {
            "description": "Runner not found"
          }
        },
        "summary": "Get runner's details",
        "tags": [
          "runners"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update runner's details",
        "operationId": "runners/putApiV4RunnersId",
        "parameters": [
          {
            "description": "The ID of a runner",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4RunnersId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4RunnersId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update runner's details",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_RunnerDetails"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "No access granted"
          },
          "404": {
            "description": "Runner not found"
          }
        },
        "summary": "Update details of a runner",
        "tags": [
          "runners"
        ]
      }
    },
    "/api/v4/runners/{id}/jobs": {
      "get": {
        "description": "List jobs that are being processed or were processed by the specified runner. The list of jobs is limited to projects where the user has at least the Reporter role.",
        "operationId": "runners_jobs/getApiV4RunnersIdJobs",
        "parameters": [
          {
            "description": "The ID of a runner",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "System ID associated with the runner manager",
            "in": "query",
            "name": "system_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Status of the job",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "enum": [
                "created",
                "waiting_for_resource",
                "preparing",
                "waiting_for_callback",
                "pending",
                "running",
                "success",
                "failed",
                "canceling",
                "canceled",
                "skipped",
                "manual",
                "scheduled"
              ],
              "type": "string"
            }
          },
          {
            "description": "Order by `id`",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "enum": [
                "id"
              ],
              "type": "string"
            }
          },
          {
            "description": "Sort by `asc` or `desc` order. Specify `order_by` as well, including for `id`",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Cursor for obtaining the next set of records",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List jobs running on a runner",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_JobBasicWithProject"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "No access granted"
          },
          "404": {
            "description": "Runner not found"
          }
        },
        "summary": "List runner's jobs",
        "tags": [
          "runners",
          "jobs"
        ]
      }
    },
    "/api/v4/runners/{id}/managers": {
      "get": {
        "description": "Get a list of all runner's managers",
        "operationId": "runners_managers/getApiV4RunnersIdManagers",
        "parameters": [
          {
            "description": "The ID of a runner",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of all runner's managers",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_RunnerManager"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "runners"
        ]
      }
    },
    "/api/v4/runners/{id}/reset_authentication_token": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Reset runner authentication token",
        "operationId": "runners_reset_authentication_token/postApiV4RunnersIdResetAuthenticationToken",
        "parameters": [
          {
            "description": "The ID of the runner",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Reset runner authentication token",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_ResetTokenResult"
            }
          },
          "403": {
            "description": "No access granted"
          },
          "404": {
            "description": "Runner not found"
          }
        },
        "summary": "Reset runner's authentication token",
        "tags": [
          "runners"
        ]
      }
    },
    "/api/v4/user/activities": {
      "get": {
        "description": "Get a list of user activities",
        "operationId": "user/getApiV4UserActivities",
        "parameters": [
          {
            "description": "Date string in the format YEAR-MONTH-DAY",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "default": "2024-09-05T09:41:43.021Z",
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a list of user activities"
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/v4/user/avatar": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 17.0.",
        "operationId": "user/putApiV4UserAvatar",
        "parameters": [
          {
            "in": "body",
            "name": "putApiV4UserAvatar",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4UserAvatar"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Set the avatar of the current user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Avatar"
            }
          }
        },
        "summary": "Set the avatar of the current user",
        "tags": [
          "user"
        ]
      }
    },
    "/api/v4/user/emails": {
      "get": {
        "description": "Get the currently authenticated user's email addresses",
        "operationId": "user/getApiV4UserEmails",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the currently authenticated user's email addresses",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Email"
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Add new email address to the currently authenticated user",
        "operationId": "user/postApiV4UserEmails",
        "parameters": [
          {
            "in": "body",
            "name": "postApiV4UserEmails",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4UserEmails"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add new email address to the currently authenticated user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Email"
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/v4/user/emails/{email_id}": {
      "delete": {
        "description": "Delete an email address from the currently authenticated user",
        "operationId": "user/deleteApiV4UserEmailsEmailId",
        "parameters": [
          {
            "description": "The ID of the email",
            "in": "path",
            "name": "email_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete an email address from the currently authenticated user"
          }
        },
        "tags": [
          "user"
        ]
      },
      "get": {
        "description": "Get a single email address owned by the currently authenticated user",
        "operationId": "user/getApiV4UserEmailsEmailId",
        "parameters": [
          {
            "description": "The ID of the email",
            "in": "path",
            "name": "email_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single email address owned by the currently authenticated user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Email"
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/v4/user/gpg_keys": {
      "get": {
        "description": "This feature was added in GitLab 10.0",
        "operationId": "user/getApiV4UserGpgKeys",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the currently authenticated user's GPG keys",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_GpgKey"
            }
          }
        },
        "summary": "Get the currently authenticated user's GPG keys",
        "tags": [
          "user"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was added in GitLab 10.0",
        "operationId": "user/postApiV4UserGpgKeys",
        "parameters": [
          {
            "in": "body",
            "name": "postApiV4UserGpgKeys",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4UserGpgKeys"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add a new GPG key to the currently authenticated user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_GpgKey"
            }
          }
        },
        "summary": "Add a new GPG key to the currently authenticated user",
        "tags": [
          "user"
        ]
      }
    },
    "/api/v4/user/gpg_keys/{key_id}": {
      "delete": {
        "description": "This feature was added in GitLab 10.0",
        "operationId": "user/deleteApiV4UserGpgKeysKeyId",
        "parameters": [
          {
            "description": "The ID of the SSH key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a GPG key from the currently authenticated user"
          }
        },
        "summary": "Delete a GPG key from the currently authenticated user",
        "tags": [
          "user"
        ]
      },
      "get": {
        "description": "This feature was added in GitLab 10.0",
        "operationId": "user/getApiV4UserGpgKeysKeyId",
        "parameters": [
          {
            "description": "The ID of the GPG key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single GPG key owned by currently authenticated user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_GpgKey"
            }
          }
        },
        "summary": "Get a single GPG key owned by currently authenticated user",
        "tags": [
          "user"
        ]
      }
    },
    "/api/v4/user/gpg_keys/{key_id}/revoke": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was added in GitLab 10.0",
        "operationId": "user/postApiV4UserGpgKeysKeyIdRevoke",
        "parameters": [
          {
            "description": "The ID of the GPG key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Revoke a GPG key owned by currently authenticated user"
          }
        },
        "summary": "Revoke a GPG key owned by currently authenticated user",
        "tags": [
          "user"
        ]
      }
    },
    "/api/v4/user/keys": {
      "get": {
        "description": "Get the currently authenticated user's SSH keys",
        "operationId": "user/getApiV4UserKeys",
        "parameters": [
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the currently authenticated user's SSH keys",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_SSHKey"
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Add a new SSH key to the currently authenticated user",
        "operationId": "user/postApiV4UserKeys",
        "parameters": [
          {
            "in": "body",
            "name": "postApiV4UserKeys",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4UserKeys"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add a new SSH key to the currently authenticated user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_SSHKey"
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/v4/user/keys/{key_id}": {
      "delete": {
        "description": "Delete an SSH key from the currently authenticated user",
        "operationId": "user/deleteApiV4UserKeysKeyId",
        "parameters": [
          {
            "description": "The ID of the SSH key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Delete an SSH key from the currently authenticated user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_SSHKey"
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "get": {
        "description": "Get a single key owned by currently authenticated user",
        "operationId": "user/getApiV4UserKeysKeyId",
        "parameters": [
          {
            "description": "The ID of the SSH key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single key owned by currently authenticated user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_SSHKey"
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/v4/user/personal_access_tokens": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 16.5",
        "operationId": "user/postApiV4UserPersonalAccessTokens",
        "parameters": [
          {
            "in": "body",
            "name": "postApiV4UserPersonalAccessTokens",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4UserPersonalAccessTokens"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a personal access token with limited scopes for the currently authenticated user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_PersonalAccessTokenWithToken"
            }
          }
        },
        "summary": "Create a personal access token with limited scopes for the currently authenticated user",
        "tags": [
          "user"
        ]
      }
    },
    "/api/v4/user/preferences": {
      "get": {
        "description": "This feature was introduced in GitLab 14.0.",
        "operationId": "user/getApiV4UserPreferences",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the current user's preferences",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserPreferences"
            }
          }
        },
        "summary": "Get the current user's preferences",
        "tags": [
          "user"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 13.10.",
        "operationId": "user/putApiV4UserPreferences",
        "parameters": [
          {
            "in": "body",
            "name": "putApiV4UserPreferences",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4UserPreferences"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update the current user's preferences",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserPreferences"
            }
          }
        },
        "summary": "Update the current user's preferences",
        "tags": [
          "user"
        ]
      }
    },
    "/api/v4/user/runners": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a new runner",
        "operationId": "user/postApiV4UserRunners",
        "parameters": [
          {
            "in": "body",
            "name": "postApiV4UserRunners",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4UserRunners"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a runner owned by currently authenticated user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Ci_RunnerRegistrationDetails"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "summary": "Create a runner owned by currently authenticated user",
        "tags": [
          "user",
          "runners"
        ]
      }
    },
    "/api/v4/user/status": {
      "get": {
        "description": "get the status of the current user",
        "operationId": "user/getApiV4UserStatus",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "get the status of the current user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserStatus"
            }
          }
        },
        "tags": [
          "user"
        ]
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "Any parameters that are not passed will be ignored.",
        "operationId": "user/patchApiV4UserStatus",
        "parameters": [
          {
            "in": "body",
            "name": "patchApiV4UserStatus",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/patchApiV4UserStatus"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Set the status of the current user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserStatus"
            }
          }
        },
        "summary": "Set the status of the current user",
        "tags": [
          "user"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Any parameters that are not passed will be nullified.",
        "operationId": "user/putApiV4UserStatus",
        "parameters": [
          {
            "in": "body",
            "name": "putApiV4UserStatus",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4UserStatus"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Set the status of the current user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserStatus"
            }
          }
        },
        "summary": "Set the status of the current user",
        "tags": [
          "user"
        ]
      }
    },
    "/api/v4/user/support_pin": {
      "get": {
        "description": "This feature retrieves the temporary Support PIN for the authenticated user",
        "operationId": "user/getApiV4UserSupportPin",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the current Support PIN for the authenticated user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserSupportPin"
            }
          }
        },
        "summary": "Get the current Support PIN for the authenticated user",
        "tags": [
          "user"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature creates a temporary Support PIN for the authenticated user",
        "operationId": "user/postApiV4UserSupportPin",
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a new Support PIN for the authenticated user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserSupportPin"
            }
          }
        },
        "summary": "Create a new Support PIN for the authenticated user",
        "tags": [
          "user"
        ]
      }
    },
    "/api/v4/user/{user_id}/credit_card_validation": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "[DEPRECATED] Update a user's credit_card_validation",
        "operationId": "user_credit_card_validation/putApiV4UserUserIdCreditCardValidation",
        "parameters": [
          {
            "description": "The ID or username of the user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "body",
            "name": "putApiV4UserUserIdCreditCardValidation",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4UserUserIdCreditCardValidation"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "[DEPRECATED] Update a user's credit_card_validation",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserCreditCardValidations"
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/api/v4/user_counts": {
      "get": {
        "description": "Assigned open issues, assigned MRs and pending todos count",
        "operationId": "user_counts/getApiV4UserCounts",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Return the user specific counts",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserCounts"
            }
          }
        },
        "summary": "Return the user specific counts",
        "tags": [
          "user_counts"
        ]
      }
    },
    "/api/v4/users": {
      "get": {
        "description": "Get the list of users",
        "operationId": "users/getApiV4Users",
        "parameters": [
          {
            "description": "Get a single user with a specific username",
            "in": "query",
            "name": "username",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Get a single user with a specific external authentication provider UID",
            "in": "query",
            "name": "extern_uid",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The external provider",
            "in": "query",
            "name": "provider",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search for a username",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filters only active users",
            "in": "query",
            "name": "active",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Filters only human users",
            "in": "query",
            "name": "humans",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Filters only external users",
            "in": "query",
            "name": "external",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Filters only blocked users",
            "in": "query",
            "name": "blocked",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Return users created after the specified time",
            "in": "query",
            "name": "created_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Return users created before the specified time",
            "in": "query",
            "name": "created_before",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Filters only users without projects",
            "in": "query",
            "name": "without_projects",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Filters users without project bots",
            "in": "query",
            "name": "without_project_bots",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Filters only admin users",
            "in": "query",
            "name": "admins",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Filter users by Two-factor authentication.",
            "in": "query",
            "name": "two_factor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Filters only non active users",
            "in": "query",
            "name": "exclude_active",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Filters only non external users",
            "in": "query",
            "name": "exclude_external",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Filters only non human users",
            "in": "query",
            "name": "exclude_humans",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Filters only non internal users",
            "in": "query",
            "name": "exclude_internal",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Return users ordered by a field",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "enum": [
                "id",
                "name",
                "username",
                "created_at",
                "updated_at"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return users sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Include custom attributes in the response",
            "in": "query",
            "name": "with_custom_attributes",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Skip LDAP users",
            "in": "query",
            "name": "skip_ldap",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Return only users from the specified SAML provider Id",
            "in": "query",
            "name": "saml_provider_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Filters only auditor users",
            "in": "query",
            "name": "auditors",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/API_Entities_UserBasic"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Get the list of users"
          }
        },
        "tags": [
          "users"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Create a user. Available only for admins.",
        "operationId": "users/postApiV4Users",
        "parameters": [
          {
            "in": "body",
            "name": "postApiV4Users",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4Users"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a user. Available only for admins.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserWithAdmin"
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}": {
      "delete": {
        "description": "Delete a user. Available only for admins.",
        "operationId": "users/deleteApiV4UsersId",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Whether to remove a user's contributions",
            "in": "query",
            "name": "hard_delete",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Delete a user. Available only for admins.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Email"
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "get": {
        "description": "Get a single user",
        "operationId": "users/getApiV4UsersId",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Include custom attributes in the response",
            "in": "query",
            "name": "with_custom_attributes",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a single user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_User"
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Update a user. Available only for admins.",
        "operationId": "users/putApiV4UsersId",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4UsersId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4UsersId"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Update a user. Available only for admins.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserWithAdmin"
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/activate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Activate a deactivated user. Available only for admins.",
        "operationId": "users_activate/postApiV4UsersIdActivate",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Activate a deactivated user. Available only for admins."
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/approve": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Approve a pending user. Available only for admins.",
        "operationId": "users_approve/postApiV4UsersIdApprove",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Approve a pending user. Available only for admins."
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/associations_count": {
      "get": {
        "description": "Returns a list of a specified user's count of projects, groups, issues and merge requests.",
        "operationId": "users_associations_count/getApiV4UsersIdAssociationsCount",
        "parameters": [
          {
            "description": "ID of the user to query.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Returns a list of a specified user's count of projects, groups, issues and merge requests."
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/ban": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Ban a user. Available only for admins.",
        "operationId": "users_ban/postApiV4UsersIdBan",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Ban a user. Available only for admins."
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/block": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Block a user. Available only for admins.",
        "operationId": "users_block/postApiV4UsersIdBlock",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Block a user. Available only for admins."
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/custom_attributes": {
      "get": {
        "description": "Get all custom attributes on a user",
        "operationId": "users_custom_attributes/getApiV4UsersIdCustomAttributes",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get all custom attributes on a user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_CustomAttribute"
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/custom_attributes/{key}": {
      "delete": {
        "description": "Delete a custom attribute on a user",
        "operationId": "users_custom_attributes/deleteApiV4UsersIdCustomAttributesKey",
        "parameters": [
          {
            "description": "The key of the custom attribute",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete a custom attribute on a user"
          }
        },
        "tags": [
          "users"
        ]
      },
      "get": {
        "description": "Get a custom attribute on a user",
        "operationId": "users_custom_attributes/getApiV4UsersIdCustomAttributesKey",
        "parameters": [
          {
            "description": "The key of the custom attribute",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a custom attribute on a user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_CustomAttribute"
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "description": "Set a custom attribute on a user",
        "operationId": "users_custom_attributes/putApiV4UsersIdCustomAttributesKey",
        "parameters": [
          {
            "description": "The key of the custom attribute",
            "in": "path",
            "name": "key",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "putApiV4UsersIdCustomAttributesKey",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/putApiV4UsersIdCustomAttributesKey"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Set a custom attribute on a user"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/deactivate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Deactivate an active user. Available only for admins.",
        "operationId": "users_deactivate/postApiV4UsersIdDeactivate",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Deactivate an active user. Available only for admins."
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/disable_two_factor": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was added in GitLab 15.2",
        "operationId": "users_disable_two_factor/patchApiV4UsersIdDisableTwoFactor",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Disable two factor authentication for a user. Available only for admins",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserWithAdmin"
            }
          }
        },
        "summary": "Disable two factor authentication for a user. Available only for admins",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/emails": {
      "get": {
        "description": "Get the emails addresses of a specified user. Available only for admins.",
        "operationId": "users_emails/getApiV4UsersIdEmails",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the emails addresses of a specified user. Available only for admins.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Email"
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Add an email address to a specified user. Available only for admins.",
        "operationId": "users_emails/postApiV4UsersIdEmails",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4UsersIdEmails",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4UsersIdEmails"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add an email address to a specified user. Available only for admins.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Email"
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/emails/{email_id}": {
      "delete": {
        "description": "Delete an email address of a specified user. Available only for admins.",
        "operationId": "users_emails/deleteApiV4UsersIdEmailsEmailId",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the email",
            "in": "path",
            "name": "email_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Delete an email address of a specified user. Available only for admins.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Email"
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/events": {
      "get": {
        "description": "This feature was introduced in GitLab 8.13.",
        "operationId": "users_events/getApiV4UsersIdEvents",
        "parameters": [
          {
            "description": "The ID or username of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Event action to filter on",
            "in": "query",
            "name": "action",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Event target type to filter on",
            "in": "query",
            "name": "target_type",
            "required": false,
            "schema": {
              "enum": [
                "issue",
                "milestone",
                "merge_request",
                "note",
                "project",
                "snippet",
                "user",
                "wiki",
                "design"
              ],
              "type": "string"
            }
          },
          {
            "description": "Include only events created before this date",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Include only events created after this date",
            "in": "query",
            "name": "after",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Return events sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the contribution events of a specified user",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_Event"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Not found"
          }
        },
        "summary": "Get the contribution events of a specified user",
        "tags": [
          "events"
        ]
      }
    },
    "/api/v4/users/{id}/follow": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Follow a user",
        "operationId": "users_follow/postApiV4UsersIdFollow",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Follow a user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_User"
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/followers": {
      "get": {
        "description": "Get the followers of a user",
        "operationId": "users_followers/getApiV4UsersIdFollowers",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the followers of a user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserBasic"
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/following": {
      "get": {
        "description": "Get the users who follow a user",
        "operationId": "users_following/getApiV4UsersIdFollowing",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the users who follow a user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserBasic"
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/gpg_keys": {
      "get": {
        "description": "This feature was added in GitLab 10.0",
        "operationId": "users_gpg_keys/getApiV4UsersIdGpgKeys",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the GPG keys of a specified user.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_GpgKey"
            }
          }
        },
        "summary": "Get the GPG keys of a specified user.",
        "tags": [
          "users"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was added in GitLab 10.0",
        "operationId": "users_gpg_keys/postApiV4UsersIdGpgKeys",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4UsersIdGpgKeys",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4UsersIdGpgKeys"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add a GPG key to a specified user. Available only for admins.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_GpgKey"
            }
          }
        },
        "summary": "Add a GPG key to a specified user. Available only for admins.",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/gpg_keys/{key_id}": {
      "delete": {
        "description": "This feature was added in GitLab 10.0",
        "operationId": "users_gpg_keys/deleteApiV4UsersIdGpgKeysKeyId",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the GPG key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Delete an existing GPG key from a specified user. Available only for admins."
          }
        },
        "summary": "Delete an existing GPG key from a specified user. Available only for admins.",
        "tags": [
          "users"
        ]
      },
      "get": {
        "description": "This feature was added in GitLab 13.5",
        "operationId": "users_gpg_keys/getApiV4UsersIdGpgKeysKeyId",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the GPG key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a specific GPG key for a given user.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_GpgKey"
            }
          }
        },
        "summary": "Get a specific GPG key for a given user.",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/gpg_keys/{key_id}/revoke": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was added in GitLab 10.0",
        "operationId": "users_gpg_keys/postApiV4UsersIdGpgKeysKeyIdRevoke",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the GPG key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Revokes an existing GPG key from a specified user. Available only for admins."
          }
        },
        "summary": "Revokes an existing GPG key from a specified user. Available only for admins.",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/identities/{provider}": {
      "delete": {
        "description": "Delete a user's identity. Available only for admins",
        "operationId": "users_identities/deleteApiV4UsersIdIdentitiesProvider",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The external provider",
            "in": "path",
            "name": "provider",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Delete a user's identity. Available only for admins",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserWithAdmin"
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/keys/{key_id}": {
      "delete": {
        "description": "Delete an existing SSH key from a specified user. Available only for admins.",
        "operationId": "users_keys/deleteApiV4UsersIdKeysKeyId",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the SSH key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Delete an existing SSH key from a specified user. Available only for admins.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_SSHKey"
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "get": {
        "description": "Get a SSH key of a specified user.",
        "operationId": "users_keys/getApiV4UsersIdKeysKeyId",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the SSH key",
            "in": "path",
            "name": "key_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a SSH key of a specified user.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_SSHKey"
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/reject": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Reject a pending user. Available only for admins.",
        "operationId": "users_reject/postApiV4UsersIdReject",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Reject a pending user. Available only for admins."
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/support_pin": {
      "get": {
        "description": "This feature allows administrators to retrieve the support PIN for a specified user",
        "operationId": "users_support_pin/getApiV4UsersIdSupportPin",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get support PIN for a user. Available only for admins.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_UserSupportPin"
            }
          }
        },
        "summary": "Get support PIN for a user. Available only for admins.",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/unban": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Unban a user. Available only for admins.",
        "operationId": "users_unban/postApiV4UsersIdUnban",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Unban a user. Available only for admins."
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/unblock": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Unblock a user. Available only for admins.",
        "operationId": "users_unblock/postApiV4UsersIdUnblock",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Unblock a user. Available only for admins."
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{id}/unfollow": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Unfollow a user",
        "operationId": "users_unfollow/postApiV4UsersIdUnfollow",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Unfollow a user",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_User"
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{user_id}/contributed_projects": {
      "get": {
        "description": "Get projects that a user has contributed to",
        "operationId": "users_contributed_projects/getApiV4UsersUserIdContributedProjects",
        "parameters": [
          {
            "description": "The ID or username of the user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return projects ordered by field. storage_size, repository_size, wiki_size, packages_size are only available to admins. Similarity is available when searching and is limited to projects the user has access to.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at",
                "similarity",
                "star_count",
                "storage_size",
                "repository_size",
                "wiki_size",
                "packages_size"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return only the ID, URL, name, and path of each project",
            "in": "query",
            "name": "simple",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get projects that a user has contributed to",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_BasicProjectDetails"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "404 User Not Found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/users/{user_id}/impersonation_tokens": {
      "get": {
        "description": "This feature was introduced in GitLab 9.0",
        "operationId": "users_impersonation_tokens/getApiV4UsersUserIdImpersonationTokens",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Filters (all|active|inactive) impersonation_tokens",
            "in": "query",
            "name": "state",
            "required": false,
            "schema": {
              "default": "all",
              "enum": [
                "all",
                "active",
                "inactive"
              ],
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Retrieve impersonation tokens. Available only for admins.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ImpersonationToken"
            }
          }
        },
        "summary": "Retrieve impersonation tokens. Available only for admins.",
        "tags": [
          "users"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 9.0",
        "operationId": "users_impersonation_tokens/postApiV4UsersUserIdImpersonationTokens",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4UsersUserIdImpersonationTokens",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4UsersUserIdImpersonationTokens"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a impersonation token. Available only for admins.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ImpersonationTokenWithToken"
            }
          }
        },
        "summary": "Create a impersonation token. Available only for admins.",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{user_id}/impersonation_tokens/{impersonation_token_id}": {
      "delete": {
        "description": "This feature was introduced in GitLab 9.0",
        "operationId": "users_impersonation_tokens/deleteApiV4UsersUserIdImpersonationTokensImpersonationTokenId",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the impersonation token",
            "in": "path",
            "name": "impersonation_token_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "Revoke a impersonation token. Available only for admins."
          }
        },
        "summary": "Revoke a impersonation token. Available only for admins.",
        "tags": [
          "users"
        ]
      },
      "get": {
        "description": "This feature was introduced in GitLab 9.0",
        "operationId": "users_impersonation_tokens/getApiV4UsersUserIdImpersonationTokensImpersonationTokenId",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The ID of the impersonation token",
            "in": "path",
            "name": "impersonation_token_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Retrieve impersonation token. Available only for admins.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_ImpersonationToken"
            }
          }
        },
        "summary": "Retrieve impersonation token. Available only for admins.",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{user_id}/keys": {
      "get": {
        "description": "Get the SSH keys of a specified user.",
        "operationId": "users_keys/getApiV4UsersUserIdKeys",
        "parameters": [
          {
            "description": "The ID or username of the user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the SSH keys of a specified user.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_SSHKey"
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "Add an SSH key to a specified user. Available only for admins.",
        "operationId": "users_keys/postApiV4UsersUserIdKeys",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4UsersUserIdKeys",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4UsersUserIdKeys"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Add an SSH key to a specified user. Available only for admins.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_SSHKey"
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{user_id}/memberships": {
      "get": {
        "description": "Get memberships",
        "operationId": "users_memberships/getApiV4UsersUserIdMemberships",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "enum": [
                "Project",
                "Namespace"
              ],
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get memberships",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Membership"
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{user_id}/personal_access_tokens": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "description": "This feature was introduced in GitLab 13.6",
        "operationId": "users_personal_access_tokens/postApiV4UsersUserIdPersonalAccessTokens",
        "parameters": [
          {
            "description": "The ID of the user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "body",
            "name": "postApiV4UsersUserIdPersonalAccessTokens",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/postApiV4UsersUserIdPersonalAccessTokens"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Create a personal access token. Available only for admins.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_PersonalAccessTokenWithToken"
            }
          }
        },
        "summary": "Create a personal access token. Available only for admins.",
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{user_id}/project_deploy_keys": {
      "get": {
        "description": "Get the project-level Deploy keys that a specified user can access to.",
        "operationId": "users_project_deploy_keys/getApiV4UsersUserIdProjectDeployKeys",
        "parameters": [
          {
            "description": "The ID or username of the user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the project-level Deploy keys that a specified user can access to.",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_DeployKey"
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/users/{user_id}/projects": {
      "get": {
        "description": "Get a user projects",
        "operationId": "users_projects/getApiV4UsersUserIdProjects",
        "parameters": [
          {
            "description": "The ID or username of the user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return projects ordered by field. storage_size, repository_size, wiki_size, packages_size are only available to admins. Similarity is available when searching and is limited to projects the user has access to.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at",
                "similarity",
                "star_count",
                "storage_size",
                "repository_size",
                "wiki_size",
                "packages_size"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Limit by archived status",
            "in": "query",
            "name": "archived",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "enum": [
                "private",
                "internal",
                "public"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return list of projects matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include ancestor namespaces when matching search criteria",
            "in": "query",
            "name": "search_namespaces",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by owned by authenticated user",
            "in": "query",
            "name": "owned",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by starred status",
            "in": "query",
            "name": "starred",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by imported by authenticated user",
            "in": "query",
            "name": "imported",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by projects that the current user is a member of",
            "in": "query",
            "name": "membership",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by enabled issues feature",
            "in": "query",
            "name": "with_issues_enabled",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by enabled merge requests feature",
            "in": "query",
            "name": "with_merge_requests_enabled",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit to repositories which use the given programming language",
            "in": "query",
            "name": "with_programming_language",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit by minimum access level of authenticated user",
            "in": "query",
            "name": "min_access_level",
            "required": false,
            "schema": {
              "enum": [
                10,
                15,
                20,
                30,
                40,
                50
              ],
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Limit results to projects with IDs greater than the specified ID",
            "in": "query",
            "name": "id_after",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Limit results to projects with IDs less than the specified ID",
            "in": "query",
            "name": "id_before",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Limit results to projects with last_activity after specified time. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
            "in": "query",
            "name": "last_activity_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Limit results to projects with last_activity before specified time. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
            "in": "query",
            "name": "last_activity_before",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Which storage shard the repository is on. Available only to admins",
            "in": "query",
            "name": "repository_storage",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Comma-separated list of topics. Limit results to projects having all topics",
            "in": "query",
            "name": "topic",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Limit results to projects with the assigned topic given by the topic ID",
            "in": "query",
            "name": "topic_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return projects updated before the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
            "in": "query",
            "name": "updated_before",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Return projects updated after the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
            "in": "query",
            "name": "updated_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Include projects in pending delete state. Can only be set by admins",
            "in": "query",
            "name": "include_pending_delete",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by projects where wiki checksum is failed",
            "in": "query",
            "name": "wiki_checksum_failed",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by projects where repository checksum is failed",
            "in": "query",
            "name": "repository_checksum_failed",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include hidden projects. Can only be set by admins",
            "in": "query",
            "name": "include_hidden",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Date when the project was marked for deletion",
            "in": "query",
            "name": "marked_for_deletion_on",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return only the ID, URL, name, and path of each project",
            "in": "query",
            "name": "simple",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include project statistics",
            "in": "query",
            "name": "statistics",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include custom attributes in the response",
            "in": "query",
            "name": "with_custom_attributes",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get a user projects",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_BasicProjectDetails"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "404 User Not Found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/users/{user_id}/starred_projects": {
      "get": {
        "description": "Get projects starred by a user",
        "operationId": "users_starred_projects/getApiV4UsersUserIdStarredProjects",
        "parameters": [
          {
            "description": "The ID or username of the user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Return projects ordered by field. storage_size, repository_size, wiki_size, packages_size are only available to admins. Similarity is available when searching and is limited to projects the user has access to.",
            "in": "query",
            "name": "order_by",
            "required": false,
            "schema": {
              "default": "created_at",
              "enum": [
                "id",
                "name",
                "path",
                "created_at",
                "updated_at",
                "last_activity_at",
                "similarity",
                "star_count",
                "storage_size",
                "repository_size",
                "wiki_size",
                "packages_size"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return projects sorted in ascending and descending order",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "description": "Limit by archived status",
            "in": "query",
            "name": "archived",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by visibility",
            "in": "query",
            "name": "visibility",
            "required": false,
            "schema": {
              "enum": [
                "private",
                "internal",
                "public"
              ],
              "type": "string"
            }
          },
          {
            "description": "Return list of projects matching the search criteria",
            "in": "query",
            "name": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Include ancestor namespaces when matching search criteria",
            "in": "query",
            "name": "search_namespaces",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by owned by authenticated user",
            "in": "query",
            "name": "owned",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by starred status",
            "in": "query",
            "name": "starred",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by imported by authenticated user",
            "in": "query",
            "name": "imported",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by projects that the current user is a member of",
            "in": "query",
            "name": "membership",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by enabled issues feature",
            "in": "query",
            "name": "with_issues_enabled",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by enabled merge requests feature",
            "in": "query",
            "name": "with_merge_requests_enabled",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit to repositories which use the given programming language",
            "in": "query",
            "name": "with_programming_language",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit by minimum access level of authenticated user",
            "in": "query",
            "name": "min_access_level",
            "required": false,
            "schema": {
              "enum": [
                10,
                15,
                20,
                30,
                40,
                50
              ],
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Limit results to projects with IDs greater than the specified ID",
            "in": "query",
            "name": "id_after",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Limit results to projects with IDs less than the specified ID",
            "in": "query",
            "name": "id_before",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Limit results to projects with last_activity after specified time. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
            "in": "query",
            "name": "last_activity_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Limit results to projects with last_activity before specified time. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
            "in": "query",
            "name": "last_activity_before",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Which storage shard the repository is on. Available only to admins",
            "in": "query",
            "name": "repository_storage",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Comma-separated list of topics. Limit results to projects having all topics",
            "in": "query",
            "name": "topic",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "description": "Limit results to projects with the assigned topic given by the topic ID",
            "in": "query",
            "name": "topic_id",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return projects updated before the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
            "in": "query",
            "name": "updated_before",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Return projects updated after the specified datetime. Format: ISO 8601 YYYY-MM-DDTHH:MM:SSZ",
            "in": "query",
            "name": "updated_after",
            "required": false,
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "description": "Include projects in pending delete state. Can only be set by admins",
            "in": "query",
            "name": "include_pending_delete",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Limit by projects where wiki checksum is failed",
            "in": "query",
            "name": "wiki_checksum_failed",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Limit by projects where repository checksum is failed",
            "in": "query",
            "name": "repository_checksum_failed",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include hidden projects. Can only be set by admins",
            "in": "query",
            "name": "include_hidden",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Date when the project was marked for deletion",
            "in": "query",
            "name": "marked_for_deletion_on",
            "required": false,
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "description": "Current page number",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "example": 1,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "per_page",
            "required": false,
            "schema": {
              "default": 20,
              "example": 20,
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Return only the ID, URL, name, and path of each project",
            "in": "query",
            "name": "simple",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "description": "Include project statistics",
            "in": "query",
            "name": "statistics",
            "required": false,
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get projects starred by a user",
            "schema": {
              "items": {
                "$ref": "#/components/schemas/API_Entities_BasicProjectDetails"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "404 User Not Found"
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/v4/users/{user_id}/status": {
      "get": {
        "description": "Get the status of a user",
        "operationId": "users_status/getApiV4UsersUserIdStatus",
        "parameters": [
          {
            "description": "The ID or username of the user",
            "in": "path",
            "name": "user_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Get the status of a user"
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/api/v4/version": {
      "get": {
        "description": "This feature was introduced in GitLab 8.13 and deprecated in 15.5. We recommend you instead use the Metadata API.",
        "operationId": "version/getApiV4Version",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Retrieves version information for the GitLab instance",
            "schema": {
              "$ref": "#/components/schemas/API_Entities_Metadata"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "summary": "Retrieves version information for the GitLab instance",
        "tags": [
          "metadata"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://gitlab.com"
    }
  ],
  "tags": [
    {
      "description": "Operations about award_emoji",
      "name": "award_emoji"
    },
    {
      "description": "Operations about badges",
      "name": "badges"
    },
    {
      "description": "Operations about groups",
      "name": "groups"
    },
    {
      "description": "Operations about runners",
      "name": "runners"
    },
    {
      "description": "Operations about group_avatars",
      "name": "group_avatar"
    },
    {
      "description": "Operations about invitations",
      "name": "invitations"
    },
    {
      "description": "Operations about members",
      "name": "members"
    },
    {
      "description": "Operations about personal_access_tokens",
      "name": "personal_access_tokens"
    },
    {
      "description": "Operations about group_access_tokens",
      "name": "group_access_tokens"
    },
    {
      "description": "Operations about wikis",
      "name": "wikis"
    },
    {
      "description": "Operations about alert_managements",
      "name": "alert_management"
    },
    {
      "description": "Operations about branches",
      "name": "branches"
    },
    {
      "description": "Operations about secure_files",
      "name": "secure_files"
    },
    {
      "description": "Operations about commits",
      "name": "commits"
    },
    {
      "description": "Operations about pages",
      "name": "pages"
    },
    {
      "description": "Operations about pages_domains",
      "name": "pages_domains"
    },
    {
      "description": "Operations about project_avatars",
      "name": "project_avatar"
    },
    {
      "description": "Operations about projects_job_token_scopes",
      "name": "projects_job_token_scope"
    },
    {
      "description": "Operations about project_snippets",
      "name": "project_snippets"
    },
    {
      "description": "Operations about protected_tags",
      "name": "protected_tags"
    },
    {
      "description": "Operations about remote_mirrors",
      "name": "remote_mirrors"
    },
    {
      "description": "Operations about project_access_tokens",
      "name": "project_access_tokens"
    },
    {
      "description": "Operations about tags",
      "name": "tags"
    },
    {
      "description": "Operations about batched_background_migrations",
      "name": "batched_background_migrations"
    },
    {
      "description": "Operations about admins",
      "name": "admin"
    },
    {
      "description": "Operations about migrations",
      "name": "migrations"
    },
    {
      "description": "Operations about broadcast_messages",
      "name": "broadcast_messages"
    },
    {
      "description": "Operations about applications",
      "name": "applications"
    },
    {
      "description": "Operations about avatars",
      "name": "avatar"
    },
    {
      "description": "Operations about bulk_imports",
      "name": "bulk_imports"
    },
    {
      "description": "Operations about jobs",
      "name": "job"
    },
    {
      "description": "Operations about jobs",
      "name": "jobs"
    },
    {
      "description": "Operations about events",
      "name": "events"
    },
    {
      "description": "Operations about users",
      "name": "users"
    },
    {
      "description": "Operations about keys",
      "name": "keys"
    },
    {
      "description": "Operations about markdowns",
      "name": "markdown"
    },
    {
      "description": "Operations about namespaces",
      "name": "namespaces"
    },
    {
      "description": "Operations about organizations",
      "name": "organizations"
    },
    {
      "description": "Operations about project_repository_storage_moves",
      "name": "project_repository_storage_moves"
    },
    {
      "description": "Operations about snippets",
      "name": "snippets"
    },
    {
      "description": "Operations about snippet_repository_storage_moves",
      "name": "snippet_repository_storage_moves"
    },
    {
      "description": "Operations about hooks",
      "name": "hooks"
    },
    {
      "description": "Operations about usage_data",
      "name": "usage_data"
    },
    {
      "description": "Operations about metrics",
      "name": "metrics"
    },
    {
      "description": "Operations about users",
      "name": "user"
    },
    {
      "description": "Operations about user_counts",
      "name": "user_counts"
    },
    {
      "description": "Operations about applications",
      "name": "application"
    },
    {
      "description": "Operations about imports",
      "name": "import"
    },
    {
      "description": "Operations about slacks",
      "name": "slack"
    },
    {
      "description": "Operations about topics",
      "name": "topics"
    },
    {
      "description": "Operations about web_commits",
      "name": "web_commits"
    },
    {
      "description": "Operations related to access requests",
      "name": "access_requests"
    },
    {
      "description": "Operations related to linting a CI config file",
      "name": "ci_lint"
    },
    {
      "description": "Operations to manage job concurrency with resource groups",
      "name": "ci_resource_groups"
    },
    {
      "description": "Operations related to CI/CD variables",
      "name": "ci_variables"
    },
    {
      "description": "Operations related to the GitLab agent for Kubernetes",
      "name": "cluster_agents"
    },
    {
      "description": "Operations related to clusters",
      "name": "clusters"
    },
    {
      "description": "Operations related to Composer packages",
      "name": "composer_packages"
    },
    {
      "description": "Operations related to Conan packages",
      "name": "conan_packages"
    },
    {
      "description": "Operations related to container registry",
      "name": "container_registry"
    },
    {
      "description": "Operations related to container registry events",
      "name": "container_registry_event"
    },
    {
      "description": "Operations related to Debian Linux distributions",
      "name": "debian_distribution"
    },
    {
      "description": "Operations related to Debian Linux packages",
      "name": "debian_packages"
    },
    {
      "description": "Operations to manage dependency proxy for a groups",
      "name": "dependency_proxy"
    },
    {
      "description": "Operations related to deploy keys",
      "name": "deploy_keys"
    },
    {
      "description": "Operations related to deploy tokens",
      "name": "deploy_tokens"
    },
    {
      "description": "Operations related to deployments",
      "name": "deployments"
    },
    {
      "description": "Operations related to DevOps Research and Assessment (DORA) key metrics",
      "name": "dora_metrics"
    },
    {
      "description": "Operations related to environments",
      "name": "environments"
    },
    {
      "description": "Operations related to error tracking client keys",
      "name": "error_tracking_client_keys"
    },
    {
      "description": "Operations related to error tracking project settings",
      "name": "error_tracking_project_settings"
    },
    {
      "description": "Operations related to accessing GitLab feature flag user lists",
      "name": "feature_flags_user_lists"
    },
    {
      "description": "Operations related to feature flags",
      "name": "feature_flags"
    },
    {
      "description": "Operations related to managing Flipper-based feature flags",
      "name": "features"
    },
    {
      "description": "Operations related to deploy freeze periods",
      "name": "freeze_periods"
    },
    {
      "description": "Operations related to Generic packages",
      "name": "generic_packages"
    },
    {
      "description": "Operations related to Geo",
      "name": "geo"
    },
    {
      "description": "Operations related Geo Nodes",
      "name": "geo_nodes"
    },
    {
      "description": "Operations related to Go Proxy",
      "name": "go_proxy"
    },
    {
      "description": "Operations related to exporting groups",
      "name": "group_export"
    },
    {
      "description": "Operations related to importing groups",
      "name": "group_import"
    },
    {
      "description": "Operations related to group packages",
      "name": "group_packages"
    },
    {
      "description": "Operations related to Helm packages",
      "name": "helm_packages"
    },
    {
      "description": "Operations related to integrations",
      "name": "integrations"
    },
    {
      "description": "Operations related to issue links",
      "name": "issue_links"
    },
    {
      "description": "Operations related to JiraConnect subscriptions",
      "name": "jira_connect_subscriptions"
    },
    {
      "description": "Operations related to Maven packages",
      "name": "maven_packages"
    },
    {
      "description": "Operations related to merge requests",
      "name": "merge_requests"
    },
    {
      "description": "Operations related to metadata of the GitLab instance",
      "name": "metadata"
    },
    {
      "description": "Operations related to Model registry",
      "name": "ml_model_registry"
    },
    {
      "description": "Operations related to NPM packages",
      "name": "npm_packages"
    },
    {
      "description": "Operations related to Nuget packages",
      "name": "nuget_packages"
    },
    {
      "description": "Operations about package files",
      "name": "package_files"
    },
    {
      "description": "Operations related to plan limits",
      "name": "plan_limits"
    },
    {
      "description": "Operations related to exporting projects",
      "name": "project_export"
    },
    {
      "description": "Operations related to project hooks",
      "name": "project_hooks"
    },
    {
      "description": "Operations related to importing projects",
      "name": "project_import"
    },
    {
      "description": "Operations related to importing BitBucket projects",
      "name": "project_import_bitbucket"
    },
    {
      "description": "Operations related to importing GitHub projects",
      "name": "project_import_github"
    },
    {
      "description": "Operations related to project packages",
      "name": "project_packages"
    },
    {
      "description": "Operations related to projects",
      "name": "projects"
    },
    {
      "description": "Operations related to protected environments",
      "name": "protected environments"
    },
    {
      "description": "Operations related to PyPI packages",
      "name": "pypi_packages"
    },
    {
      "description": "Operations related to release assets (links)",
      "name": "release_links"
    },
    {
      "description": "Operations related to releases",
      "name": "releases"
    },
    {
      "description": "Operations about resource milestone events",
      "name": "resource_milestone_events"
    },
    {
      "description": "Operations related to RPM packages",
      "name": "rpm_packages"
    },
    {
      "description": "Operations related to RubyGems",
      "name": "rubygem_packages"
    },
    {
      "description": "Operations related to suggestions",
      "name": "suggestions"
    },
    {
      "description": "Operations related to system hooks",
      "name": "system_hooks"
    },
    {
      "description": "Operations related to Terraform state files",
      "name": "terraform_state"
    },
    {
      "description": "Operations related to the Terraform module registry",
      "name": "terraform_registry"
    },
    {
      "description": "Operations related to Unleash API",
      "name": "unleash_api"
    }
  ]
}
