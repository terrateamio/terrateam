#!/usr/bin/env python3

import os
import subprocess
import sys

print("[TERRAT-WRAPPER] Starting terrat service wrapper...", flush=True)

def setup_environment():
    """Setup required environment variables"""
    # Handle custom CA certificates
    custom_ca_cert = os.getenv('CUSTOM_CA_CERT')
    if custom_ca_cert:
        print(f"Installing custom CA certificates...", flush=True)
        try:
            result = subprocess.run(['sudo', '-E', '/usr/local/bin/install-ca-cert'],
                                  capture_output=True, text=True)
            if result.returncode == 0:
                print("Custom CA certificates installed successfully", flush=True)
            else:
                print("Failed to install custom CA certificates", flush=True)
                print(f"Error: {result.stderr}", flush=True)
        except Exception as e:
            print(f"Failed to install certificates: {e}", flush=True)
        os.environ['CERTS_DIR'] = '/etc/ssl/certs'

    # Setup environment variables
    if 'GITHUB_APP_PEM' in os.environ:
        os.environ['GITHUB_APP_PEM'] = os.environ['GITHUB_APP_PEM'].replace('\\n', '\n')

    os.environ['TERRAT_PYTHON_EXEC'] = '/usr/bin/python3'
    os.environ['NGINX_STATUS_URI'] = 'http://localhost:8080/nginx_status'
    os.environ['TERRAT_PORT'] = '8180'
    os.environ.setdefault('GITHUB_API_BASE_URL', 'https://api.github.com')
    os.environ.setdefault('INFRACOST_PRICING_API_ENDPOINT', '')
    os.environ.setdefault('SELF_HOSTED_INFRACOST_API_KEY', '')

    # Set OCaml runtime params for verbose output
    os.environ['OCAMLRUNPARAM'] = 'b,v=0x1f'

def main():
    print('=' * 80, flush=True)
    print('TERRAT SERVICE STARTUP', flush=True)
    print('=' * 80, flush=True)

    setup_environment()

    # Verify TERRAT_API_BASE is set
    if not os.environ.get('TERRAT_API_BASE'):
        print('ERROR: TERRAT_API_BASE must be set', flush=True)
        sys.exit(1)

    print(f"Environment ready:", flush=True)
    print(f"  DB_HOST: {os.environ.get('DB_HOST', '(not set)')}", flush=True)
    print(f"  DB_NAME: {os.environ.get('DB_NAME', '(not set)')}", flush=True)
    print(f"  TERRAT_API_BASE: {os.environ.get('TERRAT_API_BASE')}", flush=True)
    print(f"  OCAMLRUNPARAM: {os.environ.get('OCAMLRUNPARAM')}", flush=True)
    print('=' * 80, flush=True)

    # Run migration with strace
    print("\nStarting database migration with strace...", flush=True)
    print("Command: strace -ff -t -s 100 -v /usr/local/bin/terrat migrate", flush=True)
    print('=' * 80, flush=True)

    try:
        subprocess.check_call([
            'strace',
            '-ff',           # Follow forks
            '-t',            # Print timestamps
            '-s', '100',     # String length
            '-v',            # Verbose
            '/usr/local/bin/terrat',
            'migrate'
        ])
        print("\n" + "=" * 80, flush=True)
        print("MIGRATION COMPLETED SUCCESSFULLY", flush=True)
        print("=" * 80, flush=True)
    except subprocess.CalledProcessError as e:
        print(f"\nMIGRATION FAILED WITH EXIT CODE {e.returncode}", flush=True)
        sys.exit(1)
    except Exception as e:
        print(f"\nMIGRATION FAILED: {str(e)}", flush=True)
        sys.exit(1)

    # Start server with strace
    print("\nStarting terrat server with strace...", flush=True)
    print("Command: strace -ff -t -s 100 -v /usr/local/bin/terrat server", flush=True)
    print('=' * 80, flush=True)
    sys.stdout.flush()
    sys.stderr.flush()

    os.execv('/usr/bin/strace', [
        '/usr/bin/strace',
        '-ff',
        '-t',
        '-s', '100',
        '-v',
        '/usr/local/bin/terrat',
        'server'
    ])

if __name__ == '__main__':
    main()
