/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/github/v1/work-manifests/{work_manifest_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["work-manifest/results"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/github/v1/work-manifests/{work_manifest_id}/access-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["work-manifest/get-access-token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/github/v1/work-manifests/{work_manifest_id}/initiate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["work-manifest/initiate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/github/v1/work-manifests/{work_manifest_id}/plans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["work-manifest/plan-get"];
        put?: never;
        post: operations["work-manifest/plan-create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/github/v1/work-manifests/{work_manifest_id}/workspaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["work-manifest/workspaces"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/admin/drifts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["admin/drifts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/github/client_id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["api_v1/client_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/github/installations/{installation_id}/dirspaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["installations/list-dirspaces"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/github/installations/{installation_id}/pull-requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["installations/list-pull-requests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/github/installations/{installation_id}/repos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["installations/list-repos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/github/installations/{installation_id}/repos/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["installations/repo-refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/github/installations/{installation_id}/work-manifests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["installations/list-work-manifests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/github/installations/{installation_id}/work-manifests/{work_manifest_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["installations/get-work-manifest"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/github/installations/{installation_id}/work-manifests/{work_manifest_id}/outputs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["installations/get-work-manifest-outputs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/github/whoami": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["github-user/whoami"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gitlab/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["gitlab-groups/list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gitlab/groups/{id}/is-member": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["gitlab-groups/is-member"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gitlab/installations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["gitlab-installations/list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gitlab/installations/{id}/webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["gitlab-installations/get-webhook"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gitlab/installations/{installation_id}/dirspaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["gitlab-installations/list-dirspaces"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gitlab/installations/{installation_id}/repos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["gitlab-installations/list-repos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gitlab/installations/{installation_id}/work-manifests/{work_manifest_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["gitlab-installations/get-work-manifest"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gitlab/installations/{installation_id}/work-manifests/{work_manifest_id}/outputs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["gitlab-installations/get-work-manifest-outputs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gitlab/installations/{installation_id}/work-manifests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["gitlab-installations/list-work-manifests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gitlab/whoami": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["gitlab-user/whoami"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gitlab/whoareyou": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["gitlab-user/whoareyou"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["user/logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/server/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["server/config"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tasks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tasks/get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/github/installations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["user/list-github-installations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/whoami": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["user/whoami"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        "dirspace-state": "aborted" | "failure" | "queued" | "running" | "success" | "unknown";
        "bad-request-err": {
            data?: string;
            id: string;
        };
        error: {
            msg: string;
        };
        gate: {
            all_of?: string[];
            any_of?: string[];
            any_of_count?: number;
            dir?: string;
            token: string;
            workspace?: string;
        };
        "github-user": {
            avatar_url?: string;
            username: string;
        };
        "gitlab-group": {
            id: number;
            name: string;
        };
        "gitlab-user": {
            avatar_url?: string;
            username: string;
        };
        "gitlab-webhook": {
            state: string;
            webhook_secret?: string;
            webhook_url: string;
        };
        "gitlab-whoareyou": {
            id: number;
            username: string;
        };
        "hook-outputs": {
            post: (components["schemas"]["workflow-output-drift-create-issue"] | components["schemas"]["workflow-output-run"] | components["schemas"]["workflow-output-env"] | components["schemas"]["workflow-output-oidc"])[];
            pre: (components["schemas"]["workflow-output-run"] | components["schemas"]["workflow-output-env"] | components["schemas"]["workflow-output-checkout"] | components["schemas"]["workflow-output-cost-estimation"] | components["schemas"]["workflow-output-oidc"])[];
        };
        installation: {
            account_status: string;
            id: string;
            name: string;
            tier: components["schemas"]["tier"];
            trial_ends_at?: string;
        };
        "installation-dirspace": {
            base_branch: string;
            base_ref: string;
            branch: string;
            branch_ref: string;
            completed_at?: string;
            created_at: string;
            dir: string;
            environment?: string;
            id: string;
            kind: components["schemas"]["kind-drift"] | components["schemas"]["kind-index"] | components["schemas"]["kind-pull-request"];
            owner: string;
            repo: string;
            run_id?: string;
            run_type: components["schemas"]["run-type"];
            state: components["schemas"]["dirspace-state"];
            tag_query: string;
            user?: string;
            workspace: string;
        };
        "installation-pull-request": {
            base_branch: string;
            base_sha: string;
            branch: string;
            latest_work_manifest_run_at?: string;
            merged_at?: string;
            merged_sha?: string;
            name: string;
            owner: string;
            pull_number: number;
            repository: number;
            sha: string;
            /** @enum {string} */
            state: "open" | "closed" | "merged";
            title?: string;
            user?: string;
        };
        "installation-repo": {
            id: string;
            installation_id: string;
            name: string;
            setup: boolean;
            updated_at: string;
        };
        "installation-work-manifest": {
            base_branch: string;
            base_ref: string;
            branch: string;
            branch_ref: string;
            completed_at?: string;
            created_at: string;
            dirspaces: components["schemas"]["work-manifest-dirspace"][];
            environment?: string;
            id: string;
            kind: components["schemas"]["kind-drift"] | components["schemas"]["kind-index"] | components["schemas"]["kind-pull-request"];
            owner: string;
            repo: string;
            run_id?: string;
            run_type: components["schemas"]["run-type"];
            state: components["schemas"]["work-manifest-state"];
            tag_query: string;
            user?: string;
        };
        "installation-work-manifest-target-pull-request": {
            pull_number: number;
            pull_request_title?: string;
        };
        "installation-workflow-step-output": {
            created_at: string;
            idx: number;
            ignore_errors: boolean;
            payload?: {
                [key: string]: Record<string, never>;
            };
            scope: components["schemas"]["workflow-step-output-scope"];
            state: string;
            step: string;
        };
        /** @constant */
        "kind-drift": "drift";
        /** @constant */
        "kind-index": "index";
        "kind-pull-request": {
            pull_number: number;
            pull_request_title?: string;
        };
        "output-cost-estimation": {
            cost_estimation: {
                currency: string;
                diff_monthly_cost: number;
                dirspaces: {
                    diff_monthly_cost: number;
                    path: string;
                    prev_monthly_cost: number;
                    total_monthly_cost: number;
                    workspace: string;
                }[];
                prev_monthly_cost: number;
                total_monthly_cost: number;
            };
        };
        "output-plan": {
            /** @default true */
            has_changes: boolean;
            plan: string;
            plan_text: string;
        };
        "output-text": {
            output_key?: string;
            text: string;
        };
        "plan-create": {
            /** @default true */
            has_changes: boolean;
            path: string;
            plan_data: string;
            workspace: string;
        };
        "run-kind-data-pull-request": {
            id: string;
        };
        /** @enum {string} */
        "run-type": "apply" | "build-config" | "build-tree" | "index" | "plan";
        "server-config": {
            github?: components["schemas"]["server-config-github"];
            gitlab?: components["schemas"]["server-config-gitlab"];
        };
        "server-config-github": {
            api_base_url: string;
            app_client_id: string;
            app_url: string;
            web_base_url: string;
        };
        "server-config-gitlab": {
            api_base_url: string;
            app_id: string;
            redirect_url: string;
            web_base_url: string;
        };
        task: {
            id: string;
            name: string;
            /** @enum {string} */
            state: "aborted" | "pending" | "running" | "completed" | "failed";
            updated_at: string;
        };
        tier: {
            features: {
                num_users_per_month?: number;
            };
            name: string;
        };
        user: {
            id: string;
            vcs: string[];
        };
        "work-manifest": components["schemas"]["work-manifest-plan"] | components["schemas"]["work-manifest-apply"] | components["schemas"]["work-manifest-index"] | components["schemas"]["work-manifest-unsafe-apply"] | components["schemas"]["work-manifest-build-config"] | components["schemas"]["work-manifest-done"] | components["schemas"]["work-manifest-build-tree"];
        "work-manifest-apply": {
            base_ref: string;
            capabilities: string[];
            changed_dirspaces: components["schemas"]["work-manifest-dir"][];
            config: Record<string, never>;
            result_version: number;
            run_kind: string;
            token: string;
            /** @constant */
            type: "apply";
        };
        "work-manifest-build-config": {
            base_ref: string;
            config: Record<string, never>;
            token: string;
            /** @constant */
            type: "build-config";
        };
        "work-manifest-build-config-result": {
            config: Record<string, never>;
        };
        "work-manifest-build-result-failure": {
            msg: string;
        };
        "work-manifest-build-tree": {
            base_ref: string;
            config: Record<string, never>;
            token: string;
            /** @constant */
            type: "build-tree";
        };
        "work-manifest-build-tree-result": {
            files: {
                changed?: boolean;
                id?: string;
                path: string;
            }[];
        };
        "work-manifest-dir": {
            path: string;
            /** @description Starts at 0, relative dependency order to perform operation on dir. */
            rank: number;
            workflow?: number;
            workspace: string;
        };
        "work-manifest-dirspace": {
            dir: string;
            success?: boolean;
            workspace: string;
        };
        "work-manifest-dirspace-result": {
            outputs: components["schemas"]["workflow-outputs"];
            path: string;
            success: boolean;
            workspace: string;
        };
        "work-manifest-dirspace-results": components["schemas"]["work-manifest-dirspace-result"][];
        "work-manifest-done": {
            /** @constant */
            type: "done";
        };
        "work-manifest-index": {
            base_ref: string;
            config: Record<string, never>;
            dirs: string[];
            token: string;
            /** @constant */
            type: "index";
        };
        "work-manifest-index-paths": {
            [key: string]: {
                failures: {
                    [key: string]: {
                        lnum?: number;
                        msg: string;
                    };
                };
                modules: string[];
            };
        };
        "work-manifest-index-result": {
            paths: components["schemas"]["work-manifest-index-paths"];
            success: boolean;
            symlinks?: components["schemas"]["work-manifest-index-symlinks"];
            /** @constant */
            version: 1;
        };
        "work-manifest-index-symlinks": {
            [key: string]: string;
        };
        "work-manifest-initiate": {
            run_id: string;
            sha: string;
        };
        "work-manifest-plan": {
            base_dirspaces: components["schemas"]["work-manifest-dir"][];
            base_ref: string;
            capabilities: string[];
            changed_dirspaces: components["schemas"]["work-manifest-dir"][];
            config: Record<string, never>;
            dirspaces: components["schemas"]["work-manifest-dir"][];
            result_version: number;
            run_kind: string;
            run_kind_data?: components["schemas"]["run-kind-data-pull-request"];
            token: string;
            /** @constant */
            type: "plan";
        };
        "work-manifest-result": components["schemas"]["work-manifest-index-result"] | components["schemas"]["work-manifest-build-config-result"] | components["schemas"]["work-manifest-build-tree-result"] | components["schemas"]["work-manifest-build-result-failure"] | components["schemas"]["work-manifest-tf-operation-result"] | components["schemas"]["work-manifest-tf-operation-result2"];
        /** @enum {string} */
        "work-manifest-state": "aborted" | "completed" | "queued" | "running";
        "work-manifest-tf-operation-result": {
            dirspaces: components["schemas"]["work-manifest-dirspace-results"];
            overall: {
                outputs: components["schemas"]["hook-outputs"];
                success: boolean;
            };
        };
        "work-manifest-tf-operation-result2": {
            gates?: components["schemas"]["gate"][];
            steps: components["schemas"]["workflow-step-output"][];
        };
        "work-manifest-unsafe-apply": {
            base_ref: string;
            changed_dirspaces: components["schemas"]["work-manifest-dir"][];
            config: Record<string, never>;
            run_kind: string;
            token: string;
            /** @constant */
            type: "unsafe-apply";
        };
        "work-manifest-workspaces": {
            dir: string;
            workspace: string;
        }[];
        "workflow-output-apply": {
            outputs?: components["schemas"]["output-text"];
            success: boolean;
            workflow_step: {
                /** @constant */
                type: "apply";
            };
        };
        "workflow-output-checkout": {
            outputs: components["schemas"]["output-text"];
            success: boolean;
            workflow_step: {
                /** @constant */
                type: "checkout";
            };
        };
        "workflow-output-cost-estimation": {
            outputs: components["schemas"]["output-text"] | components["schemas"]["output-cost-estimation"];
            success: boolean;
            workflow_step: {
                /** @constant */
                type: "cost-estimation";
            };
        };
        "workflow-output-drift-create-issue": {
            outputs?: components["schemas"]["output-text"];
            success: boolean;
            workflow_step: {
                /** @constant */
                type: "drift-create-issue";
            };
        };
        "workflow-output-env": {
            outputs?: components["schemas"]["output-text"];
            success: boolean;
            workflow_step: {
                cmd: string[];
                method?: string;
                name?: string;
                /** @constant */
                type: "env";
            };
        };
        "workflow-output-init": {
            outputs?: components["schemas"]["output-text"];
            success: boolean;
            workflow_step: {
                /** @constant */
                type: "init";
            };
        };
        "workflow-output-oidc": {
            outputs?: components["schemas"]["output-text"];
            success: boolean;
            workflow_step: {
                /** @constant */
                type: "oidc";
            };
        };
        "workflow-output-plan": {
            outputs?: components["schemas"]["output-text"] | components["schemas"]["output-plan"];
            success: boolean;
            workflow_step: {
                /** @constant */
                type: "plan";
            };
        };
        "workflow-output-run": {
            outputs?: components["schemas"]["output-text"];
            success: boolean;
            workflow_step: {
                cmd: string[];
                exit_code?: number;
                /** @constant */
                type: "run";
            };
        };
        "workflow-outputs": (components["schemas"]["workflow-output-apply"] | components["schemas"]["workflow-output-env"] | components["schemas"]["workflow-output-init"] | components["schemas"]["workflow-output-oidc"] | components["schemas"]["workflow-output-plan"] | components["schemas"]["workflow-output-run"])[];
        "workflow-step-output": {
            ignore_errors: boolean;
            payload: {
                [key: string]: Record<string, never>;
            };
            scope: components["schemas"]["workflow-step-output-scope"];
            step: string;
            success: boolean;
        };
        "workflow-step-output-scope": components["schemas"]["workflow-step-output-scope-dirspace"] | components["schemas"]["workflow-step-output-scope-run"];
        "workflow-step-output-scope-dirspace": {
            dir: string;
            /** @constant */
            type?: "dirspace";
            workspace: string;
        };
        "workflow-step-output-scope-run": {
            flow: string;
            subflow: string;
            /** @constant */
            type?: "run";
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "work-manifest/results": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                work_manifest_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["work-manifest-result"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "work-manifest/get-access-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        access_token: string;
                    };
                };
            };
        };
    };
    "work-manifest/initiate": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                work_manifest_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["work-manifest-initiate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["work-manifest"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "work-manifest/plan-get": {
        parameters: {
            query: {
                dir: string;
                workspace: string;
            };
            header?: never;
            path: {
                work_manifest_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: string;
                    };
                };
            };
        };
    };
    "work-manifest/plan-create": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                work_manifest_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["plan-create"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "work-manifest/workspaces": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                work_manifest_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["work-manifest-workspaces"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "admin/drifts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        results: {
                            completed_at?: string;
                            created_at: string;
                            id: string;
                            name: string;
                            owner: string;
                            run_type: components["schemas"]["run-type"];
                            state: string;
                            unlocked: boolean;
                        }[];
                    };
                };
            };
        };
    };
    "api_v1/client_id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        client_id: string;
                    };
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "installations/list-dirspaces": {
        parameters: {
            query?: {
                page?: string[];
                q?: string;
                d?: "asc" | "desc";
                tz?: string;
                limit?: number;
            };
            header?: never;
            path: {
                installation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        dirspaces: components["schemas"]["installation-dirspace"][];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["bad-request-err"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "installations/list-pull-requests": {
        parameters: {
            query?: {
                page?: string[];
                pr?: number;
            };
            header?: never;
            path: {
                installation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        pull_requests: components["schemas"]["installation-pull-request"][];
                    };
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "installations/list-repos": {
        parameters: {
            query?: {
                page?: string[];
            };
            header?: never;
            path: {
                installation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        repositories: components["schemas"]["installation-repo"][];
                    };
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "installations/repo-refresh": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                installation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: string;
                    };
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "installations/list-work-manifests": {
        parameters: {
            query?: {
                page?: string[];
                q?: string;
                d?: "asc" | "desc";
                tz?: string;
                limit?: number;
            };
            header?: never;
            path: {
                installation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        work_manifests: components["schemas"]["installation-work-manifest"][];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["bad-request-err"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "installations/get-work-manifest": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                installation_id: string;
                work_manifest_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["installation-work-manifest"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "installations/get-work-manifest-outputs": {
        parameters: {
            query?: {
                q?: string;
                page?: string[];
                tz?: string;
                limit?: number;
                lite?: boolean;
            };
            header?: never;
            path: {
                installation_id: string;
                work_manifest_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        steps: components["schemas"]["installation-workflow-step-output"][];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["bad-request-err"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "github-user/whoami": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["github-user"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "gitlab-groups/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["gitlab-group"][];
                };
            };
        };
    };
    "gitlab-groups/is-member": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        result: boolean;
                    };
                };
            };
        };
    };
    "gitlab-installations/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        installations: components["schemas"]["installation"][];
                    };
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "gitlab-installations/get-webhook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["gitlab-webhook"];
                };
            };
        };
    };
    "gitlab-installations/list-dirspaces": {
        parameters: {
            query?: {
                page?: string[];
                q?: string;
                d?: "asc" | "desc";
                tz?: string;
                limit?: number;
            };
            header?: never;
            path: {
                installation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        dirspaces: components["schemas"]["installation-dirspace"][];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["bad-request-err"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "gitlab-installations/list-repos": {
        parameters: {
            query?: {
                page?: string[];
            };
            header?: never;
            path: {
                installation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        repositories: components["schemas"]["installation-repo"][];
                    };
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "gitlab-installations/get-work-manifest": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                installation_id: string;
                work_manifest_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["installation-work-manifest"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "gitlab-installations/get-work-manifest-outputs": {
        parameters: {
            query?: {
                q?: string;
                page?: string[];
                tz?: string;
                limit?: number;
                lite?: boolean;
            };
            header?: never;
            path: {
                installation_id: string;
                work_manifest_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        steps: components["schemas"]["installation-workflow-step-output"][];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["bad-request-err"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "gitlab-installations/list-work-manifests": {
        parameters: {
            query?: {
                page?: string[];
                q?: string;
                d?: "asc" | "desc";
                tz?: string;
                limit?: number;
            };
            header?: never;
            path: {
                installation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        work_manifests: components["schemas"]["installation-work-manifest"][];
                    };
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["bad-request-err"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "gitlab-user/whoami": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["gitlab-user"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "gitlab-user/whoareyou": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["gitlab-whoareyou"];
                };
            };
        };
    };
    "user/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "server/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["server-config"];
                };
            };
        };
    };
    "tasks/get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["task"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "user/list-github-installations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        installations: components["schemas"]["installation"][];
                    };
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "user/whoami": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["user"];
                };
            };
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
